#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CH_MeshBase

#include "Basic.hpp"

#include "Enum_LocomotionState_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_FloorState_structs.hpp"
#include "MovementDirection_structs.hpp"
#include "Xrd777_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "LeanAmount_structs.hpp"
#include "VelocityBlend_structs.hpp"
#include "DynamicMontageParams_structs.hpp"
#include "RotateInPlace_Asset_structs.hpp"
#include "TurnInPlace_Asset_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "GroundedEntryState_structs.hpp"


namespace SDK::Params
{

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.ExecuteUbergraph_ABP_CH_MeshBase
// 0x0290 (0x0290 - 0x0000)
struct ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_1;     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_2;      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_3;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_4;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_2;     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_5;      // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_3;     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_6;      // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_4;     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_7;      // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_14;                // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_15;                // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_9;                // 0x00A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_16;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_5;     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_8;      // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_17;                // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_10;               // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_18;                // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_GetComponentByClass_ReturnValue;          // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_3;               // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      CallFunc_GetComponentByClass_ReturnValue_1;        // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_SinkingDistance;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_TargetActor;                          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_BoneName;                             // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_LookAtType;                           // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Location;                             // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_6;     // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_9;      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_19;                // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_20;                // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_143[0x1];                                      // 0x0143(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldMoveCheck_Return_Value;             // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_3;                     // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_10;     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_7;     // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_11;     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_21;                // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_22;                // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15B[0x1];                                      // 0x015B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_11;               // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_4;            // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_182[0x2];                                      // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18A[0x2];                                      // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FCeil_ReturnValue_1;                      // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_4;               // 0x01BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCurveValue_ReturnValue_4;              // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_12;     // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D7[0x1];                                      // 0x01D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_5;              // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDynamicMontageParams                  K2Node_CustomEvent_Parameters_1;                   // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGroundedEntryState                           K2Node_Event_GroundedEntryState;                   // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_5;               // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_ReTriggerDelay;                 // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDynamicMontageParams                  K2Node_CustomEvent_Parameters;                     // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_OverlayOverrideState;                 // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Event_InAnimSeq;                            // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_4;                     // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23E[0x2];                                      // 0x023E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0240(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_1;                         // 0x0250(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetPostProcessInstance_ReturnValue;       // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A[0x6];                                      // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_8;     // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_13;     // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_23;                // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_24;                // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_5;                     // 0x0286(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_1;                             // 0x0287(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable;                               // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase");
static_assert(sizeof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase) == 0x000290, "Wrong size on ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, EntryPoint) == 0x000000, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Less_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00000D, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetInstanceStateWeight_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetInstanceStateWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000015, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetInstanceStateWeight_ReturnValue_1) == 0x000018, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetInstanceStateWeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_1) == 0x00001C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_2) == 0x00001D, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_2) == 0x00001E, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x00001F, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x000020, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2) == 0x000024, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_3) == 0x000028, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_4) == 0x000029, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_3) == 0x00002A, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_4) == 0x00002B, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_1) == 0x00002C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetInstanceStateWeight_ReturnValue_2) == 0x000030, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetInstanceStateWeight_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanOR_ReturnValue) == 0x000034, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_5) == 0x000035, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_5) == 0x000036, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_2) == 0x000037, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000039, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_6) == 0x00003A, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00003B, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x00003C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_7) == 0x00003D, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_3) == 0x00003E, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanOR_ReturnValue_1) == 0x00003F, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_int_Array_Index_Variable) == 0x000040, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_Has_Been_Initd_Variable) == 0x000048, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetInstanceStateWeight_ReturnValue_3) == 0x000050, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetInstanceStateWeight_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_IsClosed_Variable) == 0x000054, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_6) == 0x000055, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_8) == 0x000056, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_IsClosed_Variable_1) == 0x000057, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_9) == 0x000058, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_int_Array_Index_Variable_1) == 0x00005C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_4) == 0x000064, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_IsClosed_Variable_2) == 0x00006C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_5) == 0x00006D, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000070, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000074, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanOR_ReturnValue_2) == 0x000075, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_10) == 0x000076, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_11) == 0x000077, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_6) == 0x000078, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_MakeVector_ReturnValue) == 0x00007C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_7) == 0x000088, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_Has_Been_Initd_Variable_1) == 0x000089, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanOR_ReturnValue_3) == 0x00008A, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_12) == 0x00008B, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_13) == 0x00008C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetInstanceStateWeight_ReturnValue_4) == 0x000090, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetInstanceStateWeight_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000094, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_7) == 0x000095, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_14) == 0x000096, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Ease_ReturnValue) == 0x000098, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00009C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Ease_ReturnValue_1) == 0x0000A0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanOR_ReturnValue_4) == 0x0000A4, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_8) == 0x0000A5, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_15) == 0x0000A6, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_9) == 0x0000A7, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_16) == 0x0000AC, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetInstanceStateWeight_ReturnValue_5) == 0x0000B0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetInstanceStateWeight_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_8) == 0x0000B4, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_17) == 0x0000B5, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0000B6, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_SelectFloat_ReturnValue) == 0x0000B8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_10) == 0x0000BC, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_18) == 0x0000BD, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0000BE, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_SelectFloat_ReturnValue_1) == 0x0000C0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_TryGetPawnOwner_ReturnValue) == 0x0000C8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_DynamicCast_AsCharacter) == 0x0000D0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_IsValid_ReturnValue) == 0x0000D9, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetComponentByClass_ReturnValue) == 0x0000E0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_IsValid_ReturnValue_1) == 0x0000E8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_Has_Been_Initd_Variable_2) == 0x0000E9, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_IsValid_ReturnValue_2) == 0x0000EA, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_Has_Been_Initd_Variable_3) == 0x0000EB, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_Has_Been_Initd_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetComponentByClass_ReturnValue_1) == 0x0000F0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_IsValid_ReturnValue_3) == 0x0000F8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_SinkingDistance) == 0x0000FC, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_SinkingDistance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetCurveValue_ReturnValue) == 0x000100, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000104, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_RandomFloatInRange_ReturnValue) == 0x000108, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_TargetActor) == 0x000110, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_TargetActor' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_BoneName) == 0x000118, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_BoneName' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_LookAtType) == 0x000128, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_LookAtType' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetValidValue_ReturnValue) == 0x000129, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_Location) == 0x00012C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_SwitchEnum_CmpSuccess) == 0x000138, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetInstanceStateWeight_ReturnValue_6) == 0x00013C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetInstanceStateWeight_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_9) == 0x000140, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_19) == 0x000141, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_20) == 0x000142, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_DeltaTimeX) == 0x000144, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_ShouldMoveCheck_Return_Value) == 0x000148, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_ShouldMoveCheck_Return_Value' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_IsClosed_Variable_3) == 0x000149, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_IsClosed_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetCurveValue_ReturnValue_1) == 0x00014C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_10) == 0x000150, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetInstanceStateWeight_ReturnValue_7) == 0x000154, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetInstanceStateWeight_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_11) == 0x000158, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_21) == 0x000159, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_22) == 0x00015A, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_FCeil_ReturnValue) == 0x00015C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Add_FloatFloat_ReturnValue) == 0x000160, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000164, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000168, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Not_PreBool_ReturnValue_11) == 0x00016C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Not_PreBool_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000170, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_FClamp_ReturnValue) == 0x000174, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000178, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetCurveValue_ReturnValue_2) == 0x00017C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x000180, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Less_FloatFloat_ReturnValue_4) == 0x000181, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Less_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetCurveValue_ReturnValue_3) == 0x000184, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_SwitchEnum_CmpSuccess_1) == 0x000188, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000189, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetVelocity_ReturnValue) == 0x00018C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_VSize_ReturnValue) == 0x000198, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x0001A0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_IsValid_ReturnValue_4) == 0x0001A8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_FCeil_ReturnValue_1) == 0x0001AC, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_FCeil_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x0001B0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_IsValid_ReturnValue_5) == 0x0001B8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_IsValid_ReturnValue_6) == 0x0001B9, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_IsValid_ReturnValue_7) == 0x0001BA, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_Has_Been_Initd_Variable_4) == 0x0001BB, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_Has_Been_Initd_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetCurveValue_ReturnValue_4) == 0x0001BC, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetCurveValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0001C0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Percent_FloatFloat_ReturnValue) == 0x0001C4, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0001C8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_12) == 0x0001CC, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Round_ReturnValue) == 0x0001D0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Conv_IntToByte_ReturnValue) == 0x0001D4, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetValidValue_ReturnValue_1) == 0x0001D5, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001D6, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x0001D8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetCurveValue_ReturnValue_5) == 0x0001DC, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetCurveValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0001E0, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanOR_ReturnValue_5) == 0x0001E1, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_CustomEvent_Parameters_1) == 0x0001E8, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_CustomEvent_Parameters_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_GroundedEntryState) == 0x000200, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_GroundedEntryState' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_Has_Been_Initd_Variable_5) == 0x000201, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_Has_Been_Initd_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_CustomEvent_ReTriggerDelay) == 0x000204, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_CustomEvent_ReTriggerDelay' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_CustomEvent_Parameters) == 0x000208, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_CustomEvent_Parameters' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_OverlayOverrideState) == 0x000220, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_OverlayOverrideState' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_InAnimSeq) == 0x000228, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_InAnimSeq' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Array_Get_Item) == 0x000230, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Array_Length_ReturnValue) == 0x000238, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Less_IntInt_ReturnValue) == 0x00023C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_IsClosed_Variable_4) == 0x00023D, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_IsClosed_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000240, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Array_Get_Item_1) == 0x000250, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Array_Length_ReturnValue_1) == 0x000258, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetPostProcessInstance_ReturnValue) == 0x000260, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetPostProcessInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Less_IntInt_ReturnValue_1) == 0x000268, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_IsValid_ReturnValue_8) == 0x000269, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetObjectClass_ReturnValue) == 0x000270, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_GetInstanceStateWeight_ReturnValue_8) == 0x000278, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_GetInstanceStateWeight_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_EqualEqual_FloatFloat_ReturnValue_13) == 0x00027C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_EqualEqual_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_Array_Add_ReturnValue) == 0x000280, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_23) == 0x000284, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_BooleanAND_ReturnValue_24) == 0x000285, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_BooleanAND_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, Temp_bool_IsClosed_Variable_5) == 0x000286, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::Temp_bool_IsClosed_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_Enable_1) == 0x000287, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_Enable_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, K2Node_Event_Enable) == 0x000288, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase, CallFunc_SelectFloat_ReturnValue_2) == 0x00028C, "Member 'ABP_CH_MeshBase_C_ExecuteUbergraph_ABP_CH_MeshBase::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Set No Blink
// 0x0001 (0x0001 - 0x0000)
struct ABP_CH_MeshBase_C_Set_No_Blink final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Set_No_Blink) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_Set_No_Blink");
static_assert(sizeof(ABP_CH_MeshBase_C_Set_No_Blink) == 0x000001, "Wrong size on ABP_CH_MeshBase_C_Set_No_Blink");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_No_Blink, Enable) == 0x000000, "Member 'ABP_CH_MeshBase_C_Set_No_Blink::Enable' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Set Saccade
// 0x0001 (0x0001 - 0x0000)
struct ABP_CH_MeshBase_C_Set_Saccade final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Set_Saccade) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_Set_Saccade");
static_assert(sizeof(ABP_CH_MeshBase_C_Set_Saccade) == 0x000001, "Wrong size on ABP_CH_MeshBase_C_Set_Saccade");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_Saccade, Enable) == 0x000000, "Member 'ABP_CH_MeshBase_C_Set_Saccade::Enable' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetOverrideLocomotionNotMoveAnim
// 0x0008 (0x0008 - 0x0000)
struct ABP_CH_MeshBase_C_SetOverrideLocomotionNotMoveAnim final
{
public:
	class UAnimSequence*                          InAnimSeq;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetOverrideLocomotionNotMoveAnim) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_SetOverrideLocomotionNotMoveAnim");
static_assert(sizeof(ABP_CH_MeshBase_C_SetOverrideLocomotionNotMoveAnim) == 0x000008, "Wrong size on ABP_CH_MeshBase_C_SetOverrideLocomotionNotMoveAnim");
static_assert(offsetof(ABP_CH_MeshBase_C_SetOverrideLocomotionNotMoveAnim, InAnimSeq) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetOverrideLocomotionNotMoveAnim::InAnimSeq' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.BPI_SetOverlayOverrideState
// 0x0004 (0x0004 - 0x0000)
struct ABP_CH_MeshBase_C_BPI_SetOverlayOverrideState final
{
public:
	int32                                         OverlayOverrideState_0;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_BPI_SetOverlayOverrideState) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_BPI_SetOverlayOverrideState");
static_assert(sizeof(ABP_CH_MeshBase_C_BPI_SetOverlayOverrideState) == 0x000004, "Wrong size on ABP_CH_MeshBase_C_BPI_SetOverlayOverrideState");
static_assert(offsetof(ABP_CH_MeshBase_C_BPI_SetOverlayOverrideState, OverlayOverrideState_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_BPI_SetOverlayOverrideState::OverlayOverrideState_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.PlayDynamicTransition
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_PlayDynamicTransition final
{
public:
	float                                         ReTriggerDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDynamicMontageParams                  Parameters;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_PlayDynamicTransition) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_PlayDynamicTransition");
static_assert(sizeof(ABP_CH_MeshBase_C_PlayDynamicTransition) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_PlayDynamicTransition");
static_assert(offsetof(ABP_CH_MeshBase_C_PlayDynamicTransition, ReTriggerDelay) == 0x000000, "Member 'ABP_CH_MeshBase_C_PlayDynamicTransition::ReTriggerDelay' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_PlayDynamicTransition, Parameters) == 0x000008, "Member 'ABP_CH_MeshBase_C_PlayDynamicTransition::Parameters' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.BPI_SetGroundedEntryState
// 0x0001 (0x0001 - 0x0000)
struct ABP_CH_MeshBase_C_BPI_SetGroundedEntryState final
{
public:
	EGroundedEntryState                           GroundedEntryState_0;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_BPI_SetGroundedEntryState) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_BPI_SetGroundedEntryState");
static_assert(sizeof(ABP_CH_MeshBase_C_BPI_SetGroundedEntryState) == 0x000001, "Wrong size on ABP_CH_MeshBase_C_BPI_SetGroundedEntryState");
static_assert(offsetof(ABP_CH_MeshBase_C_BPI_SetGroundedEntryState, GroundedEntryState_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_BPI_SetGroundedEntryState::GroundedEntryState_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.PlayTransition
// 0x0018 (0x0018 - 0x0000)
struct ABP_CH_MeshBase_C_PlayTransition final
{
public:
	struct FDynamicMontageParams                  Parameters;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_PlayTransition) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_PlayTransition");
static_assert(sizeof(ABP_CH_MeshBase_C_PlayTransition) == 0x000018, "Wrong size on ABP_CH_MeshBase_C_PlayTransition");
static_assert(offsetof(ABP_CH_MeshBase_C_PlayTransition, Parameters) == 0x000000, "Member 'ABP_CH_MeshBase_C_PlayTransition::Parameters' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_CH_MeshBase_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX_0;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_CH_MeshBase_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_CH_MeshBase_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_CH_MeshBase_C_BlueprintUpdateAnimation, DeltaTimeX_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_BlueprintUpdateAnimation::DeltaTimeX_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetLookAtWorldLocation
// 0x000C (0x000C - 0x0000)
struct ABP_CH_MeshBase_C_SetLookAtWorldLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetLookAtWorldLocation) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_SetLookAtWorldLocation");
static_assert(sizeof(ABP_CH_MeshBase_C_SetLookAtWorldLocation) == 0x00000C, "Wrong size on ABP_CH_MeshBase_C_SetLookAtWorldLocation");
static_assert(offsetof(ABP_CH_MeshBase_C_SetLookAtWorldLocation, Location) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetLookAtWorldLocation::Location' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetLookAtType
// 0x0001 (0x0001 - 0x0000)
struct ABP_CH_MeshBase_C_SetLookAtType final
{
public:
	uint8                                         LookAtType_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetLookAtType) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_SetLookAtType");
static_assert(sizeof(ABP_CH_MeshBase_C_SetLookAtType) == 0x000001, "Wrong size on ABP_CH_MeshBase_C_SetLookAtType");
static_assert(offsetof(ABP_CH_MeshBase_C_SetLookAtType, LookAtType_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetLookAtType::LookAtType_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetLookAtTargetActorBoneName
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_SetLookAtTargetActorBoneName final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetLookAtTargetActorBoneName) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_SetLookAtTargetActorBoneName");
static_assert(sizeof(ABP_CH_MeshBase_C_SetLookAtTargetActorBoneName) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_SetLookAtTargetActorBoneName");
static_assert(offsetof(ABP_CH_MeshBase_C_SetLookAtTargetActorBoneName, BoneName) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetLookAtTargetActorBoneName::BoneName' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetLookAtTargetActor
// 0x0008 (0x0008 - 0x0000)
struct ABP_CH_MeshBase_C_SetLookAtTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetLookAtTargetActor) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_SetLookAtTargetActor");
static_assert(sizeof(ABP_CH_MeshBase_C_SetLookAtTargetActor) == 0x000008, "Wrong size on ABP_CH_MeshBase_C_SetLookAtTargetActor");
static_assert(offsetof(ABP_CH_MeshBase_C_SetLookAtTargetActor, TargetActor) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetLookAtTargetActor::TargetActor' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetSinkingDistance
// 0x0004 (0x0004 - 0x0000)
struct ABP_CH_MeshBase_C_SetSinkingDistance final
{
public:
	float                                         SinkingDistance;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetSinkingDistance) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_SetSinkingDistance");
static_assert(sizeof(ABP_CH_MeshBase_C_SetSinkingDistance) == 0x000004, "Wrong size on ABP_CH_MeshBase_C_SetSinkingDistance");
static_assert(offsetof(ABP_CH_MeshBase_C_SetSinkingDistance, SinkingDistance) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetSinkingDistance::SinkingDistance' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Update Character Info
// 0x0090 (0x0090 - 0x0000)
struct ABP_CH_MeshBase_C_Update_Character_Info final
{
public:
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IALS_Character_BPI_C>  K2Node_DynamicCast_AsALS_Character_BPI;            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovementMode                                 CallFunc_BPI_Get_CurrentStates_PawnMovementMode;   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            CallFunc_BPI_Get_CurrentStates_MovementState;      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            CallFunc_BPI_Get_CurrentStates_PrevMovementState;  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           CallFunc_BPI_Get_CurrentStates_MovementAction;     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             CallFunc_BPI_Get_CurrentStates_RotationMode;       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     CallFunc_BPI_Get_CurrentStates_ActualGait;         // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   CallFunc_BPI_Get_CurrentStates_ActualStance;       // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 CallFunc_BPI_Get_CurrentStates_ViewMode;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             CallFunc_BPI_Get_CurrentStates_OverlayState;       // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IALS_Character_BPI_C>  K2Node_DynamicCast_AsALS_Character_BPI_1;          // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BPI_Get_EssentialValues_Velocity;         // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BPI_Get_EssentialValues_Acceleration;     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BPI_Get_EssentialValues_MovementInput;    // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_Get_EssentialValues_IsMoving;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_EssentialValues_HasMovementInput; // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BPI_Get_EssentialValues_Speed;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BPI_Get_EssentialValues_MovementInputAmount; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BPI_Get_EssentialValues_AimingRotation;   // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BPI_Get_EssentialValues_AimYawRate;       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Update_Character_Info) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_Update_Character_Info");
static_assert(sizeof(ABP_CH_MeshBase_C_Update_Character_Info) == 0x000090, "Wrong size on ABP_CH_MeshBase_C_Update_Character_Info");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, K2Node_DynamicCast_AsALS_Character_BPI) == 0x000010, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::K2Node_DynamicCast_AsALS_Character_BPI' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_CurrentStates_PawnMovementMode) == 0x000021, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_CurrentStates_PawnMovementMode' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_CurrentStates_MovementState) == 0x000022, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_CurrentStates_MovementState' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_CurrentStates_PrevMovementState) == 0x000023, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_CurrentStates_PrevMovementState' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_CurrentStates_MovementAction) == 0x000024, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_CurrentStates_MovementAction' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_CurrentStates_RotationMode) == 0x000025, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_CurrentStates_RotationMode' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_CurrentStates_ActualGait) == 0x000026, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_CurrentStates_ActualGait' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_CurrentStates_ActualStance) == 0x000027, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_CurrentStates_ActualStance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_CurrentStates_ViewMode) == 0x000028, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_CurrentStates_ViewMode' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_CurrentStates_OverlayState) == 0x000029, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_CurrentStates_OverlayState' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, K2Node_DynamicCast_AsALS_Character_BPI_1) == 0x000038, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::K2Node_DynamicCast_AsALS_Character_BPI_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_EssentialValues_Velocity) == 0x00004C, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_EssentialValues_Velocity' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_EssentialValues_Acceleration) == 0x000058, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_EssentialValues_Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_EssentialValues_MovementInput) == 0x000064, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_EssentialValues_MovementInput' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_EssentialValues_IsMoving) == 0x000070, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_EssentialValues_IsMoving' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_EssentialValues_HasMovementInput) == 0x000071, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_EssentialValues_HasMovementInput' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_EssentialValues_Speed) == 0x000074, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_EssentialValues_Speed' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_EssentialValues_MovementInputAmount) == 0x000078, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_EssentialValues_MovementInputAmount' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_EssentialValues_AimingRotation) == 0x00007C, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_EssentialValues_AimingRotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Character_Info, CallFunc_BPI_Get_EssentialValues_AimYawRate) == 0x000088, "Member 'ABP_CH_MeshBase_C_Update_Character_Info::CallFunc_BPI_Get_EssentialValues_AimYawRate' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.UpdateLayerValues
// 0x0024 (0x0024 - 0x0000)
struct ABP_CH_MeshBase_C_UpdateLayerValues final
{
public:
	float                                         Pre_Arm_R_Alpha;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pre_Arm_L_Alpha;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Layering_Arms_Alpha_ArmL_R_Alpha;     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_UpdateLayerValues) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_UpdateLayerValues");
static_assert(sizeof(ABP_CH_MeshBase_C_UpdateLayerValues) == 0x000024, "Wrong size on ABP_CH_MeshBase_C_UpdateLayerValues");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateLayerValues, Pre_Arm_R_Alpha) == 0x000000, "Member 'ABP_CH_MeshBase_C_UpdateLayerValues::Pre_Arm_R_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateLayerValues, Pre_Arm_L_Alpha) == 0x000004, "Member 'ABP_CH_MeshBase_C_UpdateLayerValues::Pre_Arm_L_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateLayerValues, CallFunc_GetCurveValue_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_UpdateLayerValues::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateLayerValues, CallFunc_Get_Layering_Arms_Alpha_ArmL_R_Alpha) == 0x00000C, "Member 'ABP_CH_MeshBase_C_UpdateLayerValues::CallFunc_Get_Layering_Arms_Alpha_ArmL_R_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateLayerValues, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_UpdateLayerValues::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateLayerValues, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'ABP_CH_MeshBase_C_UpdateLayerValues::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateLayerValues, CallFunc_GetCurveValue_ReturnValue_1) == 0x000018, "Member 'ABP_CH_MeshBase_C_UpdateLayerValues::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateLayerValues, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00001C, "Member 'ABP_CH_MeshBase_C_UpdateLayerValues::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateLayerValues, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000020, "Member 'ABP_CH_MeshBase_C_UpdateLayerValues::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Update Foot IK
// 0x001C (0x001C - 0x0000)
struct ABP_CH_MeshBase_C_Update_Foot_IK final
{
public:
	struct FVector                                FootOffset_R_Target;                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootOffset_L_Target;                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Update_Foot_IK) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Update_Foot_IK");
static_assert(sizeof(ABP_CH_MeshBase_C_Update_Foot_IK) == 0x00001C, "Wrong size on ABP_CH_MeshBase_C_Update_Foot_IK");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Foot_IK, FootOffset_R_Target) == 0x000000, "Member 'ABP_CH_MeshBase_C_Update_Foot_IK::FootOffset_R_Target' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Foot_IK, FootOffset_L_Target) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Update_Foot_IK::FootOffset_L_Target' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Foot_IK, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'ABP_CH_MeshBase_C_Update_Foot_IK::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.UpdateMovementValues
// 0x004C (0x004C - 0x0000)
struct ABP_CH_MeshBase_C_UpdateMovementValues final
{
public:
	struct FVelocityBlend                         TargetVelocityBlend;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Calculate_Relative_Acceleration_Amount_ReturnValue; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLeanAmount                            K2Node_MakeStruct_LeanAmount;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_FloorState                               CallFunc_Get_Floor_State_Result;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLeanAmount                            CallFunc_InterpLeanAmount_ReturnValue;             // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_UpdateMovementValues) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_UpdateMovementValues");
static_assert(sizeof(ABP_CH_MeshBase_C_UpdateMovementValues) == 0x00004C, "Wrong size on ABP_CH_MeshBase_C_UpdateMovementValues");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, TargetVelocityBlend) == 0x000000, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::TargetVelocityBlend' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_BreakVector_X) == 0x000010, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_BreakVector_Y) == 0x000014, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_BreakVector_Z) == 0x000018, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_Calculate_Relative_Acceleration_Amount_ReturnValue) == 0x00001C, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_Calculate_Relative_Acceleration_Amount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_FClamp_ReturnValue) == 0x000028, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_FClamp_ReturnValue_1) == 0x00002C, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, K2Node_MakeStruct_LeanAmount) == 0x000030, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::K2Node_MakeStruct_LeanAmount' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_Get_Floor_State_Result) == 0x000038, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_Get_Floor_State_Result' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_InterpLeanAmount_ReturnValue) == 0x00003C, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_InterpLeanAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_SelectFloat_ReturnValue) == 0x000044, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateMovementValues, CallFunc_SelectFloat_ReturnValue_1) == 0x000048, "Member 'ABP_CH_MeshBase_C_UpdateMovementValues::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.UpdateRotationValues
// 0x0064 (0x0064 - 0x0000)
struct ABP_CH_MeshBase_C_UpdateRotationValues final
{
public:
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovementDirection                            CallFunc_CalculateMovementDirection_ReturnValues;  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue_1;             // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_UpdateRotationValues) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_UpdateRotationValues");
static_assert(sizeof(ABP_CH_MeshBase_C_UpdateRotationValues) == 0x000064, "Wrong size on ABP_CH_MeshBase_C_UpdateRotationValues");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_GetControlRotation_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_CalculateMovementDirection_ReturnValues) == 0x000024, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_CalculateMovementDirection_ReturnValues' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_BreakRotator_Roll) == 0x000028, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_BreakRotator_Pitch) == 0x00002C, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_BreakRotator_Yaw) == 0x000030, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_GetVectorValue_ReturnValue) == 0x000034, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_GetVectorValue_ReturnValue_1) == 0x000040, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_GetVectorValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_BreakVector_X) == 0x00004C, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_BreakVector_Y) == 0x000050, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_BreakVector_Z) == 0x000054, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_BreakVector_X_1) == 0x000058, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_BreakVector_Y_1) == 0x00005C, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRotationValues, CallFunc_BreakVector_Z_1) == 0x000060, "Member 'ABP_CH_MeshBase_C_UpdateRotationValues::CallFunc_BreakVector_Z_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.UpdateInAirValues
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_UpdateInAirValues final
{
public:
	struct FLeanAmount                            CallFunc_CalculateInAirLeanAmount_LeanAmount;      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLeanAmount                            CallFunc_InterpLeanAmount_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateLandPrediction_LandPrediction;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_UpdateInAirValues) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_UpdateInAirValues");
static_assert(sizeof(ABP_CH_MeshBase_C_UpdateInAirValues) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_UpdateInAirValues");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateInAirValues, CallFunc_CalculateInAirLeanAmount_LeanAmount) == 0x000000, "Member 'ABP_CH_MeshBase_C_UpdateInAirValues::CallFunc_CalculateInAirLeanAmount_LeanAmount' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateInAirValues, CallFunc_InterpLeanAmount_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_UpdateInAirValues::CallFunc_InterpLeanAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateInAirValues, CallFunc_CalculateLandPrediction_LandPrediction) == 0x000010, "Member 'ABP_CH_MeshBase_C_UpdateInAirValues::CallFunc_CalculateLandPrediction_LandPrediction' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateInAirValues, CallFunc_BreakVector_X) == 0x000014, "Member 'ABP_CH_MeshBase_C_UpdateInAirValues::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateInAirValues, CallFunc_BreakVector_Y) == 0x000018, "Member 'ABP_CH_MeshBase_C_UpdateInAirValues::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateInAirValues, CallFunc_BreakVector_Z) == 0x00001C, "Member 'ABP_CH_MeshBase_C_UpdateInAirValues::CallFunc_BreakVector_Z' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.UpdateRagdollValues
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_UpdateRagdollValues final
{
public:
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_UpdateRagdollValues) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_UpdateRagdollValues");
static_assert(sizeof(ABP_CH_MeshBase_C_UpdateRagdollValues) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_UpdateRagdollValues");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRagdollValues, CallFunc_GetOwningComponent_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_UpdateRagdollValues::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRagdollValues, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_UpdateRagdollValues::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRagdollValues, CallFunc_VSize_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_UpdateRagdollValues::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdateRagdollValues, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_UpdateRagdollValues::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateVelocityBlend
// 0x00A8 (0x00A8 - 0x0000)
struct ABP_CH_MeshBase_C_CalculateVelocityBlend final
{
public:
	struct FVelocityBlend                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RelativeDirection;                                 // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sum;                                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocRelativeVelocityDir;                            // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_3;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_4;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVelocityBlend                         K2Node_MakeStruct_VelocityBlend;                   // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateVelocityBlend) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CalculateVelocityBlend");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateVelocityBlend) == 0x0000A8, "Wrong size on ABP_CH_MeshBase_C_CalculateVelocityBlend");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, RelativeDirection) == 0x000010, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::RelativeDirection' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, Sum) == 0x00001C, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::Sum' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, LocRelativeVelocityDir) == 0x000020, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::LocRelativeVelocityDir' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_Divide_VectorFloat_ReturnValue) == 0x00002C, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_BreakVector_X) == 0x000038, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_BreakVector_Y) == 0x00003C, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_BreakVector_Z) == 0x000040, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue) == 0x000044, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue_1) == 0x000048, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue_2) == 0x00004C, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_Add_FloatFloat_ReturnValue) == 0x000050, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_Normal_ReturnValue) == 0x000054, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000060, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000064, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_BreakVector_X_1) == 0x000070, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_BreakVector_Y_1) == 0x000074, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_BreakVector_Z_1) == 0x000078, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00007C, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_FClamp_ReturnValue) == 0x000080, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_FClamp_ReturnValue_1) == 0x000084, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_FClamp_ReturnValue_2) == 0x000088, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue_3) == 0x00008C, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue_4) == 0x000090, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, CallFunc_FClamp_ReturnValue_3) == 0x000094, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateVelocityBlend, K2Node_MakeStruct_VelocityBlend) == 0x000098, "Member 'ABP_CH_MeshBase_C_CalculateVelocityBlend::K2Node_MakeStruct_VelocityBlend' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateDiagonalScaleAmount
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount, CallFunc_Abs_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount, CallFunc_GetFloatValue_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_CalculateDiagonalScaleAmount::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Calculate Relative Acceleration Amount
// 0x0064 (0x0064 - 0x0000)
struct ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxBrakingDeceleration_ReturnValue;    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_ClampSizeMax_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxAcceleration_ReturnValue;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_ClampSizeMax_ReturnValue_1;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue_1;         // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_1;     // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount");
static_assert(sizeof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount) == 0x000064, "Wrong size on ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_GetMaxBrakingDeceleration_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_GetMaxBrakingDeceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_Vector_ClampSizeMax_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_Vector_ClampSizeMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_Divide_VectorFloat_ReturnValue) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_GetMaxAcceleration_ReturnValue) == 0x000028, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_GetMaxAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x00002C, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_Vector_ClampSizeMax_ReturnValue_1) == 0x000038, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_Vector_ClampSizeMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_Divide_VectorFloat_ReturnValue_1) == 0x000044, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_Divide_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_LessLess_VectorRotator_ReturnValue_1) == 0x000050, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_LessLess_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_Dot_VectorVector_ReturnValue) == 0x00005C, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000060, "Member 'ABP_CH_MeshBase_C_Calculate_Relative_Acceleration_Amount::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateWalkRunBlend
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_CalculateWalkRunBlend final
{
public:
	float                                         WalkRunBlend_0;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkSpeed;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateWalkRunBlend) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CalculateWalkRunBlend");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateWalkRunBlend) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_CalculateWalkRunBlend");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateWalkRunBlend, WalkRunBlend_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateWalkRunBlend::WalkRunBlend_0' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateWalkRunBlend, RunSpeed) == 0x000004, "Member 'ABP_CH_MeshBase_C_CalculateWalkRunBlend::RunSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateWalkRunBlend, WalkSpeed) == 0x000008, "Member 'ABP_CH_MeshBase_C_CalculateWalkRunBlend::WalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateWalkRunBlend, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'ABP_CH_MeshBase_C_CalculateWalkRunBlend::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateWalkRunBlend, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000D, "Member 'ABP_CH_MeshBase_C_CalculateWalkRunBlend::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateWalkRunBlend, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00000E, "Member 'ABP_CH_MeshBase_C_CalculateWalkRunBlend::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateStrideBlend
// 0x0028 (0x0028 - 0x0000)
struct ABP_CH_MeshBase_C_CalculateStrideBlend final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_2;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateStrideBlend) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CalculateStrideBlend");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateStrideBlend) == 0x000028, "Wrong size on ABP_CH_MeshBase_C_CalculateStrideBlend");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, CallFunc_GetCurveValue_ReturnValue_1) == 0x000008, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, CallFunc_GetFloatValue_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, CallFunc_GetFloatValue_ReturnValue_1) == 0x000018, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, CallFunc_GetFloatValue_ReturnValue_2) == 0x00001C, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::CallFunc_GetFloatValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, CallFunc_Lerp_ReturnValue) == 0x000020, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStrideBlend, CallFunc_Lerp_ReturnValue_1) == 0x000024, "Member 'ABP_CH_MeshBase_C_CalculateStrideBlend::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateStandingPlayRate
// 0x0060 (0x0060 - 0x0000)
struct ABP_CH_MeshBase_C_CalculateStandingPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateStandingPlayRate) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_CalculateStandingPlayRate");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateStandingPlayRate) == 0x000060, "Wrong size on ABP_CH_MeshBase_C_CalculateStandingPlayRate");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, PlayRate) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_FClamp_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_GetCurveValue_ReturnValue_1) == 0x000010, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_GetOwningComponent_ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000020, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000024, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_FClamp_ReturnValue_1) == 0x000030, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_BreakVector_X) == 0x000034, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_BreakVector_Y) == 0x000038, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_BreakVector_Z) == 0x00003C, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000044, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000048, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_Lerp_ReturnValue) == 0x00004C, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_Lerp_ReturnValue_1) == 0x000050, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000054, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x000058, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateStandingPlayRate, CallFunc_FClamp_ReturnValue_2) == 0x00005C, "Member 'ABP_CH_MeshBase_C_CalculateStandingPlayRate::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateCrouchingPlayRate
// 0x0038 (0x0038 - 0x0000)
struct ABP_CH_MeshBase_C_CalculateCrouchingPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_CalculateCrouchingPlayRate");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate) == 0x000038, "Wrong size on ABP_CH_MeshBase_C_CalculateCrouchingPlayRate");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, PlayRate) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, CallFunc_GetOwningComponent_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, CallFunc_BreakVector_X) == 0x00001C, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, CallFunc_BreakVector_Y) == 0x000020, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, CallFunc_BreakVector_Z) == 0x000024, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000030, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateCrouchingPlayRate, CallFunc_FClamp_ReturnValue) == 0x000034, "Member 'ABP_CH_MeshBase_C_CalculateCrouchingPlayRate::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateMovementDirection
// 0x0030 (0x0030 - 0x0000)
struct ABP_CH_MeshBase_C_CalculateMovementDirection final
{
public:
	EMovementDirection                            ReturnValues;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovementDirection                            CallFunc_CalculateQuadrant_ReturnValue;            // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateMovementDirection) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CalculateMovementDirection");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateMovementDirection) == 0x000030, "Wrong size on ABP_CH_MeshBase_C_CalculateMovementDirection");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateMovementDirection, ReturnValues) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateMovementDirection::ReturnValues' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateMovementDirection, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_CalculateMovementDirection::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateMovementDirection, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'ABP_CH_MeshBase_C_CalculateMovementDirection::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateMovementDirection, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_CalculateMovementDirection::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateMovementDirection, CallFunc_BreakRotator_Roll) == 0x000020, "Member 'ABP_CH_MeshBase_C_CalculateMovementDirection::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateMovementDirection, CallFunc_BreakRotator_Pitch) == 0x000024, "Member 'ABP_CH_MeshBase_C_CalculateMovementDirection::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateMovementDirection, CallFunc_BreakRotator_Yaw) == 0x000028, "Member 'ABP_CH_MeshBase_C_CalculateMovementDirection::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateMovementDirection, K2Node_SwitchEnum_CmpSuccess_1) == 0x00002C, "Member 'ABP_CH_MeshBase_C_CalculateMovementDirection::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateMovementDirection, CallFunc_CalculateQuadrant_ReturnValue) == 0x00002D, "Member 'ABP_CH_MeshBase_C_CalculateMovementDirection::CallFunc_CalculateQuadrant_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetFootOffsets
// 0x01C8 (0x01C8 - 0x0000)
struct ABP_CH_MeshBase_C_SetFootOffsets final
{
public:
	struct FVector                                CurrentLocationL_Target;                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocationR_Target;                           // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocationOffset;                             // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRotationOffset;                             // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	bool                                          EnableFootIK_R;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableFootIK_L;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableIK;                                          // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AdditionalPelvisVec;                               // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotationOffset;                              // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ImpactNormal;                                      // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactPoint;                                       // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IKFootFloorLocation;                               // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue_1;                      // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue_2;            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_3;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_4;            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue_1;                  // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Get_Foot_Offsets_OutActorSinking;         // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Foot_Offsets_OutFootL_Distance;       // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Foot_Offsets_OutFootR_Distance;       // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Get_Foot_Offsets_OutFootL_Rotation;       // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Get_Foot_Offsets_OutFootR_Rotation;       // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_2;                  // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_3;                  // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_4;                  // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_5;                  // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetFootOffsets) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_SetFootOffsets");
static_assert(sizeof(ABP_CH_MeshBase_C_SetFootOffsets) == 0x0001C8, "Wrong size on ABP_CH_MeshBase_C_SetFootOffsets");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CurrentLocationL_Target) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CurrentLocationL_Target' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CurrentLocationR_Target) == 0x00000C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CurrentLocationR_Target' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CurrentLocationOffset) == 0x000018, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CurrentLocationOffset' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CurrentRotationOffset) == 0x000024, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CurrentRotationOffset' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, EnableFootIK_R) == 0x000030, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::EnableFootIK_R' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, EnableFootIK_L) == 0x000031, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::EnableFootIK_L' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, EnableIK) == 0x000032, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::EnableIK' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, AdditionalPelvisVec) == 0x000034, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::AdditionalPelvisVec' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, TargetRotationOffset) == 0x000040, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::TargetRotationOffset' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, ImpactNormal) == 0x00004C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, ImpactPoint) == 0x000058, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, IKFootFloorLocation) == 0x000064, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::IKFootFloorLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_GetCurveValue_ReturnValue) == 0x000070, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MapRangeClamped_ReturnValue) == 0x000074, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_GetCurveValue_ReturnValue_1) == 0x000078, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_RLerp_ReturnValue) == 0x00007C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000088, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_RInterpTo_ReturnValue) == 0x00008C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_GetSocketLocation_ReturnValue) == 0x000098, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_GetSocketLocation_ReturnValue_1) == 0x0000A4, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_RLerp_ReturnValue_1) == 0x0000B0, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_RLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MapRangeClamped_ReturnValue_2) == 0x0000BC, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MapRangeClamped_ReturnValue_3) == 0x0000C0, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MapRangeClamped_ReturnValue_4) == 0x0000C4, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MapRangeClamped_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_X) == 0x0000C8, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Y) == 0x0000CC, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Z) == 0x0000D0, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000D4, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_FInterpTo_ReturnValue) == 0x0000D8, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MakeVector_ReturnValue) == 0x0000DC, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_X_1) == 0x0000E8, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Y_1) == 0x0000EC, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Z_1) == 0x0000F0, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000F4, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_FInterpTo_ReturnValue_1) == 0x0000F8, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MakeVector_ReturnValue_1) == 0x0000FC, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000108, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_GetCurveValue_ReturnValue_2) == 0x00010C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_GetCurveValue_ReturnValue_3) == 0x000110, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000114, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_RInterpTo_ReturnValue_1) == 0x000118, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_RInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Add_FloatFloat_ReturnValue) == 0x000124, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x000128, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00012C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x000130, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x000131, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Get_Foot_Offsets_OutActorSinking) == 0x000134, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Get_Foot_Offsets_OutActorSinking' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Get_Foot_Offsets_OutFootL_Distance) == 0x000138, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Get_Foot_Offsets_OutFootL_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Get_Foot_Offsets_OutFootR_Distance) == 0x00013C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Get_Foot_Offsets_OutFootR_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Get_Foot_Offsets_OutFootL_Rotation) == 0x000140, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Get_Foot_Offsets_OutFootL_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_Get_Foot_Offsets_OutFootR_Rotation) == 0x00014C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_Get_Foot_Offsets_OutFootR_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_X_2) == 0x000158, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Y_2) == 0x00015C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Z_2) == 0x000160, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_X_3) == 0x000164, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Y_3) == 0x000168, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Z_3) == 0x00016C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_FInterpTo_ReturnValue_2) == 0x000170, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_FInterpTo_ReturnValue_3) == 0x000174, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MakeVector_ReturnValue_2) == 0x000178, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MakeVector_ReturnValue_3) == 0x000184, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_X_4) == 0x000190, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Y_4) == 0x000194, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Z_4) == 0x000198, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_FInterpTo_ReturnValue_4) == 0x00019C, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_FInterpTo_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MakeVector_ReturnValue_4) == 0x0001A0, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_X_5) == 0x0001AC, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Y_5) == 0x0001B0, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_BreakVector_Z_5) == 0x0001B4, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_FInterpTo_ReturnValue_5) == 0x0001B8, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_FInterpTo_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootOffsets, CallFunc_MakeVector_ReturnValue_5) == 0x0001BC, "Member 'ABP_CH_MeshBase_C_SetFootOffsets::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetFootLocking
// 0x00B0 (0x00B0 - 0x0000)
struct ABP_CH_MeshBase_C_SetFootLocking final
{
public:
	class FName                                   Enable_FootIK_Curve;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FootLockCurve;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   IKFootBone;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentFootLockAlpha;                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentFootLockLocation;                           // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentFootLockRotation;                           // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	float                                         FootLockCurveValue;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetFootLocking) == 0x000010, "Wrong alignment on ABP_CH_MeshBase_C_SetFootLocking");
static_assert(sizeof(ABP_CH_MeshBase_C_SetFootLocking) == 0x0000B0, "Wrong size on ABP_CH_MeshBase_C_SetFootLocking");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, Enable_FootIK_Curve) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetFootLocking::Enable_FootIK_Curve' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, FootLockCurve) == 0x000008, "Member 'ABP_CH_MeshBase_C_SetFootLocking::FootLockCurve' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, IKFootBone) == 0x000010, "Member 'ABP_CH_MeshBase_C_SetFootLocking::IKFootBone' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CurrentFootLockAlpha) == 0x000018, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CurrentFootLockAlpha' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CurrentFootLockLocation) == 0x00001C, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CurrentFootLockLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CurrentFootLockRotation) == 0x000028, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CurrentFootLockRotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, FootLockCurveValue) == 0x000034, "Member 'ABP_CH_MeshBase_C_SetFootLocking::FootLockCurveValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_GetCurveValue_ReturnValue) == 0x000038, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00003C, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_GetOwningComponent_ReturnValue) == 0x000040, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000048, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_GetSocketTransform_ReturnValue) == 0x000050, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_BreakTransform_Location) == 0x000080, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_BreakTransform_Rotation) == 0x00008C, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_BreakTransform_Scale) == 0x000098, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000A4, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000A5, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_GetCurveValue_ReturnValue_1) == 0x0000A8, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0000AC, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLocking, CallFunc_BooleanOR_ReturnValue) == 0x0000AD, "Member 'ABP_CH_MeshBase_C_SetFootLocking::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetFootLockOffsets
// 0x00B8 (0x00B8 - 0x0000)
struct ABP_CH_MeshBase_C_SetFootLockOffsets final
{
public:
	struct FVector                                LocalLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LocalRotation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FVector                                LocationDifference;                                // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationDifference;                                // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetLastUpdateRotation_ReturnValue;        // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetFootLockOffsets) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_SetFootLockOffsets");
static_assert(sizeof(ABP_CH_MeshBase_C_SetFootLockOffsets) == 0x0000B8, "Wrong size on ABP_CH_MeshBase_C_SetFootLockOffsets");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, LocalLocation) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::LocalLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, LocalRotation) == 0x00000C, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::LocalRotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, LocationDifference) == 0x000018, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::LocationDifference' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, RotationDifference) == 0x000024, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::RotationDifference' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000030, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_BreakRotator_Roll) == 0x00003C, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_BreakRotator_Pitch) == 0x000040, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_BreakRotator_Yaw) == 0x000044, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_RotateAngleAxis_ReturnValue) == 0x000054, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_GetOwningComponent_ReturnValue) == 0x000060, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000068, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000074, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000078, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000084, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000090, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_GetLastUpdateRotation_ReturnValue) == 0x00009C, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_GetLastUpdateRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x0000A8, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetFootLockOffsets, CallFunc_IsMovingOnGround_ReturnValue) == 0x0000B4, "Member 'ABP_CH_MeshBase_C_SetFootLockOffsets::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.ShouldMoveCheck
// 0x0004 (0x0004 - 0x0000)
struct ABP_CH_MeshBase_C_ShouldMoveCheck final
{
public:
	bool                                          Return_Value;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_ShouldMoveCheck) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_ShouldMoveCheck");
static_assert(sizeof(ABP_CH_MeshBase_C_ShouldMoveCheck) == 0x000004, "Wrong size on ABP_CH_MeshBase_C_ShouldMoveCheck");
static_assert(offsetof(ABP_CH_MeshBase_C_ShouldMoveCheck, Return_Value) == 0x000000, "Member 'ABP_CH_MeshBase_C_ShouldMoveCheck::Return_Value' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ShouldMoveCheck, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000001, "Member 'ABP_CH_MeshBase_C_ShouldMoveCheck::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ShouldMoveCheck, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'ABP_CH_MeshBase_C_ShouldMoveCheck::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ShouldMoveCheck, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'ABP_CH_MeshBase_C_ShouldMoveCheck::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CanTurnInPlace
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_CanTurnInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_CanTurnInPlace) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CanTurnInPlace");
static_assert(sizeof(ABP_CH_MeshBase_C_CanTurnInPlace) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_CanTurnInPlace");
static_assert(offsetof(ABP_CH_MeshBase_C_CanTurnInPlace, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_CanTurnInPlace::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanTurnInPlace, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_CanTurnInPlace::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanTurnInPlace, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_CanTurnInPlace::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanTurnInPlace, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'ABP_CH_MeshBase_C_CanTurnInPlace::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanTurnInPlace, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00000A, "Member 'ABP_CH_MeshBase_C_CanTurnInPlace::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanTurnInPlace, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'ABP_CH_MeshBase_C_CanTurnInPlace::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanTurnInPlace, CallFunc_BooleanAND_ReturnValue_1) == 0x00000C, "Member 'ABP_CH_MeshBase_C_CanTurnInPlace::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CanRotateInPlace
// 0x0004 (0x0004 - 0x0000)
struct ABP_CH_MeshBase_C_CanRotateInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_CanRotateInPlace) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_CanRotateInPlace");
static_assert(sizeof(ABP_CH_MeshBase_C_CanRotateInPlace) == 0x000004, "Wrong size on ABP_CH_MeshBase_C_CanRotateInPlace");
static_assert(offsetof(ABP_CH_MeshBase_C_CanRotateInPlace, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_CanRotateInPlace::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanRotateInPlace, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ABP_CH_MeshBase_C_CanRotateInPlace::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanRotateInPlace, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'ABP_CH_MeshBase_C_CanRotateInPlace::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanRotateInPlace, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'ABP_CH_MeshBase_C_CanRotateInPlace::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CanDynamicTransition
// 0x000C (0x000C - 0x0000)
struct ABP_CH_MeshBase_C_CanDynamicTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_CanDynamicTransition) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CanDynamicTransition");
static_assert(sizeof(ABP_CH_MeshBase_C_CanDynamicTransition) == 0x00000C, "Wrong size on ABP_CH_MeshBase_C_CanDynamicTransition");
static_assert(offsetof(ABP_CH_MeshBase_C_CanDynamicTransition, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_CanDynamicTransition::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanDynamicTransition, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_CanDynamicTransition::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanDynamicTransition, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_CanDynamicTransition::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CanOverlayTransition
// 0x0004 (0x0004 - 0x0000)
struct ABP_CH_MeshBase_C_CanOverlayTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_CanOverlayTransition) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_CanOverlayTransition");
static_assert(sizeof(ABP_CH_MeshBase_C_CanOverlayTransition) == 0x000004, "Wrong size on ABP_CH_MeshBase_C_CanOverlayTransition");
static_assert(offsetof(ABP_CH_MeshBase_C_CanOverlayTransition, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_CanOverlayTransition::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanOverlayTransition, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ABP_CH_MeshBase_C_CanOverlayTransition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanOverlayTransition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'ABP_CH_MeshBase_C_CanOverlayTransition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CanOverlayTransition, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'ABP_CH_MeshBase_C_CanOverlayTransition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.TurnInPlace
// 0x0098 (0x0098 - 0x0000)
struct ABP_CH_MeshBase_C_TurnInPlace final
{
public:
	struct FRotator                               TargetRotation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         PlayRateScale;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideCurrent;                                   // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTurnInPlace_Asset                     TargetTurnAsset;                                   // 0x0018(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnAngle;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingSlotAnimation_ReturnValue;       // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_TurnInPlace) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_TurnInPlace");
static_assert(sizeof(ABP_CH_MeshBase_C_TurnInPlace) == 0x000098, "Wrong size on ABP_CH_MeshBase_C_TurnInPlace");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, TargetRotation) == 0x000000, "Member 'ABP_CH_MeshBase_C_TurnInPlace::TargetRotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, PlayRateScale) == 0x00000C, "Member 'ABP_CH_MeshBase_C_TurnInPlace::PlayRateScale' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, StartTime) == 0x000010, "Member 'ABP_CH_MeshBase_C_TurnInPlace::StartTime' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, OverrideCurrent) == 0x000014, "Member 'ABP_CH_MeshBase_C_TurnInPlace::OverrideCurrent' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, TargetTurnAsset) == 0x000018, "Member 'ABP_CH_MeshBase_C_TurnInPlace::TargetTurnAsset' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, TurnAngle) == 0x000038, "Member 'ABP_CH_MeshBase_C_TurnInPlace::TurnAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000044, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000048, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue) == 0x000050, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000058, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_IsPlayingSlotAnimation_ReturnValue) == 0x00005C, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_IsPlayingSlotAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Less_FloatFloat_ReturnValue) == 0x00005D, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Not_PreBool_ReturnValue) == 0x00005E, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_BooleanOR_ReturnValue) == 0x00005F, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000060, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, K2Node_SwitchEnum_CmpSuccess) == 0x000061, "Member 'ABP_CH_MeshBase_C_TurnInPlace::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, K2Node_SwitchEnum_CmpSuccess_1) == 0x000062, "Member 'ABP_CH_MeshBase_C_TurnInPlace::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, K2Node_SwitchEnum_CmpSuccess_2) == 0x000063, "Member 'ABP_CH_MeshBase_C_TurnInPlace::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, K2Node_SwitchEnum_CmpSuccess_3) == 0x000064, "Member 'ABP_CH_MeshBase_C_TurnInPlace::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000068, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Abs_ReturnValue) == 0x000074, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000078, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000084, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_BreakRotator_Roll) == 0x000088, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_BreakRotator_Pitch) == 0x00008C, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlace, CallFunc_BreakRotator_Yaw) == 0x000090, "Member 'ABP_CH_MeshBase_C_TurnInPlace::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.TurnInPlaceCheck
// 0x0068 (0x0068 - 0x0000)
struct ABP_CH_MeshBase_C_TurnInPlaceCheck final
{
public:
	float                                         AngleMulti;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTurnInPlace_Asset                     TargetTurnAsset;                                   // 0x0008(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_TurnInPlaceCheck) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_TurnInPlaceCheck");
static_assert(sizeof(ABP_CH_MeshBase_C_TurnInPlaceCheck) == 0x000068, "Wrong size on ABP_CH_MeshBase_C_TurnInPlaceCheck");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, AngleMulti) == 0x000000, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::AngleMulti' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, TargetTurnAsset) == 0x000008, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::TargetTurnAsset' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_BreakRotator_Roll) == 0x000028, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_BreakRotator_Pitch) == 0x00002C, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_BreakRotator_Yaw) == 0x000030, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_MakeRotator_ReturnValue) == 0x000034, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_BreakVector2D_X) == 0x000040, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_BreakVector2D_Y) == 0x000044, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_Abs_ReturnValue) == 0x000048, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_MapRangeClamped_ReturnValue) == 0x00004C, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000050, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_BreakVector2D_X_1) == 0x000054, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_BreakVector2D_Y_1) == 0x000058, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_Abs_ReturnValue_1) == 0x00005C, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_Add_FloatFloat_ReturnValue) == 0x000060, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000064, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_Less_FloatFloat_ReturnValue) == 0x000065, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_TurnInPlaceCheck, CallFunc_BooleanAND_ReturnValue) == 0x000066, "Member 'ABP_CH_MeshBase_C_TurnInPlaceCheck::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateLandPrediction
// 0x0188 (0x0188 - 0x0000)
struct ABP_CH_MeshBase_C_CalculateLandPrediction final
{
public:
	float                                         LandPrediction_0;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	EDrawDebugTrace                               CallFunc_GetDebugTraceType_DebugType;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_NormalUnsafe_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleByProfile_OutHit;       // 0x0070(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleByProfile_ReturnValue;  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWalkable_ReturnValue;                   // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateLandPrediction) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_CalculateLandPrediction");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateLandPrediction) == 0x000188, "Wrong size on ABP_CH_MeshBase_C_CalculateLandPrediction");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, LandPrediction_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::LandPrediction_0' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, Temp_object_Variable) == 0x000008, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_GetDebugTraceType_DebugType) == 0x000018, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_GetDebugTraceType_DebugType' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_Less_FloatFloat_ReturnValue) == 0x000019, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_GetCurveValue_ReturnValue) == 0x00001C, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakVector_X) == 0x00002C, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakVector_Y) == 0x000030, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakVector_Z) == 0x000034, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_FClamp_ReturnValue) == 0x000038, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_MapRangeClamped_ReturnValue) == 0x00003C, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_Vector_NormalUnsafe_ReturnValue) == 0x00004C, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_Vector_NormalUnsafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000058, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_Add_VectorVector_ReturnValue) == 0x000064, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_CapsuleTraceSingleByProfile_OutHit) == 0x000070, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_CapsuleTraceSingleByProfile_OutHit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_CapsuleTraceSingleByProfile_ReturnValue) == 0x0000F8, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_CapsuleTraceSingleByProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_IsWalkable_ReturnValue) == 0x0000F9, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_IsWalkable_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_bBlockingHit) == 0x0000FA, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000FB, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_Time) == 0x0000FC, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_Distance) == 0x000100, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_Location) == 0x000104, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_ImpactPoint) == 0x000110, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_Normal) == 0x00011C, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_ImpactNormal) == 0x000128, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_PhysMat) == 0x000138, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_HitActor) == 0x000140, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_HitComponent) == 0x000148, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_HitBoneName) == 0x000150, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_HitItem) == 0x000158, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_ElementIndex) == 0x00015C, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_FaceIndex) == 0x000160, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_TraceStart) == 0x000164, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BreakHitResult_TraceEnd) == 0x000170, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_BooleanAND_ReturnValue) == 0x00017C, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_GetFloatValue_ReturnValue) == 0x000180, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateLandPrediction, CallFunc_Lerp_ReturnValue) == 0x000184, "Member 'ABP_CH_MeshBase_C_CalculateLandPrediction::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateInAirLeanAmount
// 0x005C (0x005C - 0x0000)
struct ABP_CH_MeshBase_C_CalculateInAirLeanAmount final
{
public:
	struct FLeanAmount                            LeanAmount_0;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLeanAmount                            K2Node_MakeStruct_LeanAmount;                      // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CalculateInAirLeanAmount");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount) == 0x00005C, "Wrong size on ABP_CH_MeshBase_C_CalculateInAirLeanAmount");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, LeanAmount_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::LeanAmount_0' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_GetFloatValue_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000024, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_BreakVector_X) == 0x000030, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_BreakVector_Y) == 0x000034, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_BreakVector_Z) == 0x000038, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_MakeVector2D_ReturnValue) == 0x00003C, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000044, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_BreakVector2D_X) == 0x00004C, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateInAirLeanAmount, K2Node_MakeStruct_LeanAmount) == 0x000054, "Member 'ABP_CH_MeshBase_C_CalculateInAirLeanAmount::K2Node_MakeStruct_LeanAmount' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.RotateInPlaceCheck
// 0x0040 (0x0040 - 0x0000)
struct ABP_CH_MeshBase_C_RotateInPlaceCheck final
{
public:
	struct FRotateInPlace_Asset                   TargetRotateAsset;                                 // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_RotateInPlaceCheck) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_RotateInPlaceCheck");
static_assert(sizeof(ABP_CH_MeshBase_C_RotateInPlaceCheck) == 0x000040, "Wrong size on ABP_CH_MeshBase_C_RotateInPlaceCheck");
static_assert(offsetof(ABP_CH_MeshBase_C_RotateInPlaceCheck, TargetRotateAsset) == 0x000000, "Member 'ABP_CH_MeshBase_C_RotateInPlaceCheck::TargetRotateAsset' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_RotateInPlaceCheck, CallFunc_BooleanOR_ReturnValue) == 0x000020, "Member 'ABP_CH_MeshBase_C_RotateInPlaceCheck::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_RotateInPlaceCheck, CallFunc_BreakVector2D_X) == 0x000024, "Member 'ABP_CH_MeshBase_C_RotateInPlaceCheck::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_RotateInPlaceCheck, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'ABP_CH_MeshBase_C_RotateInPlaceCheck::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_RotateInPlaceCheck, CallFunc_BreakVector2D_X_1) == 0x00002C, "Member 'ABP_CH_MeshBase_C_RotateInPlaceCheck::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_RotateInPlaceCheck, CallFunc_BreakVector2D_Y_1) == 0x000030, "Member 'ABP_CH_MeshBase_C_RotateInPlaceCheck::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_RotateInPlaceCheck, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000034, "Member 'ABP_CH_MeshBase_C_RotateInPlaceCheck::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_RotateInPlaceCheck, CallFunc_Less_FloatFloat_ReturnValue) == 0x000035, "Member 'ABP_CH_MeshBase_C_RotateInPlaceCheck::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_RotateInPlaceCheck, CallFunc_MapRangeClamped_ReturnValue) == 0x000038, "Member 'ABP_CH_MeshBase_C_RotateInPlaceCheck::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.DynamicTransitionCheck
// 0x0058 (0x0058 - 0x0000)
struct ABP_CH_MeshBase_C_DynamicTransitionCheck final
{
public:
	struct FDynamicMontageParams                  K2Node_MakeStruct_DynamicMontageParams;            // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDynamicMontageParams                  K2Node_MakeStruct_DynamicMontageParams_1;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue_1;         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue_1; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_DynamicTransitionCheck) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_DynamicTransitionCheck");
static_assert(sizeof(ABP_CH_MeshBase_C_DynamicTransitionCheck) == 0x000058, "Wrong size on ABP_CH_MeshBase_C_DynamicTransitionCheck");
static_assert(offsetof(ABP_CH_MeshBase_C_DynamicTransitionCheck, K2Node_MakeStruct_DynamicMontageParams) == 0x000000, "Member 'ABP_CH_MeshBase_C_DynamicTransitionCheck::K2Node_MakeStruct_DynamicMontageParams' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_DynamicTransitionCheck, CallFunc_GetOwningComponent_ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_DynamicTransitionCheck::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_DynamicTransitionCheck, CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue) == 0x000020, "Member 'ABP_CH_MeshBase_C_DynamicTransitionCheck::CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_DynamicTransitionCheck, K2Node_MakeStruct_DynamicMontageParams_1) == 0x000028, "Member 'ABP_CH_MeshBase_C_DynamicTransitionCheck::K2Node_MakeStruct_DynamicMontageParams_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_DynamicTransitionCheck, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'ABP_CH_MeshBase_C_DynamicTransitionCheck::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_DynamicTransitionCheck, CallFunc_GetOwningComponent_ReturnValue_1) == 0x000048, "Member 'ABP_CH_MeshBase_C_DynamicTransitionCheck::CallFunc_GetOwningComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_DynamicTransitionCheck, CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue_1) == 0x000050, "Member 'ABP_CH_MeshBase_C_DynamicTransitionCheck::CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_DynamicTransitionCheck, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000054, "Member 'ABP_CH_MeshBase_C_DynamicTransitionCheck::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.GetDebugTraceType
// 0x0038 (0x0038 - 0x0000)
struct ABP_CH_MeshBase_C_GetDebugTraceType final
{
public:
	EDrawDebugTrace                               ShowTraceType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugType;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IALS_Controller_BPI_C> K2Node_DynamicCast_AsALS_Controller_BPI;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_BPI_Get_DebugInfo_DebugFocusCharacter;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_Get_DebugInfo_DebugView;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowHUD;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowTraces;             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowDebugShapes;        // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowLayerColors;        // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_Slomo;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowCharacterInfo;      // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_GetDebugTraceType) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_GetDebugTraceType");
static_assert(sizeof(ABP_CH_MeshBase_C_GetDebugTraceType) == 0x000038, "Wrong size on ABP_CH_MeshBase_C_GetDebugTraceType");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, ShowTraceType) == 0x000000, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::ShowTraceType' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, DebugType) == 0x000001, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::DebugType' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, K2Node_DynamicCast_AsALS_Controller_BPI) == 0x000010, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::K2Node_DynamicCast_AsALS_Controller_BPI' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, CallFunc_BPI_Get_DebugInfo_DebugFocusCharacter) == 0x000028, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::CallFunc_BPI_Get_DebugInfo_DebugFocusCharacter' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, CallFunc_BPI_Get_DebugInfo_DebugView) == 0x000030, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::CallFunc_BPI_Get_DebugInfo_DebugView' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, CallFunc_BPI_Get_DebugInfo_ShowHUD) == 0x000031, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::CallFunc_BPI_Get_DebugInfo_ShowHUD' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, CallFunc_BPI_Get_DebugInfo_ShowTraces) == 0x000032, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::CallFunc_BPI_Get_DebugInfo_ShowTraces' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, CallFunc_BPI_Get_DebugInfo_ShowDebugShapes) == 0x000033, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::CallFunc_BPI_Get_DebugInfo_ShowDebugShapes' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, CallFunc_BPI_Get_DebugInfo_ShowLayerColors) == 0x000034, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::CallFunc_BPI_Get_DebugInfo_ShowLayerColors' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, CallFunc_BPI_Get_DebugInfo_Slomo) == 0x000035, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::CallFunc_BPI_Get_DebugInfo_Slomo' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetDebugTraceType, CallFunc_BPI_Get_DebugInfo_ShowCharacterInfo) == 0x000036, "Member 'ABP_CH_MeshBase_C_GetDebugTraceType::CallFunc_BPI_Get_DebugInfo_ShowCharacterInfo' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.InterpVelocityBlend
// 0x0058 (0x0058 - 0x0000)
struct ABP_CH_MeshBase_C_InterpVelocityBlend final
{
public:
	struct FVelocityBlend                         Current;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVelocityBlend                         Target;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVelocityBlend                         ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_2;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_3;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVelocityBlend                         K2Node_MakeStruct_VelocityBlend;                   // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_InterpVelocityBlend) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_InterpVelocityBlend");
static_assert(sizeof(ABP_CH_MeshBase_C_InterpVelocityBlend) == 0x000058, "Wrong size on ABP_CH_MeshBase_C_InterpVelocityBlend");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, Current) == 0x000000, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::Current' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, Target) == 0x000010, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::Target' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, InterpSpeed) == 0x000020, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::InterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, DeltaTime) == 0x000024, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, ReturnValue) == 0x000028, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, CallFunc_FInterpTo_ReturnValue) == 0x000038, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, CallFunc_FInterpTo_ReturnValue_1) == 0x00003C, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, CallFunc_FInterpTo_ReturnValue_2) == 0x000040, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, CallFunc_FInterpTo_ReturnValue_3) == 0x000044, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpVelocityBlend, K2Node_MakeStruct_VelocityBlend) == 0x000048, "Member 'ABP_CH_MeshBase_C_InterpVelocityBlend::K2Node_MakeStruct_VelocityBlend' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.InterpLeanAmount
// 0x0030 (0x0030 - 0x0000)
struct ABP_CH_MeshBase_C_InterpLeanAmount final
{
public:
	struct FLeanAmount                            Current;                                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLeanAmount                            Target;                                            // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLeanAmount                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLeanAmount                            K2Node_MakeStruct_LeanAmount;                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_InterpLeanAmount) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_InterpLeanAmount");
static_assert(sizeof(ABP_CH_MeshBase_C_InterpLeanAmount) == 0x000030, "Wrong size on ABP_CH_MeshBase_C_InterpLeanAmount");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLeanAmount, Current) == 0x000000, "Member 'ABP_CH_MeshBase_C_InterpLeanAmount::Current' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLeanAmount, Target) == 0x000008, "Member 'ABP_CH_MeshBase_C_InterpLeanAmount::Target' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLeanAmount, InterpSpeed) == 0x000010, "Member 'ABP_CH_MeshBase_C_InterpLeanAmount::InterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLeanAmount, DeltaTime) == 0x000014, "Member 'ABP_CH_MeshBase_C_InterpLeanAmount::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLeanAmount, ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_InterpLeanAmount::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLeanAmount, CallFunc_FInterpTo_ReturnValue) == 0x000020, "Member 'ABP_CH_MeshBase_C_InterpLeanAmount::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLeanAmount, CallFunc_FInterpTo_ReturnValue_1) == 0x000024, "Member 'ABP_CH_MeshBase_C_InterpLeanAmount::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLeanAmount, K2Node_MakeStruct_LeanAmount) == 0x000028, "Member 'ABP_CH_MeshBase_C_InterpLeanAmount::K2Node_MakeStruct_LeanAmount' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CalculateQuadrant
// 0x002C (0x002C - 0x0000)
struct ABP_CH_MeshBase_C_CalculateQuadrant final
{
public:
	EMovementDirection                            Current;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FRMinusThreshold;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FLMinusThreshold;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BRMinusThreshold;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BLMinusThreshold;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Buffer;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementDirection                            ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AngleInRange_ReturnValue;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AngleInRange_ReturnValue_1;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_5;          // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AngleInRange_ReturnValue_2;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_CalculateQuadrant) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CalculateQuadrant");
static_assert(sizeof(ABP_CH_MeshBase_C_CalculateQuadrant) == 0x00002C, "Wrong size on ABP_CH_MeshBase_C_CalculateQuadrant");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, Current) == 0x000000, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::Current' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, FRMinusThreshold) == 0x000004, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::FRMinusThreshold' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, FLMinusThreshold) == 0x000008, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::FLMinusThreshold' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, BRMinusThreshold) == 0x00000C, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::BRMinusThreshold' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, BLMinusThreshold) == 0x000010, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::BLMinusThreshold' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, Buffer) == 0x000014, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::Buffer' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, Angle) == 0x000018, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::Angle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, ReturnValue) == 0x00001C, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001D, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00001E, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00001F, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_BooleanOR_ReturnValue) == 0x000020, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x000021, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_AngleInRange_ReturnValue) == 0x000022, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_AngleInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_BooleanOR_ReturnValue_1) == 0x000023, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_AngleInRange_ReturnValue_1) == 0x000024, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_AngleInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x000025, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_NotEqual_ByteByte_ReturnValue_5) == 0x000026, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_NotEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_BooleanOR_ReturnValue_2) == 0x000027, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CalculateQuadrant, CallFunc_AngleInRange_ReturnValue_2) == 0x000028, "Member 'ABP_CH_MeshBase_C_CalculateQuadrant::CallFunc_AngleInRange_ReturnValue_2' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.AngleInRange
// 0x0028 (0x0028 - 0x0000)
struct ABP_CH_MeshBase_C_AngleInRange final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinAngle;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAngle;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Buffer;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IncreaseBuffer;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_AngleInRange) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_AngleInRange");
static_assert(sizeof(ABP_CH_MeshBase_C_AngleInRange) == 0x000028, "Wrong size on ABP_CH_MeshBase_C_AngleInRange");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, Angle) == 0x000000, "Member 'ABP_CH_MeshBase_C_AngleInRange::Angle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, MinAngle) == 0x000004, "Member 'ABP_CH_MeshBase_C_AngleInRange::MinAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, MaxAngle) == 0x000008, "Member 'ABP_CH_MeshBase_C_AngleInRange::MaxAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, Buffer) == 0x00000C, "Member 'ABP_CH_MeshBase_C_AngleInRange::Buffer' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, IncreaseBuffer) == 0x000010, "Member 'ABP_CH_MeshBase_C_AngleInRange::IncreaseBuffer' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, ReturnValue) == 0x000011, "Member 'ABP_CH_MeshBase_C_AngleInRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, Temp_bool_Variable) == 0x000012, "Member 'ABP_CH_MeshBase_C_AngleInRange::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_AngleInRange::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000018, "Member 'ABP_CH_MeshBase_C_AngleInRange::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'ABP_CH_MeshBase_C_AngleInRange::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000020, "Member 'ABP_CH_MeshBase_C_AngleInRange::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000024, "Member 'ABP_CH_MeshBase_C_AngleInRange::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x000025, "Member 'ABP_CH_MeshBase_C_AngleInRange::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AngleInRange, K2Node_Select_Default) == 0x000026, "Member 'ABP_CH_MeshBase_C_AngleInRange::K2Node_Select_Default' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.ResetIKOffsets
// 0x0030 (0x0030 - 0x0000)
struct ABP_CH_MeshBase_C_ResetIKOffsets final
{
public:
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue_1;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue_1;                  // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_ResetIKOffsets) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_ResetIKOffsets");
static_assert(sizeof(ABP_CH_MeshBase_C_ResetIKOffsets) == 0x000030, "Wrong size on ABP_CH_MeshBase_C_ResetIKOffsets");
static_assert(offsetof(ABP_CH_MeshBase_C_ResetIKOffsets, CallFunc_RInterpTo_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_ResetIKOffsets::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ResetIKOffsets, CallFunc_VInterpTo_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_ResetIKOffsets::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ResetIKOffsets, CallFunc_VInterpTo_ReturnValue_1) == 0x000018, "Member 'ABP_CH_MeshBase_C_ResetIKOffsets::CallFunc_VInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ResetIKOffsets, CallFunc_RInterpTo_ReturnValue_1) == 0x000024, "Member 'ABP_CH_MeshBase_C_ResetIKOffsets::CallFunc_RInterpTo_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.EyeBlink
// 0x0018 (0x0018 - 0x0000)
struct ABP_CH_MeshBase_C_EyeBlink final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_EyeBlink) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_EyeBlink");
static_assert(sizeof(ABP_CH_MeshBase_C_EyeBlink) == 0x000018, "Wrong size on ABP_CH_MeshBase_C_EyeBlink");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, DeltaTime) == 0x000000, "Member 'ABP_CH_MeshBase_C_EyeBlink::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_Add_ByteByte_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_Less_ByteByte_ReturnValue) == 0x000005, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_Less_FloatFloat_ReturnValue) == 0x000006, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000007, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000008, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000009, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000010, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000011, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeBlink, CallFunc_RandomFloatInRange_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_EyeBlink::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.EyeSaccade
// 0x0030 (0x0030 - 0x0000)
struct ABP_CH_MeshBase_C_EyeSaccade final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_EyeSaccade) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_EyeSaccade");
static_assert(sizeof(ABP_CH_MeshBase_C_EyeSaccade) == 0x000030, "Wrong size on ABP_CH_MeshBase_C_EyeSaccade");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, DeltaTime) == 0x000000, "Member 'ABP_CH_MeshBase_C_EyeSaccade::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_EyeSaccade::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_EyeSaccade::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, CallFunc_Less_FloatFloat_ReturnValue) == 0x000009, "Member 'ABP_CH_MeshBase_C_EyeSaccade::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000A, "Member 'ABP_CH_MeshBase_C_EyeSaccade::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, CallFunc_RandomFloatInRange_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_EyeSaccade::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, CallFunc_VInterpTo_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_EyeSaccade::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x00001C, "Member 'ABP_CH_MeshBase_C_EyeSaccade::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000020, "Member 'ABP_CH_MeshBase_C_EyeSaccade::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_EyeSaccade, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'ABP_CH_MeshBase_C_EyeSaccade::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Lookat
// 0x0148 (0x0148 - 0x0000)
struct ABP_CH_MeshBase_C_Lookat final
{
public:
	class ABP_CharacterBase_C*                    CharaBP;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEvtCharaAnimationSlotType                    NewLocalVar_0;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BodyLookatTargetHorizontal;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyLookatTargetVertical;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAt_TargetHorizontal;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAt_TargetVertical;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalEyeInterpSpeed;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalInterpSpeed;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalDeltaTime;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentVertical;    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal;  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentVertical_1;  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_1; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue;            // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_CulcLookatDirection_Vector_OutHorizontalAngle; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CulcLookatDirection_Vector_OutVerticalAngle; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_2;          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentVertical_2;  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_2; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentVertical_3;  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_3; // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A7[0x1];                                       // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ClampAngleToLookat_ReturnValue;           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAngleToLookat_ReturnValue_1;         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentVertical_4;  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_4; // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_2;     // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentVertical_5;  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_5; // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentVertical_6;  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_6; // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_3;     // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_4;     // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0107(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CulcLookatDirection_Euler_OutHorizontalAngle; // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CulcLookatDirection_Euler_OutVerticalAngle; // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_3;          // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Lookat) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_Lookat");
static_assert(sizeof(ABP_CH_MeshBase_C_Lookat) == 0x000148, "Wrong size on ABP_CH_MeshBase_C_Lookat");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CharaBP) == 0x000000, "Member 'ABP_CH_MeshBase_C_Lookat::CharaBP' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, DeltaTime) == 0x000008, "Member 'ABP_CH_MeshBase_C_Lookat::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, InterpSpeed) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Lookat::InterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, NewLocalVar_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_Lookat::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, BodyLookatTargetHorizontal) == 0x000014, "Member 'ABP_CH_MeshBase_C_Lookat::BodyLookatTargetHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, BodyLookatTargetVertical) == 0x000018, "Member 'ABP_CH_MeshBase_C_Lookat::BodyLookatTargetVertical' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, LookAt_TargetHorizontal) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Lookat::LookAt_TargetHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, LookAt_TargetVertical) == 0x000020, "Member 'ABP_CH_MeshBase_C_Lookat::LookAt_TargetVertical' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, TargetLocation) == 0x000024, "Member 'ABP_CH_MeshBase_C_Lookat::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, LocalEyeInterpSpeed) == 0x000030, "Member 'ABP_CH_MeshBase_C_Lookat::LocalEyeInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, LocalInterpSpeed) == 0x000034, "Member 'ABP_CH_MeshBase_C_Lookat::LocalInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, LocalDeltaTime) == 0x000038, "Member 'ABP_CH_MeshBase_C_Lookat::LocalDeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentVertical) == 0x000040, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentVertical' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal) == 0x000044, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentVertical_1) == 0x000048, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentVertical_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_1) == 0x00004C, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_GetSocketLocation_ReturnValue) == 0x000050, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_GetSocketLocation_ReturnValue_1) == 0x00005C, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_GetSocketRotation_ReturnValue) == 0x000068, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_GetSocketRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_CulcLookatDirection_Vector_OutHorizontalAngle) == 0x000074, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_CulcLookatDirection_Vector_OutHorizontalAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_CulcLookatDirection_Vector_OutVerticalAngle) == 0x000078, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_CulcLookatDirection_Vector_OutVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_GetSocketLocation_ReturnValue_2) == 0x00007C, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_GetSocketLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000088, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00008C, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00008D, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentVertical_2) == 0x000090, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentVertical_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_2) == 0x000094, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000098, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentVertical_3) == 0x00009C, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentVertical_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_3) == 0x0000A0, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000A4, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000A5, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_IsValid_ReturnValue) == 0x0000A6, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_ClampAngleToLookat_ReturnValue) == 0x0000A8, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_ClampAngleToLookat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_ClampAngleToLookat_ReturnValue_1) == 0x0000AC, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_ClampAngleToLookat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_MakeRotator_ReturnValue) == 0x0000B0, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_MakeRotator_ReturnValue_1) == 0x0000BC, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_RInterpTo_ReturnValue) == 0x0000C8, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_BreakRotator_Roll) == 0x0000D4, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_BreakRotator_Pitch) == 0x0000D8, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_BreakRotator_Yaw) == 0x0000DC, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000E0, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x0000E4, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentVertical_4) == 0x0000E8, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentVertical_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_4) == 0x0000EC, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x0000F0, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_NearlyEqual_FloatFloat_ReturnValue_2) == 0x0000F1, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_NearlyEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_BooleanAND_ReturnValue) == 0x0000F2, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentVertical_5) == 0x0000F4, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentVertical_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_5) == 0x0000F8, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentVertical_6) == 0x0000FC, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentVertical_6' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_6) == 0x000100, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_InterpLookAtTo_Lookat_CurrentHorizontal_6' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_NearlyEqual_FloatFloat_ReturnValue_3) == 0x000104, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_NearlyEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_NearlyEqual_FloatFloat_ReturnValue_4) == 0x000105, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_NearlyEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_BooleanAND_ReturnValue_1) == 0x000106, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_BooleanAND_ReturnValue_2) == 0x000107, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, K2Node_SwitchEnum_CmpSuccess) == 0x000108, "Member 'ABP_CH_MeshBase_C_Lookat::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_CulcLookatDirection_Euler_OutHorizontalAngle) == 0x00010C, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_CulcLookatDirection_Euler_OutHorizontalAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_CulcLookatDirection_Euler_OutVerticalAngle) == 0x000110, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_CulcLookatDirection_Euler_OutVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_Conv_StringToName_ReturnValue) == 0x000114, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00011C, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_IsValid_ReturnValue_1) == 0x000128, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_GetComponentByClass_ReturnValue) == 0x000130, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_GetSocketLocation_ReturnValue_3) == 0x000138, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_GetSocketLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Lookat, CallFunc_IsValid_ReturnValue_2) == 0x000144, "Member 'ABP_CH_MeshBase_C_Lookat::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.ClampLookAtAngle
// 0x0030 (0x0030 - 0x0000)
struct ABP_CH_MeshBase_C_ClampLookAtAngle final
{
public:
	float                                         CurrentAngle;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AngleOverLimitter;                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngleLimit;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampAngle;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_ClampLookAtAngle) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_ClampLookAtAngle");
static_assert(sizeof(ABP_CH_MeshBase_C_ClampLookAtAngle) == 0x000030, "Wrong size on ABP_CH_MeshBase_C_ClampLookAtAngle");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CurrentAngle) == 0x000000, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CurrentAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, AngleOverLimitter) == 0x000004, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::AngleOverLimitter' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, AngleLimit) == 0x000008, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::AngleLimit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, ClampAngle) == 0x00000C, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::ClampAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000018, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CallFunc_Less_FloatFloat_ReturnValue) == 0x000019, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000020, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000024, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampLookAtAngle, CallFunc_Abs_ReturnValue) == 0x00002C, "Member 'ABP_CH_MeshBase_C_ClampLookAtAngle::CallFunc_Abs_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.InterpLookAtTo
// 0x0058 (0x0058 - 0x0000)
struct ABP_CH_MeshBase_C_InterpLookAtTo final
{
public:
	float                                         Lookat_Vertical_;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lookat_Horizontal_;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetLookat_Vertical_;                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetLookat_Horizontal_;                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime_;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed_;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lookat_CurrentVertical;                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lookat_CurrentHorizontal;                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalLookAtHorizontal;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalTargetLookatVertical;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_InterpLookAtTo) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_InterpLookAtTo");
static_assert(sizeof(ABP_CH_MeshBase_C_InterpLookAtTo) == 0x000058, "Wrong size on ABP_CH_MeshBase_C_InterpLookAtTo");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, Lookat_Vertical_) == 0x000000, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::Lookat_Vertical_' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, Lookat_Horizontal_) == 0x000004, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::Lookat_Horizontal_' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, TargetLookat_Vertical_) == 0x000008, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::TargetLookat_Vertical_' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, TargetLookat_Horizontal_) == 0x00000C, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::TargetLookat_Horizontal_' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, DeltaTime_) == 0x000010, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::DeltaTime_' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, InterpSpeed_) == 0x000014, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::InterpSpeed_' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, Lookat_CurrentVertical) == 0x000018, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::Lookat_CurrentVertical' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, Lookat_CurrentHorizontal) == 0x00001C, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::Lookat_CurrentHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, FinalLookAtHorizontal) == 0x000020, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::FinalLookAtHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, FinalTargetLookatVertical) == 0x000024, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::FinalTargetLookatVertical' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, CallFunc_MakeRotator_ReturnValue) == 0x000028, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, CallFunc_MakeRotator_ReturnValue_1) == 0x000034, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, CallFunc_RInterpTo_ReturnValue) == 0x000040, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, CallFunc_BreakRotator_Roll) == 0x00004C, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, CallFunc_BreakRotator_Pitch) == 0x000050, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_InterpLookAtTo, CallFunc_BreakRotator_Yaw) == 0x000054, "Member 'ABP_CH_MeshBase_C_InterpLookAtTo::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.ClampAllLookatAngle
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_ClampAllLookatAngle final
{
public:
	float                                         CallFunc_ClampLookAtAngle_ClampAngle;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampLookAtAngle_ClampAngle_1;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampLookAtAngle_ClampAngle_2;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampLookAtAngle_ClampAngle_3;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_ClampAllLookatAngle) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_ClampAllLookatAngle");
static_assert(sizeof(ABP_CH_MeshBase_C_ClampAllLookatAngle) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_ClampAllLookatAngle");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAllLookatAngle, CallFunc_ClampLookAtAngle_ClampAngle) == 0x000000, "Member 'ABP_CH_MeshBase_C_ClampAllLookatAngle::CallFunc_ClampLookAtAngle_ClampAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAllLookatAngle, CallFunc_ClampLookAtAngle_ClampAngle_1) == 0x000004, "Member 'ABP_CH_MeshBase_C_ClampAllLookatAngle::CallFunc_ClampLookAtAngle_ClampAngle_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAllLookatAngle, CallFunc_ClampLookAtAngle_ClampAngle_2) == 0x000008, "Member 'ABP_CH_MeshBase_C_ClampAllLookatAngle::CallFunc_ClampLookAtAngle_ClampAngle_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAllLookatAngle, CallFunc_ClampLookAtAngle_ClampAngle_3) == 0x00000C, "Member 'ABP_CH_MeshBase_C_ClampAllLookatAngle::CallFunc_ClampLookAtAngle_ClampAngle_3' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Get Ex Upleg TransX
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX final
{
public:
	class FName                                   DriveBone;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TransformX;                                        // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FromRotZ;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FromRotY;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_2;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX) == 0x000010, "Wrong alignment on ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX");
static_assert(sizeof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX) == 0x0000C0, "Wrong size on ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, DriveBone) == 0x000000, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::DriveBone' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, Target) == 0x000008, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::Target' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, TransformX) == 0x000010, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::TransformX' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, FromRotZ) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::FromRotZ' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, FromRotY) == 0x000020, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::FromRotY' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000060, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_BreakTransform_Location) == 0x000064, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_BreakTransform_Rotation) == 0x000070, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_BreakTransform_Scale) == 0x00007C, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_BreakRotator_Roll) == 0x000088, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_BreakRotator_Pitch) == 0x00008C, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_BreakRotator_Yaw) == 0x000090, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000094, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_Add_FloatFloat_ReturnValue) == 0x000098, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_MapRangeClamped_ReturnValue) == 0x00009C, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_MakeVector_ReturnValue) == 0x0000A0, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000AC, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000B0, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000B4, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX, CallFunc_MapRangeClamped_ReturnValue_2) == 0x0000B8, "Member 'ABP_CH_MeshBase_C_Get_Ex_Upleg_TransX::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.GetKneeCapTransXY
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_CH_MeshBase_C_GetKneeCapTransXY final
{
public:
	class FName                                   DriveBone;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TransformX;                                        // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransY;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransX;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_2;            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_3;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_GetKneeCapTransXY) == 0x000010, "Wrong alignment on ABP_CH_MeshBase_C_GetKneeCapTransXY");
static_assert(sizeof(ABP_CH_MeshBase_C_GetKneeCapTransXY) == 0x0000C0, "Wrong size on ABP_CH_MeshBase_C_GetKneeCapTransXY");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, DriveBone) == 0x000000, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::DriveBone' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, Target) == 0x000008, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::Target' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, TransformX) == 0x000010, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::TransformX' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, TransY) == 0x00001C, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::TransY' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, TransX) == 0x000020, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::TransX' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000060, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_BreakTransform_Location) == 0x000064, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_BreakTransform_Rotation) == 0x000070, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_BreakTransform_Scale) == 0x00007C, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_BreakRotator_Roll) == 0x000088, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_BreakRotator_Pitch) == 0x00008C, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_BreakRotator_Yaw) == 0x000090, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_MakeVector_ReturnValue) == 0x000094, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000A0, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_MapRangeClamped_ReturnValue) == 0x0000A4, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000A8, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_MapRangeClamped_ReturnValue_2) == 0x0000AC, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetKneeCapTransXY, CallFunc_MapRangeClamped_ReturnValue_3) == 0x0000B0, "Member 'ABP_CH_MeshBase_C_GetKneeCapTransXY::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.FaceDeformationAtCamera
// 0x0100 (0x0100 - 0x0000)
struct ABP_CH_MeshBase_C_FaceDeformationAtCamera final
{
public:
	class FName                                   HeadBoneName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SKMesh;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   Camera;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeadLocation;                                      // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraForwardVector;                               // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFOVAngle_ReturnValue;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue_1;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformFromBoneSpace_OutPosition;       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformFromBoneSpace_OutRotation;       // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformFromBoneSpace_OutPosition_1;     // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformFromBoneSpace_OutRotation_1;     // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_FaceDeformationAtCamera) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_FaceDeformationAtCamera");
static_assert(sizeof(ABP_CH_MeshBase_C_FaceDeformationAtCamera) == 0x000100, "Wrong size on ABP_CH_MeshBase_C_FaceDeformationAtCamera");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, HeadBoneName) == 0x000000, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::HeadBoneName' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, SKMesh) == 0x000008, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::SKMesh' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, Camera) == 0x000010, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::Camera' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, HeadLocation) == 0x000018, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::HeadLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CameraForwardVector) == 0x000024, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CameraForwardVector' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_GetCameraLocation_ReturnValue) == 0x000030, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Abs_ReturnValue) == 0x00003C, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_GetFOVAngle_ReturnValue) == 0x000040, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_GetFOVAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000044, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000048, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_GetCameraLocation_ReturnValue_1) == 0x00004C, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_GetCameraLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_TransformFromBoneSpace_OutPosition) == 0x000058, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_TransformFromBoneSpace_OutPosition' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_TransformFromBoneSpace_OutRotation) == 0x000064, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_TransformFromBoneSpace_OutRotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_TransformFromBoneSpace_OutPosition_1) == 0x000070, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_TransformFromBoneSpace_OutPosition_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_TransformFromBoneSpace_OutRotation_1) == 0x00007C, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_TransformFromBoneSpace_OutRotation_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_GetSocketLocation_ReturnValue) == 0x000088, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000094, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000A0, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Normal_ReturnValue) == 0x0000AC, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Normal_ReturnValue_1) == 0x0000B8, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000C4, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x0000C8, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000CC, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Vector_Distance_ReturnValue) == 0x0000D0, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000D4, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x0000D8, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000E4, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Normal_ReturnValue_2) == 0x0000E8, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_FClamp_ReturnValue) == 0x0000F4, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000F8, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_FaceDeformationAtCamera, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000FC, "Member 'ABP_CH_MeshBase_C_FaceDeformationAtCamera::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.GetLookAtTargetActor
// 0x0008 (0x0008 - 0x0000)
struct ABP_CH_MeshBase_C_GetLookAtTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_GetLookAtTargetActor) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_GetLookAtTargetActor");
static_assert(sizeof(ABP_CH_MeshBase_C_GetLookAtTargetActor) == 0x000008, "Wrong size on ABP_CH_MeshBase_C_GetLookAtTargetActor");
static_assert(offsetof(ABP_CH_MeshBase_C_GetLookAtTargetActor, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_GetLookAtTargetActor::ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.GetLookAtType
// 0x0001 (0x0001 - 0x0000)
struct ABP_CH_MeshBase_C_GetLookAtType final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_GetLookAtType) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_GetLookAtType");
static_assert(sizeof(ABP_CH_MeshBase_C_GetLookAtType) == 0x000001, "Wrong size on ABP_CH_MeshBase_C_GetLookAtType");
static_assert(offsetof(ABP_CH_MeshBase_C_GetLookAtType, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_GetLookAtType::ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.GetLookAtWorldLocation
// 0x000C (0x000C - 0x0000)
struct ABP_CH_MeshBase_C_GetLookAtWorldLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_GetLookAtWorldLocation) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_GetLookAtWorldLocation");
static_assert(sizeof(ABP_CH_MeshBase_C_GetLookAtWorldLocation) == 0x00000C, "Wrong size on ABP_CH_MeshBase_C_GetLookAtWorldLocation");
static_assert(offsetof(ABP_CH_MeshBase_C_GetLookAtWorldLocation, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_GetLookAtWorldLocation::ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.GetLookAtTargetActorBoneName
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_GetLookAtTargetActorBoneName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_GetLookAtTargetActorBoneName) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_GetLookAtTargetActorBoneName");
static_assert(sizeof(ABP_CH_MeshBase_C_GetLookAtTargetActorBoneName) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_GetLookAtTargetActorBoneName");
static_assert(offsetof(ABP_CH_MeshBase_C_GetLookAtTargetActorBoneName, ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_GetLookAtTargetActorBoneName::ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.ClampAngleToLookat
// 0x0024 (0x0024 - 0x0000)
struct ABP_CH_MeshBase_C_ClampAngleToLookat final
{
public:
	bool                                          BodyLookAt_EnableLimitter_0;                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAngleDegrees;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAngleDegrees;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtTarget;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookatOffset;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_ClampAngleToLookat) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_ClampAngleToLookat");
static_assert(sizeof(ABP_CH_MeshBase_C_ClampAngleToLookat) == 0x000024, "Wrong size on ABP_CH_MeshBase_C_ClampAngleToLookat");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAngleToLookat, BodyLookAt_EnableLimitter_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_ClampAngleToLookat::BodyLookAt_EnableLimitter_0' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAngleToLookat, MinAngleDegrees) == 0x000004, "Member 'ABP_CH_MeshBase_C_ClampAngleToLookat::MinAngleDegrees' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAngleToLookat, MaxAngleDegrees) == 0x000008, "Member 'ABP_CH_MeshBase_C_ClampAngleToLookat::MaxAngleDegrees' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAngleToLookat, LookAtTarget) == 0x00000C, "Member 'ABP_CH_MeshBase_C_ClampAngleToLookat::LookAtTarget' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAngleToLookat, LookatOffset) == 0x000010, "Member 'ABP_CH_MeshBase_C_ClampAngleToLookat::LookatOffset' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAngleToLookat, ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_ClampAngleToLookat::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAngleToLookat, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_ClampAngleToLookat::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAngleToLookat, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'ABP_CH_MeshBase_C_ClampAngleToLookat::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_ClampAngleToLookat, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'ABP_CH_MeshBase_C_ClampAngleToLookat::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Foot Trace
// 0x01D8 (0x01D8 - 0x0000)
struct ABP_CH_MeshBase_C_Foot_Trace final
{
public:
	float                                         TraceLimit;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InActorBottomDistance;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceStartLocation;                                // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutHitResult;                                      // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutHitDistance;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OutHitRotation;                                    // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                FloorNormal;                                       // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDistance;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitResult;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorLocation;                                     // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootLocation;                                      // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0058(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegAtan2_ReturnValue;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan2_ReturnValue_1;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_2;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00CC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_157[0x1];                                      // 0x0157(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Foot_Trace) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_Foot_Trace");
static_assert(sizeof(ABP_CH_MeshBase_C_Foot_Trace) == 0x0001D8, "Wrong size on ABP_CH_MeshBase_C_Foot_Trace");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, TraceLimit) == 0x000000, "Member 'ABP_CH_MeshBase_C_Foot_Trace::TraceLimit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, InActorBottomDistance) == 0x000004, "Member 'ABP_CH_MeshBase_C_Foot_Trace::InActorBottomDistance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, TraceStartLocation) == 0x000008, "Member 'ABP_CH_MeshBase_C_Foot_Trace::TraceStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, OutHitResult) == 0x000014, "Member 'ABP_CH_MeshBase_C_Foot_Trace::OutHitResult' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, OutHitDistance) == 0x000018, "Member 'ABP_CH_MeshBase_C_Foot_Trace::OutHitDistance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, OutHitRotation) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Foot_Trace::OutHitRotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, FloorNormal) == 0x000028, "Member 'ABP_CH_MeshBase_C_Foot_Trace::FloorNormal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, HitDistance) == 0x000034, "Member 'ABP_CH_MeshBase_C_Foot_Trace::HitDistance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, HitResult) == 0x000038, "Member 'ABP_CH_MeshBase_C_Foot_Trace::HitResult' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, ActorLocation) == 0x00003C, "Member 'ABP_CH_MeshBase_C_Foot_Trace::ActorLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, FootLocation) == 0x000048, "Member 'ABP_CH_MeshBase_C_Foot_Trace::FootLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_Less_FloatFloat_ReturnValue) == 0x000054, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, Temp_object_Variable) == 0x000058, "Member 'ABP_CH_MeshBase_C_Foot_Trace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_Not_PreBool_ReturnValue) == 0x000068, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakVector_X) == 0x00006C, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakVector_Y) == 0x000070, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakVector_Z) == 0x000074, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BooleanOR_ReturnValue) == 0x000078, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_DegAtan2_ReturnValue) == 0x00007C, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_DegAtan2_ReturnValue_1) == 0x000080, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_DegAtan2_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000084, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakVector_X_1) == 0x000088, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakVector_Y_1) == 0x00008C, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakVector_Z_1) == 0x000090, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_MakeRotator_ReturnValue) == 0x000094, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakVector_X_2) == 0x0000A0, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakVector_Y_2) == 0x0000A4, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakVector_Z_2) == 0x0000A8, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000AC, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000B0, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_MakeVector_ReturnValue) == 0x0000B4, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_MakeVector_ReturnValue_1) == 0x0000C0, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_LineTraceSingle_OutHit) == 0x0000CC, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_LineTraceSingle_ReturnValue) == 0x000154, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_bBlockingHit) == 0x000155, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000156, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_Time) == 0x000158, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_Distance) == 0x00015C, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_Location) == 0x000160, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_ImpactPoint) == 0x00016C, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_Normal) == 0x000178, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_ImpactNormal) == 0x000184, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_PhysMat) == 0x000190, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_HitActor) == 0x000198, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_HitComponent) == 0x0001A0, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_HitBoneName) == 0x0001A8, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_HitItem) == 0x0001B0, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_ElementIndex) == 0x0001B4, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_FaceIndex) == 0x0001B8, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_TraceStart) == 0x0001BC, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_Trace, CallFunc_BreakHitResult_TraceEnd) == 0x0001C8, "Member 'ABP_CH_MeshBase_C_Foot_Trace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Get Foot Offsets
// 0x0220 (0x0220 - 0x0000)
struct ABP_CH_MeshBase_C_Get_Foot_Offsets final
{
public:
	float                                         InAdjustSinking;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InEnableFootIK_L;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InEnableFootIK_R;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUpdate_Foot_L;                                   // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUpdate_Foot_R;                                   // 0x0007(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         OutActorSinking;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutFootL_Distance;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutFootR_Distance;                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OutFootL_Rotation;                                 // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               OutFootR_Rotation;                                 // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_IgnoreBehindFootIK;                             // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LorR;                                              // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActorLocationZ;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActorBottomDistance2;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDistance;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistance;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActorSinking;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FootR_Rotation;                                    // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FootR_HitDistance;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FootL_Rotation;                                    // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FootL_HitDistance;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FootR_HitResult;                                   // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FootL_HitResult;                                   // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Foot_Trace_OutHitResult;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Foot_Trace_OutHitDistance;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Foot_Trace_OutHitRotation;                // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Foot_Trace_OutHitResult_1;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Foot_Trace_OutHitDistance_1;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Foot_Trace_OutHitRotation_1;              // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_6;        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_7;        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_2;                       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00F0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0100(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18B[0x1];                                      // 0x018B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_8;        // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Get_Foot_Offsets) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_Get_Foot_Offsets");
static_assert(sizeof(ABP_CH_MeshBase_C_Get_Foot_Offsets) == 0x000220, "Wrong size on ABP_CH_MeshBase_C_Get_Foot_Offsets");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, InAdjustSinking) == 0x000000, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::InAdjustSinking' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, InEnableFootIK_L) == 0x000004, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::InEnableFootIK_L' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, InEnableFootIK_R) == 0x000005, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::InEnableFootIK_R' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, IsUpdate_Foot_L) == 0x000006, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::IsUpdate_Foot_L' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, IsUpdate_Foot_R) == 0x000007, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::IsUpdate_Foot_R' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, OutActorSinking) == 0x000008, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::OutActorSinking' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, OutFootL_Distance) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::OutFootL_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, OutFootR_Distance) == 0x000010, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::OutFootR_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, OutFootL_Rotation) == 0x000014, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::OutFootL_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, OutFootR_Rotation) == 0x000020, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::OutFootR_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, Is_IgnoreBehindFootIK) == 0x00002C, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::Is_IgnoreBehindFootIK' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, LorR) == 0x00002D, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::LorR' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, ActorLocationZ) == 0x000030, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::ActorLocationZ' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, ActorBottomDistance2) == 0x000034, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::ActorBottomDistance2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, MinDistance) == 0x000038, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::MinDistance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, MaxDistance) == 0x00003C, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::MaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, ActorSinking) == 0x000040, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::ActorSinking' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, FootR_Rotation) == 0x000044, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::FootR_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, FootR_HitDistance) == 0x000050, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::FootR_HitDistance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, FootL_Rotation) == 0x000054, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::FootL_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, FootL_HitDistance) == 0x000060, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::FootL_HitDistance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, FootR_HitResult) == 0x000064, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::FootR_HitResult' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, FootL_HitResult) == 0x000065, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::FootL_HitResult' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakVector_X) == 0x000068, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakVector_Y) == 0x00006C, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakVector_Z) == 0x000070, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Add_VectorVector_ReturnValue) == 0x000074, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000080, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BooleanOR_ReturnValue) == 0x000081, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000082, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BooleanAND_ReturnValue) == 0x000083, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Foot_Trace_OutHitResult) == 0x000084, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Foot_Trace_OutHitResult' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Foot_Trace_OutHitDistance) == 0x000088, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Foot_Trace_OutHitDistance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Foot_Trace_OutHitRotation) == 0x00008C, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Foot_Trace_OutHitRotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Foot_Trace_OutHitResult_1) == 0x000098, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Foot_Trace_OutHitResult_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Foot_Trace_OutHitDistance_1) == 0x00009C, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Foot_Trace_OutHitDistance_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Foot_Trace_OutHitRotation_1) == 0x0000A0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Foot_Trace_OutHitRotation_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000AC, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0000B4, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0000B8, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_FMin_ReturnValue) == 0x0000BC, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_FMin_ReturnValue_1) == 0x0000C0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C4, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x0000C8, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BooleanAND_ReturnValue_2) == 0x0000CC, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BooleanOR_ReturnValue_1) == 0x0000CD, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x0000D0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000D4, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Subtract_FloatFloat_ReturnValue_6) == 0x0000D8, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Subtract_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000DC, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000E0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Subtract_FloatFloat_ReturnValue_7) == 0x0000E4, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Subtract_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_FMin_ReturnValue_2) == 0x0000E8, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_FMin_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_FMax_ReturnValue) == 0x0000EC, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, Temp_object_Variable) == 0x0000F0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_LineTraceSingle_OutHit) == 0x000100, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_LineTraceSingle_ReturnValue) == 0x000188, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_bBlockingHit) == 0x000189, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_bInitialOverlap) == 0x00018A, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_Time) == 0x00018C, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_Distance) == 0x000190, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_Location) == 0x000194, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_Normal) == 0x0001AC, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_ImpactNormal) == 0x0001B8, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_PhysMat) == 0x0001C8, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_HitActor) == 0x0001D0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_HitComponent) == 0x0001D8, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_HitBoneName) == 0x0001E0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_HitItem) == 0x0001E8, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_ElementIndex) == 0x0001EC, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_FaceIndex) == 0x0001F0, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_TraceStart) == 0x0001F4, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakHitResult_TraceEnd) == 0x000200, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakVector_X_1) == 0x00020C, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakVector_Y_1) == 0x000210, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_BreakVector_Z_1) == 0x000214, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Foot_Offsets, CallFunc_Subtract_FloatFloat_ReturnValue_8) == 0x000218, "Member 'ABP_CH_MeshBase_C_Get_Foot_Offsets::CallFunc_Subtract_FloatFloat_ReturnValue_8' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.SetHandIK
// 0x0024 (0x0024 - 0x0000)
struct ABP_CH_MeshBase_C_SetHandIK final
{
public:
	bool                                          Is_UpdateHandIK;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_IndexHandIK_Out_IndexHandTarget;      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_IndexHandIK_is_update;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Get_IndexHandIK_Out_IndexHandTarget_1;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_IndexHandIK_is_update_1;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_SetHandIK) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_SetHandIK");
static_assert(sizeof(ABP_CH_MeshBase_C_SetHandIK) == 0x000024, "Wrong size on ABP_CH_MeshBase_C_SetHandIK");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, Is_UpdateHandIK) == 0x000000, "Member 'ABP_CH_MeshBase_C_SetHandIK::Is_UpdateHandIK' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_GetCurveValue_ReturnValue_1) == 0x000008, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00000D, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_BooleanAND_ReturnValue_1) == 0x00000F, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_Get_IndexHandIK_Out_IndexHandTarget) == 0x000014, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_Get_IndexHandIK_Out_IndexHandTarget' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_Get_IndexHandIK_is_update) == 0x000018, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_Get_IndexHandIK_is_update' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000019, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_Get_IndexHandIK_Out_IndexHandTarget_1) == 0x00001C, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_Get_IndexHandIK_Out_IndexHandTarget_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_SetHandIK, CallFunc_Get_IndexHandIK_is_update_1) == 0x000020, "Member 'ABP_CH_MeshBase_C_SetHandIK::CallFunc_Get_IndexHandIK_is_update_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Update IK Values
// 0x0080 (0x0080 - 0x0000)
struct ABP_CH_MeshBase_C_Update_IK_Values final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_2;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_3;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Update_IK_Values) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Update_IK_Values");
static_assert(sizeof(ABP_CH_MeshBase_C_Update_IK_Values) == 0x000080, "Wrong size on ABP_CH_MeshBase_C_Update_IK_Values");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000008, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_FInterpTo_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_FInterpTo_ReturnValue_1) == 0x000014, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_FInterpTo_ReturnValue_2) == 0x000018, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_FInterpTo_ReturnValue_3) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_BreakVector_X) == 0x000020, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_BreakVector_Y) == 0x000024, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_BreakVector_Z) == 0x000028, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_BreakVector_X_1) == 0x00002C, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_BreakVector_Y_1) == 0x000030, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_BreakVector_Z_1) == 0x000034, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000038, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00003C, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000048, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_GetCurveValue_ReturnValue) == 0x00004C, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Not_PreBool_ReturnValue) == 0x000050, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_GetCurveValue_ReturnValue_1) == 0x000054, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000058, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x00005C, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000060, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000064, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Add_FloatFloat_ReturnValue) == 0x000068, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_FClamp_ReturnValue) == 0x000070, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_FClamp_ReturnValue_1) == 0x000074, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x000078, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_IK_Values, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x00007C, "Member 'ABP_CH_MeshBase_C_Update_IK_Values::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.GetTargetHandIK
// 0x0060 (0x0060 - 0x0000)
struct ABP_CH_MeshBase_C_GetTargetHandIK final
{
public:
	class FName                                   InCurveName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InHandName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InHandTargetVar;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCurrentHandTargetVar;                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutHandTargetTransform;                            // 0x0020(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_GetTargetHandIK) == 0x000010, "Wrong alignment on ABP_CH_MeshBase_C_GetTargetHandIK");
static_assert(sizeof(ABP_CH_MeshBase_C_GetTargetHandIK) == 0x000060, "Wrong size on ABP_CH_MeshBase_C_GetTargetHandIK");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, InCurveName) == 0x000000, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::InCurveName' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, InHandName) == 0x000008, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::InHandName' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, InHandTargetVar) == 0x000010, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::InHandTargetVar' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, InCurrentHandTargetVar) == 0x000014, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::InCurrentHandTargetVar' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, OutHandTargetTransform) == 0x000020, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::OutHandTargetTransform' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, CallFunc_GetCurveValue_ReturnValue) == 0x000050, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000054, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000059, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetTargetHandIK, CallFunc_BooleanAND_ReturnValue) == 0x00005A, "Member 'ABP_CH_MeshBase_C_GetTargetHandIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.UpdatePhysicsAlpha
// 0x0044 (0x0044 - 0x0000)
struct ABP_CH_MeshBase_C_UpdatePhysicsAlpha final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_4;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_5;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_UpdatePhysicsAlpha");
static_assert(sizeof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha) == 0x000044, "Wrong size on ABP_CH_MeshBase_C_UpdatePhysicsAlpha");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_GetCurveValue_ReturnValue_1) == 0x000004, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_GetCurveValue_ReturnValue_2) == 0x000018, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_GetCurveValue_ReturnValue_3) == 0x00001C, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000020, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000024, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000028, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00002C, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_GetCurveValue_ReturnValue_4) == 0x000030, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_GetCurveValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_GetCurveValue_ReturnValue_5) == 0x000034, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_GetCurveValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x000038, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x00003C, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_UpdatePhysicsAlpha, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x000040, "Member 'ABP_CH_MeshBase_C_UpdatePhysicsAlpha::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Update Lock Body
// 0x003C (0x003C - 0x0000)
struct ABP_CH_MeshBase_C_Update_Lock_Body final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_4;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_5;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Update_Lock_Body) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Update_Lock_Body");
static_assert(sizeof(ABP_CH_MeshBase_C_Update_Lock_Body) == 0x00003C, "Wrong size on ABP_CH_MeshBase_C_Update_Lock_Body");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_GetCurveValue_ReturnValue_1) == 0x000004, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_FClamp_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_GetCurveValue_ReturnValue_2) == 0x000010, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_GetCurveValue_ReturnValue_3) == 0x000014, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000019, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_SelectFloat_ReturnValue) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_SelectFloat_ReturnValue_1) == 0x000020, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_GetCurveValue_ReturnValue_4) == 0x000024, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_GetCurveValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_GetCurveValue_ReturnValue_5) == 0x000028, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_GetCurveValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_MapRangeClamped_ReturnValue) == 0x00002C, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000030, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Lock_Body, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000038, "Member 'ABP_CH_MeshBase_C_Update_Lock_Body::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CulcLookatDirection_Euler
// 0x0180 (0x0180 - 0x0000)
struct ABP_CH_MeshBase_C_CulcLookatDirection_Euler final
{
public:
	struct FVector                                InStartLocation;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InTargetLocation;                                  // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutHorizontalAngle;                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutVerticalAngle;                                  // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue;            // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue_1;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue_1;             // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetRightVector_ReturnValue_2;             // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_2;       // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler) == 0x000010, "Wrong alignment on ABP_CH_MeshBase_C_CulcLookatDirection_Euler");
static_assert(sizeof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler) == 0x000180, "Wrong size on ABP_CH_MeshBase_C_CulcLookatDirection_Euler");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, InStartLocation) == 0x000000, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::InStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, InTargetLocation) == 0x00000C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::InTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, OutHorizontalAngle) == 0x000018, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::OutHorizontalAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, OutVerticalAngle) == 0x00001C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::OutVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_FindLookAtRotation_ReturnValue) == 0x000020, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_GetSocketRotation_ReturnValue) == 0x00002C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_GetSocketRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_GetSocketRotation_ReturnValue_1) == 0x000038, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_GetSocketRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_GetRightVector_ReturnValue) == 0x000044, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_GetRightVector_ReturnValue_1) == 0x000050, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_GetRightVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00005C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000068, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Roll) == 0x000074, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Pitch) == 0x000078, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Yaw) == 0x00007C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakVector_X) == 0x000080, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakVector_Y) == 0x000084, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakVector_Z) == 0x000088, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_GetSocketTransform_ReturnValue) == 0x000090, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_MakeVector_ReturnValue) == 0x0000C0, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakTransform_Location) == 0x0000CC, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakTransform_Rotation) == 0x0000D8, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakTransform_Scale) == 0x0000E4, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x0000F0, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_GetRightVector_ReturnValue_2) == 0x0000FC, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_GetRightVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Roll_1) == 0x000108, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Pitch_1) == 0x00010C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Yaw_1) == 0x000110, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000114, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_Conv_VectorToRotator_ReturnValue_2) == 0x000120, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_Conv_VectorToRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Roll_2) == 0x00012C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Pitch_2) == 0x000130, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Yaw_2) == 0x000134, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000138, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00013C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_MakeRotator_ReturnValue) == 0x000140, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_NegateRotator_ReturnValue) == 0x00014C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_ComposeRotators_ReturnValue) == 0x000158, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Roll_3) == 0x000164, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Pitch_3) == 0x000168, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_BreakRotator_Yaw_3) == 0x00016C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Euler, CallFunc_Add_FloatFloat_ReturnValue) == 0x000170, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Euler::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CulcLookatDirection_Vector
// 0x00F8 (0x00F8 - 0x0000)
struct ABP_CH_MeshBase_C_CulcLookatDirection_Vector final
{
public:
	struct FVector                                InStartLocation;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InStartRotation;                                   // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                InTargetLocation;                                  // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutHorizontalAngle;                                // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutVerticalAngle;                                  // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalAngle;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeadForwardVec;                                    // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeadVectorRotation;                                // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                BetweenVec;                                        // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAngleBetween_OutAngle;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_1;            // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateDirection_ReturnValue;           // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_CulcLookatDirection_Vector");
static_assert(sizeof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector) == 0x0000F8, "Wrong size on ABP_CH_MeshBase_C_CulcLookatDirection_Vector");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, InStartLocation) == 0x000000, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::InStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, InStartRotation) == 0x00000C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::InStartRotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, InTargetLocation) == 0x000018, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::InTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, OutHorizontalAngle) == 0x000024, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::OutHorizontalAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, OutVerticalAngle) == 0x000028, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::OutVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, HorizontalAngle) == 0x00002C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::HorizontalAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, HeadForwardVec) == 0x000030, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::HeadForwardVec' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, HeadVectorRotation) == 0x00003C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::HeadVectorRotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, BetweenVec) == 0x000048, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::BetweenVec' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_MakeRotator_ReturnValue) == 0x000054, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_BreakVector_X) == 0x000060, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_BreakVector_Y) == 0x000064, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_BreakVector_Z) == 0x000068, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00006C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_Normal_ReturnValue) == 0x000078, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_GetAngleBetween_OutAngle) == 0x000084, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_GetAngleBetween_OutAngle' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000088, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_Normal_ReturnValue_1) == 0x00008C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_BreakVector_X_1) == 0x000098, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_BreakVector_Y_1) == 0x00009C, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_BreakVector_Z_1) == 0x0000A0, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_Vector_Normal2D_ReturnValue) == 0x0000A4, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000B0, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000B4, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_SelectFloat_ReturnValue) == 0x0000C0, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_GetRightVector_ReturnValue) == 0x0000C4, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000D0, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_Vector_Normal2D_ReturnValue_1) == 0x0000DC, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_Vector_Normal2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_CalculateDirection_ReturnValue) == 0x0000E8, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_CalculateDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CulcLookatDirection_Vector, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000EC, "Member 'ABP_CH_MeshBase_C_CulcLookatDirection_Vector::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Update Locomotion Values
// 0x0048 (0x0048 - 0x0000)
struct ABP_CH_MeshBase_C_Update_Locomotion_Values final
{
public:
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateWalkRunBlend_WalkRunBlend;       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_3;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_2;      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Update_Locomotion_Values) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Update_Locomotion_Values");
static_assert(sizeof(ABP_CH_MeshBase_C_Update_Locomotion_Values) == 0x000048, "Wrong size on ABP_CH_MeshBase_C_Update_Locomotion_Values");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, Temp_bool_IsClosed_Variable) == 0x000000, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, Temp_bool_Has_Been_Initd_Variable) == 0x000001, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, Temp_bool_IsClosed_Variable_1) == 0x000002, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000003, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000008, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000009, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00000B, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Less_FloatFloat_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_MapRangeClamped_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_SelectFloat_ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000020, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_BooleanOR_ReturnValue) == 0x000024, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000028, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x00002C, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_BooleanOR_ReturnValue_1) == 0x00002D, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, Temp_bool_Has_Been_Initd_Variable_1) == 0x00002E, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x00002F, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000030, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000034, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_CalculateWalkRunBlend_WalkRunBlend) == 0x000038, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_CalculateWalkRunBlend_WalkRunBlend' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_MapRangeClamped_ReturnValue_3) == 0x00003C, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000040, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_EqualEqual_FloatFloat_ReturnValue_2) == 0x000041, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_EqualEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x000042, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_Locomotion_Values, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000044, "Member 'ABP_CH_MeshBase_C_Update_Locomotion_Values::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Update AddBleath Values
// 0x001C (0x001C - 0x0000)
struct ABP_CH_MeshBase_C_Update_AddBleath_Values final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Update_AddBleath_Values) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Update_AddBleath_Values");
static_assert(sizeof(ABP_CH_MeshBase_C_Update_AddBleath_Values) == 0x00001C, "Wrong size on ABP_CH_MeshBase_C_Update_AddBleath_Values");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_AddBleath_Values, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_Update_AddBleath_Values::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_AddBleath_Values, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_Update_AddBleath_Values::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_AddBleath_Values, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_Update_AddBleath_Values::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_AddBleath_Values, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Update_AddBleath_Values::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_AddBleath_Values, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_Update_AddBleath_Values::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_AddBleath_Values, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_Update_AddBleath_Values::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Update_AddBleath_Values, CallFunc_SelectFloat_ReturnValue_1) == 0x000018, "Member 'ABP_CH_MeshBase_C_Update_AddBleath_Values::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Get Layering Arms Alpha
// 0x000C (0x000C - 0x0000)
struct ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha final
{
public:
	float                                         ArmL_R_Alpha;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaySlotAnimation_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha");
static_assert(sizeof(ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha) == 0x00000C, "Wrong size on ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha, ArmL_R_Alpha) == 0x000000, "Member 'ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha::ArmL_R_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha, CallFunc_BooleanOR_ReturnValue) == 0x000009, "Member 'ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha, CallFunc_IsPlaySlotAnimation_ReturnValue) == 0x00000A, "Member 'ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha::CallFunc_IsPlaySlotAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha, CallFunc_BooleanOR_ReturnValue_1) == 0x00000B, "Member 'ABP_CH_MeshBase_C_Get_Layering_Arms_Alpha::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Check_UpdateFootIK
// 0x0003 (0x0003 - 0x0000)
struct ABP_CH_MeshBase_C_Check_UpdateFootIK final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_1;    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Check_UpdateFootIK) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_Check_UpdateFootIK");
static_assert(sizeof(ABP_CH_MeshBase_C_Check_UpdateFootIK) == 0x000003, "Wrong size on ABP_CH_MeshBase_C_Check_UpdateFootIK");
static_assert(offsetof(ABP_CH_MeshBase_C_Check_UpdateFootIK, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_Check_UpdateFootIK::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Check_UpdateFootIK, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000001, "Member 'ABP_CH_MeshBase_C_Check_UpdateFootIK::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Check_UpdateFootIK, CallFunc_EqualEqual_VectorVector_ReturnValue_1) == 0x000002, "Member 'ABP_CH_MeshBase_C_Check_UpdateFootIK::CallFunc_EqualEqual_VectorVector_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Set_FootDistance
// 0x002C (0x002C - 0x0000)
struct ABP_CH_MeshBase_C_Set_FootDistance final
{
public:
	float                                         In_ActorSinking;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         In_Foot_L_Distance;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         In_Foot_R_Distance;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               In_Foot_L_Rotation;                                // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               In_Foot_R_Rotation;                                // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Set_FootDistance) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Set_FootDistance");
static_assert(sizeof(ABP_CH_MeshBase_C_Set_FootDistance) == 0x00002C, "Wrong size on ABP_CH_MeshBase_C_Set_FootDistance");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_FootDistance, In_ActorSinking) == 0x000000, "Member 'ABP_CH_MeshBase_C_Set_FootDistance::In_ActorSinking' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_FootDistance, In_Foot_L_Distance) == 0x000004, "Member 'ABP_CH_MeshBase_C_Set_FootDistance::In_Foot_L_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_FootDistance, In_Foot_R_Distance) == 0x000008, "Member 'ABP_CH_MeshBase_C_Set_FootDistance::In_Foot_R_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_FootDistance, In_Foot_L_Rotation) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Set_FootDistance::In_Foot_L_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_FootDistance, In_Foot_R_Rotation) == 0x000018, "Member 'ABP_CH_MeshBase_C_Set_FootDistance::In_Foot_R_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_FootDistance, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'ABP_CH_MeshBase_C_Set_FootDistance::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_FootDistance, CallFunc_FMin_ReturnValue) == 0x000028, "Member 'ABP_CH_MeshBase_C_Set_FootDistance::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Set Actor Bottom Distance
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance final
{
public:
	float                                         CallFunc_BreakVector_X;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance");
static_assert(sizeof(ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance, CallFunc_BreakVector_X) == 0x000000, "Member 'ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance, CallFunc_BreakVector_Y) == 0x000004, "Member 'ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance, CallFunc_BreakVector_Z) == 0x000008, "Member 'ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Set_Actor_Bottom_Distance::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Set_IsEnableLocomotionSim
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_Set_IsEnableLocomotionSim final
{
public:
	class UBP_AtlEvtActorComponent_C*             CallFunc_GetComponentByClass_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Set_IsEnableLocomotionSim) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_Set_IsEnableLocomotionSim");
static_assert(sizeof(ABP_CH_MeshBase_C_Set_IsEnableLocomotionSim) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_Set_IsEnableLocomotionSim");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_IsEnableLocomotionSim, CallFunc_GetComponentByClass_ReturnValue) == 0x000000, "Member 'ABP_CH_MeshBase_C_Set_IsEnableLocomotionSim::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_IsEnableLocomotionSim, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_Set_IsEnableLocomotionSim::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Get Floor State
// 0x01F0 (0x01F0 - 0x0000)
struct ABP_CH_MeshBase_C_Get_Floor_State final
{
public:
	Enum_FloorState                               Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00C0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15B[0x1];                                      // 0x015B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Get_Floor_State) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_Get_Floor_State");
static_assert(sizeof(ABP_CH_MeshBase_C_Get_Floor_State) == 0x0001F0, "Wrong size on ABP_CH_MeshBase_C_Get_Floor_State");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, Result) == 0x000000, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::Result' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_GetForwardVector_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000010, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_bBlockingHit) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_bInitialOverlap) == 0x00001D, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_Time) == 0x000020, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_Distance) == 0x000024, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_Location) == 0x000028, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_ImpactPoint) == 0x000034, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_Normal) == 0x000040, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_ImpactNormal) == 0x00004C, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_PhysMat) == 0x000058, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_HitActor) == 0x000060, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_HitComponent) == 0x000068, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_HitBoneName) == 0x000070, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_HitItem) == 0x000078, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_ElementIndex) == 0x00007C, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_FaceIndex) == 0x000080, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_TraceStart) == 0x000084, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_TraceEnd) == 0x000090, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_Add_VectorVector_ReturnValue) == 0x00009C, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakVector_X) == 0x0000A8, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakVector_Y) == 0x0000AC, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakVector_Z) == 0x0000B0, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000B4, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, Temp_object_Variable) == 0x0000C0, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_LineTraceSingle_OutHit) == 0x0000D0, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_LineTraceSingle_ReturnValue) == 0x000158, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000159, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x00015A, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_Time_1) == 0x00015C, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_Distance_1) == 0x000160, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_Location_1) == 0x000164, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000170, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_Normal_1) == 0x00017C, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000188, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_PhysMat_1) == 0x000198, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_HitActor_1) == 0x0001A0, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_HitComponent_1) == 0x0001A8, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_HitBoneName_1) == 0x0001B0, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_HitItem_1) == 0x0001B8, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_ElementIndex_1) == 0x0001BC, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_FaceIndex_1) == 0x0001C0, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_TraceStart_1) == 0x0001C4, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakHitResult_TraceEnd_1) == 0x0001D0, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakVector_X_1) == 0x0001DC, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakVector_Y_1) == 0x0001E0, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_BreakVector_Z_1) == 0x0001E4, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001E8, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Floor_State, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0001E9, "Member 'ABP_CH_MeshBase_C_Get_Floor_State::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Can Enable Post Process In Event
// 0x0005 (0x0005 - 0x0000)
struct ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyMontagePlaying_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event");
static_assert(sizeof(ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event) == 0x000005, "Wrong size on ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event");
static_assert(offsetof(ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event, Return) == 0x000000, "Member 'ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event::Return' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event, CallFunc_IsAnyMontagePlaying_ReturnValue) == 0x000002, "Member 'ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event::CallFunc_IsAnyMontagePlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event, CallFunc_BooleanOR_ReturnValue_1) == 0x000004, "Member 'ABP_CH_MeshBase_C_Can_Enable_Post_Process_In_Event::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Get_IndexHandIK
// 0x0024 (0x0024 - 0x0000)
struct ABP_CH_MeshBase_C_Get_IndexHandIK final
{
public:
	class FName                                   InCurveName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InHandTargetVar;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out_IndexHandTarget;                               // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_update;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Get_IndexHandIK) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Get_IndexHandIK");
static_assert(sizeof(ABP_CH_MeshBase_C_Get_IndexHandIK) == 0x000024, "Wrong size on ABP_CH_MeshBase_C_Get_IndexHandIK");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_IndexHandIK, InCurveName) == 0x000000, "Member 'ABP_CH_MeshBase_C_Get_IndexHandIK::InCurveName' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_IndexHandIK, InHandTargetVar) == 0x000008, "Member 'ABP_CH_MeshBase_C_Get_IndexHandIK::InHandTargetVar' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_IndexHandIK, Out_IndexHandTarget) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Get_IndexHandIK::Out_IndexHandTarget' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_IndexHandIK, Is_update) == 0x000010, "Member 'ABP_CH_MeshBase_C_Get_IndexHandIK::Is_update' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_IndexHandIK, CallFunc_GetCurveValue_ReturnValue) == 0x000014, "Member 'ABP_CH_MeshBase_C_Get_IndexHandIK::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_IndexHandIK, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'ABP_CH_MeshBase_C_Get_IndexHandIK::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_IndexHandIK, CallFunc_Percent_FloatFloat_ReturnValue) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Get_IndexHandIK::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_IndexHandIK, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000020, "Member 'ABP_CH_MeshBase_C_Get_IndexHandIK::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_IndexHandIK, CallFunc_BooleanAND_ReturnValue) == 0x000021, "Member 'ABP_CH_MeshBase_C_Get_IndexHandIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_AnimGraph");
static_assert(sizeof(ABP_CH_MeshBase_C_AnimGraph) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_AnimGraph");
static_assert(offsetof(ABP_CH_MeshBase_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.BaseLayer
// 0x0010 (0x0010 - 0x0000)
struct ABP_CH_MeshBase_C_BaseLayer final
{
public:
	struct FPoseLink                              BaseLayer_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_BaseLayer) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_BaseLayer");
static_assert(sizeof(ABP_CH_MeshBase_C_BaseLayer) == 0x000010, "Wrong size on ABP_CH_MeshBase_C_BaseLayer");
static_assert(offsetof(ABP_CH_MeshBase_C_BaseLayer, BaseLayer_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_BaseLayer::BaseLayer_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.LayerBlending
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_LayerBlending final
{
public:
	struct FPoseLink                              Base_Layer_Input;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LayerBlending_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_LayerBlending) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_LayerBlending");
static_assert(sizeof(ABP_CH_MeshBase_C_LayerBlending) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_LayerBlending");
static_assert(offsetof(ABP_CH_MeshBase_C_LayerBlending, Base_Layer_Input) == 0x000000, "Member 'ABP_CH_MeshBase_C_LayerBlending::Base_Layer_Input' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_LayerBlending, LayerBlending_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_LayerBlending::LayerBlending_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Foot IK
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_Foot_IK final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Foot_IK_0;                                         // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Foot_IK) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_Foot_IK");
static_assert(sizeof(ABP_CH_MeshBase_C_Foot_IK) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_Foot_IK");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_IK, InPose) == 0x000000, "Member 'ABP_CH_MeshBase_C_Foot_IK::InPose' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Foot_IK, Foot_IK_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_Foot_IK::Foot_IK_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.AssistanceBone
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_AssistanceBone final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AssistanceBone_0;                                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_AssistanceBone) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_AssistanceBone");
static_assert(sizeof(ABP_CH_MeshBase_C_AssistanceBone) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_AssistanceBone");
static_assert(offsetof(ABP_CH_MeshBase_C_AssistanceBone, InPose_0) == 0x000000, "Member 'ABP_CH_MeshBase_C_AssistanceBone::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_AssistanceBone, AssistanceBone_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_AssistanceBone::AssistanceBone_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Set_AttachHandIK_Bone
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_Set_AttachHandIK_Bone final
{
public:
	struct FPoseLink                              InPose_1;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Set_AttachHandIK_Bone_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Set_AttachHandIK_Bone) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_Set_AttachHandIK_Bone");
static_assert(sizeof(ABP_CH_MeshBase_C_Set_AttachHandIK_Bone) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_Set_AttachHandIK_Bone");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_AttachHandIK_Bone, InPose_1) == 0x000000, "Member 'ABP_CH_MeshBase_C_Set_AttachHandIK_Bone::InPose_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Set_AttachHandIK_Bone, Set_AttachHandIK_Bone_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_Set_AttachHandIK_Bone::Set_AttachHandIK_Bone_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CostumePhysLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_CostumePhysLayer final
{
public:
	struct FPoseLink                              InPhysicsPose;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CostumePhysLayer_0;                                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_CostumePhysLayer) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_CostumePhysLayer");
static_assert(sizeof(ABP_CH_MeshBase_C_CostumePhysLayer) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_CostumePhysLayer");
static_assert(offsetof(ABP_CH_MeshBase_C_CostumePhysLayer, InPhysicsPose) == 0x000000, "Member 'ABP_CH_MeshBase_C_CostumePhysLayer::InPhysicsPose' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CostumePhysLayer, CostumePhysLayer_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_CostumePhysLayer::CostumePhysLayer_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CustomAdditiveLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_CustomAdditiveLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CustomAdditiveLayer_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_CustomAdditiveLayer) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_CustomAdditiveLayer");
static_assert(sizeof(ABP_CH_MeshBase_C_CustomAdditiveLayer) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_CustomAdditiveLayer");
static_assert(offsetof(ABP_CH_MeshBase_C_CustomAdditiveLayer, InPose) == 0x000000, "Member 'ABP_CH_MeshBase_C_CustomAdditiveLayer::InPose' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CustomAdditiveLayer, CustomAdditiveLayer_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_CustomAdditiveLayer::CustomAdditiveLayer_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.CostumeAdjustLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_CostumeAdjustLayer final
{
public:
	struct FPoseLink                              InMeshPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CostumeAdjustLayer_0;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_CostumeAdjustLayer) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_CostumeAdjustLayer");
static_assert(sizeof(ABP_CH_MeshBase_C_CostumeAdjustLayer) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_CostumeAdjustLayer");
static_assert(offsetof(ABP_CH_MeshBase_C_CostumeAdjustLayer, InMeshPose) == 0x000000, "Member 'ABP_CH_MeshBase_C_CostumeAdjustLayer::InMeshPose' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_CostumeAdjustLayer, CostumeAdjustLayer_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_CostumeAdjustLayer::CostumeAdjustLayer_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.HairAdjustLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_HairAdjustLayer final
{
public:
	struct FPoseLink                              InMeshPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HairAdjustLayer_0;                                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_HairAdjustLayer) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_HairAdjustLayer");
static_assert(sizeof(ABP_CH_MeshBase_C_HairAdjustLayer) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_HairAdjustLayer");
static_assert(offsetof(ABP_CH_MeshBase_C_HairAdjustLayer, InMeshPose) == 0x000000, "Member 'ABP_CH_MeshBase_C_HairAdjustLayer::InMeshPose' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_HairAdjustLayer, HairAdjustLayer_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_HairAdjustLayer::HairAdjustLayer_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.HairPhysLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_CH_MeshBase_C_HairPhysLayer final
{
public:
	struct FPoseLink                              InPhysPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HairPhysLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_HairPhysLayer) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_HairPhysLayer");
static_assert(sizeof(ABP_CH_MeshBase_C_HairPhysLayer) == 0x000020, "Wrong size on ABP_CH_MeshBase_C_HairPhysLayer");
static_assert(offsetof(ABP_CH_MeshBase_C_HairPhysLayer, InPhysPose) == 0x000000, "Member 'ABP_CH_MeshBase_C_HairPhysLayer::InPhysPose' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_HairPhysLayer, HairPhysLayer_0) == 0x000010, "Member 'ABP_CH_MeshBase_C_HairPhysLayer::HairPhysLayer_0' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Get_ABP_CH_MeshBaseVariable
// 0x0040 (0x0040 - 0x0000)
struct ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable final
{
public:
	float                                         LookAtHorizontal;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtVertical;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out_Interp_LookatHair_H;                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out_Interp_LookatHair_V;                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Out;                                  // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Upperbody_Out;                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Lowerbody_Out;                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Hair_Out;                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Jacket_Out;                           // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Skirt_Out;                            // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Calc_PhysicsAlphaSkirt;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Calc_PhysicsAlphaJacket;                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Calc_PhysicsAlphaHair;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Calc_PhysicsAlphaLowerBody;                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Calc_PhysicsAlphaUpperBody;                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Calc_PhysicsAlpha;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable");
static_assert(sizeof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable) == 0x000040, "Wrong size on ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, LookAtHorizontal) == 0x000000, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::LookAtHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, LookAtVertical) == 0x000004, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::LookAtVertical' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, Out_Interp_LookatHair_H) == 0x000008, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::Out_Interp_LookatHair_H' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, Out_Interp_LookatHair_V) == 0x00000C, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::Out_Interp_LookatHair_V' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Out) == 0x000010, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Out' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Upperbody_Out) == 0x000014, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Upperbody_Out' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Lowerbody_Out) == 0x000018, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Lowerbody_Out' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Hair_Out) == 0x00001C, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Hair_Out' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Jacket_Out) == 0x000020, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Jacket_Out' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Skirt_Out) == 0x000024, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Skirt_Out' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, Calc_PhysicsAlphaSkirt) == 0x000028, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::Calc_PhysicsAlphaSkirt' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, Calc_PhysicsAlphaJacket) == 0x00002C, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::Calc_PhysicsAlphaJacket' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, Calc_PhysicsAlphaHair) == 0x000030, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::Calc_PhysicsAlphaHair' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, Calc_PhysicsAlphaLowerBody) == 0x000034, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::Calc_PhysicsAlphaLowerBody' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, Calc_PhysicsAlphaUpperBody) == 0x000038, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::Calc_PhysicsAlphaUpperBody' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable, Calc_PhysicsAlpha) == 0x00003C, "Member 'ABP_CH_MeshBase_C_Get_ABP_CH_MeshBaseVariable::Calc_PhysicsAlpha' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Get_AnimBP
// 0x0008 (0x0008 - 0x0000)
struct ABP_CH_MeshBase_C_Get_AnimBP final
{
public:
	class UAnimInstance*                          Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_Get_AnimBP) == 0x000008, "Wrong alignment on ABP_CH_MeshBase_C_Get_AnimBP");
static_assert(sizeof(ABP_CH_MeshBase_C_Get_AnimBP) == 0x000008, "Wrong size on ABP_CH_MeshBase_C_Get_AnimBP");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_AnimBP, Return) == 0x000000, "Member 'ABP_CH_MeshBase_C_Get_AnimBP::Return' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.Get_Enable_FootIK
// 0x000C (0x000C - 0x0000)
struct ABP_CH_MeshBase_C_Get_Enable_FootIK final
{
public:
	bool                                          Out_foot_r;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Out_foot_l;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_CH_MeshBase_C_Get_Enable_FootIK) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_Get_Enable_FootIK");
static_assert(sizeof(ABP_CH_MeshBase_C_Get_Enable_FootIK) == 0x00000C, "Wrong size on ABP_CH_MeshBase_C_Get_Enable_FootIK");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, Out_foot_r) == 0x000000, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::Out_foot_r' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, Out_foot_l) == 0x000001, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::Out_foot_l' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000002, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000003, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000005, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000006, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x000007, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_BooleanAND_ReturnValue_1) == 0x000009, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_BooleanAND_ReturnValue_2) == 0x00000A, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_Get_Enable_FootIK, CallFunc_BooleanAND_ReturnValue_3) == 0x00000B, "Member 'ABP_CH_MeshBase_C_Get_Enable_FootIK::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.GetWalkRunBlend
// 0x0008 (0x0008 - 0x0000)
struct ABP_CH_MeshBase_C_GetWalkRunBlend final
{
public:
	float                                         OutWalkRunBlend;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutPreviousWalkRunBlend;                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_GetWalkRunBlend) == 0x000004, "Wrong alignment on ABP_CH_MeshBase_C_GetWalkRunBlend");
static_assert(sizeof(ABP_CH_MeshBase_C_GetWalkRunBlend) == 0x000008, "Wrong size on ABP_CH_MeshBase_C_GetWalkRunBlend");
static_assert(offsetof(ABP_CH_MeshBase_C_GetWalkRunBlend, OutWalkRunBlend) == 0x000000, "Member 'ABP_CH_MeshBase_C_GetWalkRunBlend::OutWalkRunBlend' has a wrong offset!");
static_assert(offsetof(ABP_CH_MeshBase_C_GetWalkRunBlend, OutPreviousWalkRunBlend) == 0x000004, "Member 'ABP_CH_MeshBase_C_GetWalkRunBlend::OutPreviousWalkRunBlend' has a wrong offset!");

// Function ABP_CH_MeshBase.ABP_CH_MeshBase_C.GetLocomotionState
// 0x0001 (0x0001 - 0x0000)
struct ABP_CH_MeshBase_C_GetLocomotionState final
{
public:
	Enum_LocomotionState                          OutLocomotionState;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CH_MeshBase_C_GetLocomotionState) == 0x000001, "Wrong alignment on ABP_CH_MeshBase_C_GetLocomotionState");
static_assert(sizeof(ABP_CH_MeshBase_C_GetLocomotionState) == 0x000001, "Wrong size on ABP_CH_MeshBase_C_GetLocomotionState");
static_assert(offsetof(ABP_CH_MeshBase_C_GetLocomotionState, OutLocomotionState) == 0x000000, "Member 'ABP_CH_MeshBase_C_GetLocomotionState::OutLocomotionState' has a wrong offset!");

}

