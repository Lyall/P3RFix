#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlMainConductor

#include "Basic.hpp"

#include "BP_BtlMainConductor_classes.hpp"
#include "BP_BtlMainConductor_parameters.hpp"


namespace SDK
{

// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Finish Battle__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Finish_Battle__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Finish Battle__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Finish Load For Serial Encount__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Finish_Load_For_Serial_Encount__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Finish Load For Serial Encount__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.ExecuteUbergraph_BP_BtlMainConductor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlMainConductor_C::ExecuteUbergraph_BP_BtlMainConductor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "ExecuteUbergraph_BP_BtlMainConductor");

	Params::BP_BtlMainConductor_C_ExecuteUbergraph_BP_BtlMainConductor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BtlMainConductor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Sync Encount Event Camera
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Sync_Encount_Event_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Sync Encount Event Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Has Finished Encount Event
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Has_Finished_Encount_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Has Finished Encount Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Finish Unloading Levels
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Finish_Unloading_Levels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Finish Unloading Levels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Debug Kill
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Debug_Kill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Debug Kill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Initialize Battle
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Initialize_Battle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Initialize Battle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Exit Battle
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Exit_Battle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Exit Battle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Encount
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlEncountParam                 Encount_Param                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_BtlMainConductor_C::On_Encount(const struct FBtlEncountParam& Encount_Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Encount");

	Params::BP_BtlMainConductor_C_On_Encount Parms{};

	Parms.Encount_Param = std::move(Encount_Param);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Destroy Battle 
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Destroy_Battle_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Destroy Battle ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Unload Levels
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Unload_Levels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Unload Levels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Load Levels
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Load_Levels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Load Levels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Has Finished Load Enemy For Quick Enc Mode
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Has_Finished_Load_Enemy_For_Quick_Enc_Mode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Has Finished Load Enemy For Quick Enc Mode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Finish Enemy Load
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Finish_Enemy_Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Finish Enemy Load");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Has Finished All Loading Events
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Has_Finished_All_Loading_Events()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Has Finished All Loading Events");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Start Loading GUI Models
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Start_Loading_GUI_Models()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Start Loading GUI Models");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Start Battle From Serial Encount
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Start_Battle_From_Serial_Encount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Start Battle From Serial Encount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Finished Stuff Load
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Finished_Stuff_Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Finished Stuff Load");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Finish Loading Levels
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Finish_Loading_Levels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Finish Loading Levels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlMainConductor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "ReceiveTick");

	Params::BP_BtlMainConductor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Finish Data Load
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Finish_Data_Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Finish Data Load");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Load
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Load");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Load Residential Data
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Load_Residential_Data()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Load Residential Data");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Retry Battle
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Retry_Battle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Retry Battle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.HasFinishedWipe
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::HasFinishedWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "HasFinishedWipe");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Start Turn Battle
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Start_Turn_Battle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Start Turn Battle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Has Finished Serial Encount Enemy
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Has_Finished_Serial_Encount_Enemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Has Finished Serial Encount Enemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.On Load Serial Encount
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::On_Load_Serial_Encount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "On Load Serial Encount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.MarkAsBtlCoreIsReady
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::MarkAsBtlCoreIsReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "MarkAsBtlCoreIsReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.GetBtlCore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_BtlCoreComponent_C*           BtlCore                                                (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlMainConductor_C::GetBtlCore(class UBP_BtlCoreComponent_C** BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "GetBtlCore");

	Params::BP_BtlMainConductor_C_GetBtlCore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BtlCore != nullptr)
		*BtlCore = Parms.BtlCore;
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.GetTargetsManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_BtlTargetManager_C*           TargetsManager                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlMainConductor_C::GetTargetsManager(class UBP_BtlTargetManager_C** TargetsManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "GetTargetsManager");

	Params::BP_BtlMainConductor_C_GetTargetsManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetsManager != nullptr)
		*TargetsManager = Parms.TargetsManager;
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.GetMainAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           Btl_Character_Base                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlMainConductor_C::GetMainAction(class ABP_BtlCharacterBase_C** Btl_Character_Base)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "GetMainAction");

	Params::BP_BtlMainConductor_C_GetMainAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Btl_Character_Base != nullptr)
		*Btl_Character_Base = Parms.Btl_Character_Base;
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Setup Battle Camera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Setup_Battle_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Setup Battle Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Setup Battle Event
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Setup_Battle_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Setup Battle Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.GetEventControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_BtlEventAssistant_C*          Event_Assistant                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlMainConductor_C::GetEventControl(class ABP_BtlEventAssistant_C** Event_Assistant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "GetEventControl");

	Params::BP_BtlMainConductor_C_GetEventControl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Event_Assistant != nullptr)
		*Event_Assistant = Parms.Event_Assistant;
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.GetHero
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           HERO                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlMainConductor_C::GetHero(class ABP_BtlCharacterBase_C** HERO)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "GetHero");

	Params::BP_BtlMainConductor_C_GetHero Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HERO != nullptr)
		*HERO = Parms.HERO;
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.SetAllCharacterVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NotAffectGuest                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlMainConductor_C::SetAllCharacterVisible(bool Visible, bool NotAffectGuest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "SetAllCharacterVisible");

	Params::BP_BtlMainConductor_C_SetAllCharacterVisible Parms{};

	Parms.Visible = Visible;
	Parms.NotAffectGuest = NotAffectGuest;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Event Encount 
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Event_Encount_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Event Encount ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.SetBGLevelReference
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::SetBGLevelReference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "SetBGLevelReference");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Setup Battle Stuff
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Setup_Battle_Stuff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Setup Battle Stuff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.EliminateAllEnemies
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::EliminateAllEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "EliminateAllEnemies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.MakeLoadLevelName
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::MakeLoadLevelName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "MakeLoadLevelName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.AttachEnemiesToAnchor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::AttachEnemiesToAnchor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "AttachEnemiesToAnchor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.WaitAllCharacter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::WaitAllCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "WaitAllCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.SetupBattle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::SetupBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "SetupBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.CheckReadyPerformerData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ready                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlMainConductor_C::CheckReadyPerformerData(bool* Ready)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "CheckReadyPerformerData");

	Params::BP_BtlMainConductor_C_CheckReadyPerformerData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ready != nullptr)
		*Ready = Parms.Ready;
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.AttachPlayersToAnchor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::AttachPlayersToAnchor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "AttachPlayersToAnchor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.RestoreEnvironment
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::RestoreEnvironment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "RestoreEnvironment");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.SetFormationData
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::SetFormationData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "SetFormationData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.Start Loading Along With Battle Start
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::Start_Loading_Along_With_Battle_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "Start Loading Along With Battle Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.SetupBtlCoreToAllChara
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::SetupBtlCoreToAllChara()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "SetupBtlCoreToAllChara");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.RequestFightingBGM
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::RequestFightingBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "RequestFightingBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.SetBattleCameraToViewTarget
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::SetBattleCameraToViewTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "SetBattleCameraToViewTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.SetBattleCompToBtlCore
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlMainConductor_C::SetBattleCompToBtlCore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "SetBattleCompToBtlCore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.GetLevelPath
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Major                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Minor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString ABP_BtlMainConductor_C::GetLevelPath(const class FString& Major, const class FString& Minor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "GetLevelPath");

	Params::BP_BtlMainConductor_C_GetLevelPath Parms{};

	Parms.Major = std::move(Major);
	Parms.Minor = std::move(Minor);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BtlMainConductor.BP_BtlMainConductor_C.GetEnvLevelPath
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Major                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Minor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString ABP_BtlMainConductor_C::GetEnvLevelPath(const class FString& Major, const class FString& Minor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlMainConductor_C", "GetEnvLevelPath");

	Params::BP_BtlMainConductor_C_GetEnvLevelPath Parms{};

	Parms.Major = std::move(Major);
	Parms.Minor = std::move(Minor);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

