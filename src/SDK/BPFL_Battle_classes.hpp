#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Battle

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Xrd777_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_Battle.BPFL_Battle_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_Battle_C final : public UBlueprintFunctionLibrary
{
public:
	static void MakeCylinder(TArray<class ABtlActor*>& Targets, bool UseCommonCylinder, bool ModeSizeWeightingCylinder, class UObject* __WorldContext, struct FVector* Bottom_Center, float* Radius, float* Height);
	static void GetInitialTransform(class UObject* __WorldContext, struct FTransform* Trans);
	static void AddInt(int32& Value, int32 Add_Value, class UObject* __WorldContext);
	static void AddFloat(float& Value, float AddValue, class UObject* __WorldContext);
	static void Conv_Vec_to_CSV_string(const struct FVector& Location, class UObject* __WorldContext, class FString* String);
	static void Battle_Print_Error_String(const class FString& String, class UObject* __WorldContext);
	static void Battle_Print_Warning_String(const class FString& String, class UObject* __WorldContext);
	static void Battle_Print_Note_String(const class FString& String, class UObject* __WorldContext);
	static void CalculateCylinderLocation(TArray<class ABP_BtlCharacterBase_C*>& Character_List, float Radius_Ratio, float Height_Ratio, float Rotate_Degree, bool Use_Common_Cylinder, class UObject* __WorldContext, struct FVector* Location);
	static void CalcLoopIndex(int32 Value, int32 Max, class UObject* __WorldContext, int32* LoopIndex);
	static void Battle_Print_Log(const class FString& String, class UObject* __WorldContext);
	static struct FRotator BtlFindLookAtRotationFlat(class ABP_BtlCharacterBase_C* Character, class ABP_BtlCharacterBase_C* LookatCharacter, class UObject* __WorldContext);
	static void Get_Human_Notify(EBtlAnimNotify Selection, class FName DefaultNotifyName, class UObject* __WorldContext, class FName* Notify_Name);
	static void Get_Persona_Notify(EBtlAnimNotifyPersona Selection, class FName DefaultNotifyName, class UObject* __WorldContext, class FName* Notify_Name);
	static void Get_Shadow_Notify(EBtlAnimNotifyShadow Selection, class FName DefaultNotifyName, class UObject* __WorldContext, class FName* Notify_Name);
	static void VectorAnim(const struct FVector& Vec0, const struct FVector& Vec1, float Alpha, class UObject* __WorldContext, struct FVector* Vec);
	static struct FRotator BtlFindLookAtPosRotationFlat(class ABP_BtlCharacterBase_C* Character, const struct FVector& LookAtLocation, class UObject* __WorldContext);
	static void BtlRotateTurningTable(class UBtlCoreComponent* BtlCore, class ABtlActor* MainCharacter, bool TurntableForceReset, class UObject* __WorldContext);
	static void BtlRotateTurningTableRequest(class UBtlCoreComponent* BtlCore, class ABtlActor* MainCharacter, bool TurntableForceReset, class UObject* __WorldContext);
	static void BtlRotateEnemiesLookatMainChara(class UBtlCoreComponent* BtlCore, class ABtlActor* MainCharacter, class UObject* __WorldContext);
	static void CalcLevelSequencePlayTime(class ALevelSequenceActor* LS_Actor, class UObject* __WorldContext, float* AnimTime);
	static void Battle_Coordinate_Close_Formation(class UBtlCoreComponent* BtlCore, bool DependsOnEnemyTarget, class UObject* __WorldContext);
	static void CalcCylinderCenter(TArray<class ABtlActor*>& TargetList, bool UseCommonCylinder, class UObject* __WorldContext, struct FVector* CylinderCenter, struct FVector* SizeWeightingCenter);
	static void Get_Hit_Notify_Name(EBtlAnimNotifyHitEffect Selection, class UObject* __WorldContext, class FName* Notify_Name);
	static void Get_Hit_Notify_From_Name(const class FString& HitTypeName, class UObject* __WorldContext, EBtlAnimNotifyHitEffect* Notify_Name);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_Battle_C">();
	}
	static class UBPFL_Battle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_Battle_C>();
	}
};
static_assert(alignof(UBPFL_Battle_C) == 0x000008, "Wrong alignment on UBPFL_Battle_C");
static_assert(sizeof(UBPFL_Battle_C) == 0x000028, "Wrong size on UBPFL_Battle_C");

}

