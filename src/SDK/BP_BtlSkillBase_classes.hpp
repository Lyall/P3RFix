#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlSkillBase

#include "Basic.hpp"

#include "FBtlSkillRequest_structs.hpp"
#include "Engine_structs.hpp"
#include "FBtlSkillControl_structs.hpp"
#include "Xrd777_structs.hpp"
#include "Xrd777_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlSkillBase.BP_BtlSkillBase_C
// 0x0090 (0x0368 - 0x02D8)
class ABP_BtlSkillBase_C final : public ABtlSkill
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlay;                                            // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFBtlSkillControl>              SkillControl;                                      // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FFBtlSkillRequest>              SkillRequests;                                     // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         DeltaTime;                                         // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Skill_End;                                         // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBP_BtlTargetManager_C*                 Target_Manager;                                    // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSkillCamera;                                    // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         Level_Sequence;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACineCameraActor*                       Effect_Camera_;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    SkillCamera;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayWithSequence;                                  // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArrangedDestroyTime;                               // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CameraSnapToCharaRoot;                             // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Skill_End__DelegateSignature();
	void ExecuteUbergraph_BP_BtlSkillBase(int32 EntryPoint);
	void ReceiveBeginPlay();
	void On_Skill_Play_For_Test_Mode(class UBP_BtlTargetManager_C* TargetManager);
	void On_Destroy();
	void Skill_Destroy();
	void On_Skill_Play(class UBP_BtlTargetManager_C* Target_Manager_0, class UBP_BtlEnvironment_C* BtlEnv);
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void Request_VFX_to_Targets(const struct FBtlSkillParam& Skill_Paramater, TArray<class ABtlActor*>& Targets);
	void Request_VFX_to_Enchanter(const struct FBtlSkillParam& SkillParameter, class ABtlActor* Enchanter);
	void MonitorRequests();
	void RefleshRequests();
	void Request_VFX_to_field(const struct FBtlSkillParam& SkillParameter, class UBtlTargetsManagerComponent* TargetsPackage);
	void CalcLocation(TArray<class ABtlActor*>& Btl_Actor, EBtlSkillTargetType Target_Type, EBtlSkillPositionTargetType Position_Type, EBtlSkillPositionHeightType Position_Height_Type, EBtlSkillDirectionTargetType Direction, struct FVector* Location, struct FRotator* Rotation);
	void CalcCylinderLocation(class ABtlActor* Btl_Actor, EBtlSkillPositionHeightType Height_Type, struct FTransform* Trans);
	void TurningEnvironment(class UBP_BtlEnvironment_C* BtlEnv);
	void GetTargets(TArray<class ABP_BtlCharacterBase_C*>* CharaList);
	void CalcDestroyTime();
	void Calc_Additional_Location(class ABtlActor* Target, EBtlSkillDirectionTargetType Direction, EBtlSkillTargetType TargetType, struct FVector* Trans, struct FRotator* Rotate);
	void Request_VFX_to_Target_Group(const struct FBtlSkillParam& Skill_Paramater, TArray<class ABtlActor*>& Targets);
	void GetEnchanter(class ABP_BtlCharacterBase_C** Character);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlSkillBase_C">();
	}
	static class ABP_BtlSkillBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlSkillBase_C>();
	}
};
static_assert(alignof(ABP_BtlSkillBase_C) == 0x000008, "Wrong alignment on ABP_BtlSkillBase_C");
static_assert(sizeof(ABP_BtlSkillBase_C) == 0x000368, "Wrong size on ABP_BtlSkillBase_C");
static_assert(offsetof(ABP_BtlSkillBase_C, UberGraphFrame) == 0x0002D8, "Member 'ABP_BtlSkillBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, Camera) == 0x0002E0, "Member 'ABP_BtlSkillBase_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_BtlSkillBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, ElapsedTime) == 0x0002F0, "Member 'ABP_BtlSkillBase_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, IsPlay) == 0x0002F4, "Member 'ABP_BtlSkillBase_C::IsPlay' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, SkillControl) == 0x0002F8, "Member 'ABP_BtlSkillBase_C::SkillControl' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, SkillRequests) == 0x000308, "Member 'ABP_BtlSkillBase_C::SkillRequests' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, DeltaTime) == 0x000318, "Member 'ABP_BtlSkillBase_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, Skill_End) == 0x000320, "Member 'ABP_BtlSkillBase_C::Skill_End' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, Target_Manager) == 0x000330, "Member 'ABP_BtlSkillBase_C::Target_Manager' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, UseSkillCamera) == 0x000338, "Member 'ABP_BtlSkillBase_C::UseSkillCamera' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, Level_Sequence) == 0x000340, "Member 'ABP_BtlSkillBase_C::Level_Sequence' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, Effect_Camera_) == 0x000348, "Member 'ABP_BtlSkillBase_C::Effect_Camera_' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, SkillCamera) == 0x000350, "Member 'ABP_BtlSkillBase_C::SkillCamera' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, PlayWithSequence) == 0x000358, "Member 'ABP_BtlSkillBase_C::PlayWithSequence' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, ArrangedDestroyTime) == 0x00035C, "Member 'ABP_BtlSkillBase_C::ArrangedDestroyTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlSkillBase_C, CameraSnapToCharaRoot) == 0x000360, "Member 'ABP_BtlSkillBase_C::CameraSnapToCharaRoot' has a wrong offset!");

}

