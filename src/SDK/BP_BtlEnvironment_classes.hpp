#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlEnvironment

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Xrd777_structs.hpp"
#include "Xrd777_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlEnvironment.BP_BtlEnvironment_C
// 0x0168 (0x0240 - 0x00D8)
class UBP_BtlEnvironment_C final : public UBtlEnvironmentBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class FName>                           BGLevelName;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ASkyLight*>                      SkyLights;                                         // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ASpotLight*>                     SpotLights;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         SavedIntensity;                                    // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDarkAnim;                                        // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DarkElapsedTime;                                   // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DarkAnimRatio;                                     // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DarkAnimTime;                                      // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DarkIntensityRatio;                                // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OriginalIntensity;                                 // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DT_SkillEnv;                                       // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBtlSkillEnvParam                      BaseSkillEnv;                                      // 0x0138(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FBtlSkillEnvParam                      GoalSkillEnv;                                      // 0x0158(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 FldSky;                                            // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BGBlack;                                           // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharaDirLight_C*                    CharaLight;                                        // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideBGWhenDarkest;                                 // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisableEnvUpdate;                                  // 0x0191(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SaveAtmosphereFogVisible;                          // 0x0192(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SaveExponentialHeightFogVisible;                   // 0x0193(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SaveExposureCompensation;                          // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class ULightComponent*, float>           SaveLightIntensity;                                // 0x0198(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class USkyLightComponent*, float>        SaveSkyLightIntensity;                             // 0x01E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          CutinDirectionalLighrMoon;                         // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BtlEnvironment(int32 EntryPoint);
	void InvisibleHangedmanBGObj();
	void DeleteLoversFogEffect();
	void RequestLoversFogEffect();
	void Request_Dark_Env(float Anim_Time, const struct FBtlSkillEnvParam& SkillEnv, bool KeepCurrentLight, bool KeepCurrentFog, bool KeepCurrentBG, bool HideBGWithDarkParam);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void SetBGVisible(bool Visible);
	void GetMainLight(class ULightComponent** Light);
	void SaveCurrentMainLightParam();
	void Initialize();
	void SetLightIntensity(float Intensity);
	void CalcDarkLightIntensity(float AnimRatio);
	void SetDarkFog(float Power, float FogDistance, float GradationRange);
	void InitEnv();
	void Save_Current_Skill_Env();
	void CalcDarkFog(float ElapsedTime, bool* IsEnd);
	void RequestPreSkillEnv();
	void RestoreDefaultSkillEnv();
	void SetBGBlack(float Power);
	void CalcBGBlack(float ElapsedTime, bool* IsEnd);
	void ResetEnvironment();
	class AFldAnimObj* GetMonorailBGObj();
	TArray<class AFldAnimObj*> GetMonorailStrapObj();
	TArray<class AFldAnimObj*> GetMonorailWallObj();
	void SetFogCenter(const struct FVector& Center);
	void StopEnvironmentUpdate();
	TArray<class ANiagaraActor*> GetMonorailRushEffects();
	TArray<class ANiagaraActor*> GetNyxAvatarFeatherEffects();
	TArray<class ANiagaraActor*> GetLoversFogEffects();
	void ResumeEnvironmentUpdate();
	void Set_Visible_Field_Effect(class ANiagaraActor* Niagara, bool Visible);
	void SetFogInvisible();
	void RestoreFogPower();
	void SetAlloutEnvironment();
	void ResetAlloutEnvionment();
	void SetCutinEnviroment();
	void ResetCutinEnviroment();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlEnvironment_C">();
	}
	static class UBP_BtlEnvironment_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BtlEnvironment_C>();
	}
};
static_assert(alignof(UBP_BtlEnvironment_C) == 0x000008, "Wrong alignment on UBP_BtlEnvironment_C");
static_assert(sizeof(UBP_BtlEnvironment_C) == 0x000240, "Wrong size on UBP_BtlEnvironment_C");
static_assert(offsetof(UBP_BtlEnvironment_C, UberGraphFrame) == 0x0000D8, "Member 'UBP_BtlEnvironment_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, BGLevelName) == 0x0000E0, "Member 'UBP_BtlEnvironment_C::BGLevelName' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, SkyLights) == 0x0000F0, "Member 'UBP_BtlEnvironment_C::SkyLights' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, SpotLights) == 0x000100, "Member 'UBP_BtlEnvironment_C::SpotLights' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, SavedIntensity) == 0x000110, "Member 'UBP_BtlEnvironment_C::SavedIntensity' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, IsDarkAnim) == 0x000114, "Member 'UBP_BtlEnvironment_C::IsDarkAnim' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, DarkElapsedTime) == 0x000118, "Member 'UBP_BtlEnvironment_C::DarkElapsedTime' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, DarkAnimRatio) == 0x00011C, "Member 'UBP_BtlEnvironment_C::DarkAnimRatio' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, DarkAnimTime) == 0x000120, "Member 'UBP_BtlEnvironment_C::DarkAnimTime' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, DarkIntensityRatio) == 0x000124, "Member 'UBP_BtlEnvironment_C::DarkIntensityRatio' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, OriginalIntensity) == 0x000128, "Member 'UBP_BtlEnvironment_C::OriginalIntensity' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, DT_SkillEnv) == 0x000130, "Member 'UBP_BtlEnvironment_C::DT_SkillEnv' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, BaseSkillEnv) == 0x000138, "Member 'UBP_BtlEnvironment_C::BaseSkillEnv' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, GoalSkillEnv) == 0x000158, "Member 'UBP_BtlEnvironment_C::GoalSkillEnv' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, FldSky) == 0x000178, "Member 'UBP_BtlEnvironment_C::FldSky' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, BGBlack) == 0x000180, "Member 'UBP_BtlEnvironment_C::BGBlack' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, CharaLight) == 0x000188, "Member 'UBP_BtlEnvironment_C::CharaLight' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, HideBGWhenDarkest) == 0x000190, "Member 'UBP_BtlEnvironment_C::HideBGWhenDarkest' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, DisableEnvUpdate) == 0x000191, "Member 'UBP_BtlEnvironment_C::DisableEnvUpdate' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, SaveAtmosphereFogVisible) == 0x000192, "Member 'UBP_BtlEnvironment_C::SaveAtmosphereFogVisible' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, SaveExponentialHeightFogVisible) == 0x000193, "Member 'UBP_BtlEnvironment_C::SaveExponentialHeightFogVisible' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, SaveExposureCompensation) == 0x000194, "Member 'UBP_BtlEnvironment_C::SaveExposureCompensation' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, SaveLightIntensity) == 0x000198, "Member 'UBP_BtlEnvironment_C::SaveLightIntensity' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, SaveSkyLightIntensity) == 0x0001E8, "Member 'UBP_BtlEnvironment_C::SaveSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(UBP_BtlEnvironment_C, CutinDirectionalLighrMoon) == 0x000238, "Member 'UBP_BtlEnvironment_C::CutinDirectionalLighrMoon' has a wrong offset!");

}

