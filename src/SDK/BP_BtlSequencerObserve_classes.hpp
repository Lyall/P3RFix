#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlSequencerObserve

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Xrd777_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlSequencerObserve.BP_BtlSequencerObserve_C
// 0x0028 (0x02A0 - 0x0278)
class ABP_BtlSequencerObserve_C final : public ABtlSequencerObserve
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlEventAssistant_C*                BtlEventAssistant;                                 // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartObserve;                                    // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BtlSequencerObserve(int32 EntryPoint);
	void SetParam(class ALevelSequenceActor* InSequenceActor, bool InStart);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Set_Paramater(class ALevelSequenceActor* SequenceActor, bool IsStart);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlSequencerObserve_C">();
	}
	static class ABP_BtlSequencerObserve_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlSequencerObserve_C>();
	}
};
static_assert(alignof(ABP_BtlSequencerObserve_C) == 0x000008, "Wrong alignment on ABP_BtlSequencerObserve_C");
static_assert(sizeof(ABP_BtlSequencerObserve_C) == 0x0002A0, "Wrong size on ABP_BtlSequencerObserve_C");
static_assert(offsetof(ABP_BtlSequencerObserve_C, UberGraphFrame) == 0x000278, "Member 'ABP_BtlSequencerObserve_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlSequencerObserve_C, DefaultSceneRoot) == 0x000280, "Member 'ABP_BtlSequencerObserve_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BtlSequencerObserve_C, LevelSequenceActor) == 0x000288, "Member 'ABP_BtlSequencerObserve_C::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_BtlSequencerObserve_C, BtlEventAssistant) == 0x000290, "Member 'ABP_BtlSequencerObserve_C::BtlEventAssistant' has a wrong offset!");
static_assert(offsetof(ABP_BtlSequencerObserve_C, IsStartObserve) == 0x000298, "Member 'ABP_BtlSequencerObserve_C::IsStartObserve' has a wrong offset!");

}

