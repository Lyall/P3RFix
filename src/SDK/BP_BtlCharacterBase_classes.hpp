#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlCharacterBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Xrd777_structs.hpp"
#include "Xrd777_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlCharacterBase.BP_BtlCharacterBase_C
// 0x0278 (0x10CD0 - 0x10A58)
class ABP_BtlCharacterBase_C : public ABtlActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x10A58(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        CharacterRoot;                                     // 0x10A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlResidentDataComp_C*              BP_BtlResidentDataComp;                            // 0x10A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlCharacterTidy_C*                 BP_BtlCharacterTidy;                               // 0x10A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CylinderCommon;                                    // 0x10A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlSkillGeneratorComponent*            BtlSkillGenerator;                                 // 0x10A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x10A88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TL_Body_Shake_MoveY_B29803974D53F6B7A872D0B55DF2F8E5; // 0x10A90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_Body_Shake__Direction_B29803974D53F6B7A872D0B55DF2F8E5; // 0x10A94(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A95[0x3];                                    // 0x10A95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_Body_Shake;                                     // 0x10A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_End_Action_Turn;                                // 0x10AA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_BtlSkillBase_C*                     SkillData;                                         // 0x10AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlCameraManagerComponent_C*        BtlCameraManager;                                  // 0x10AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlTargetManager_C*                 BtlTargetsManager;                                 // 0x10AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActiveTurnCharacter;                             // 0x10AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10AC9[0x7];                                    // 0x10AC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlCoreComponent*                      Btl_Core;                                          // 0x10AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadedSkill;                                       // 0x10AD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FinishedPersonaSkillCamera;                        // 0x10AD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10ADA[0x6];                                    // 0x10ADA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    Persona_Skill_Camera;                              // 0x10AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AppCharacter_C*                     AppCharacter;                                      // 0x10AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x10AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10AF1[0x7];                                    // 0x10AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Anim_Montage;                                      // 0x10AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Anim_Section;                                      // 0x10B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PersonaLoaded;                                     // 0x10B08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CutinLoaded;                                       // 0x10B09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B0A[0x6];                                    // 0x10B0A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCutinController_C*               CutinController;                                   // 0x10B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayingCutin;                                      // 0x10B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCutinPerformance;                                // 0x10B19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B1A[0x6];                                    // 0x10B1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BtlEnvironment_C*                   BtlEnvironment;                                    // 0x10B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AttackAnimFinished;                                // 0x10B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AttackEffectFinished;                              // 0x10B29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B2A[0x6];                                    // 0x10B2A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HitEffectTrans;                                    // 0x10B30(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DynamicSkillCamMode;                               // 0x10B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBtlAnimationType                             LatestPlayedAnim;                                  // 0x10B61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B62[0x6];                                    // 0x10B62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BtlGuiComponent_C*                  BtlGui;                                            // 0x10B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotifiedHit;                                       // 0x10B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPersonaSummoner;                                 // 0x10B71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B72[0x6];                                    // 0x10B72(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CylinderTable;                                     // 0x10B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlActionManager_C*                 BtlActionManager;                                  // 0x10B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallShadowSkillShot;                               // 0x10B88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B89[0x7];                                    // 0x10B89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             VisualTable;                                       // 0x10B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallShadowSkillCamChange;                          // 0x10B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CallShadowSkillChantFinish;                        // 0x10B99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SummonSkill;                                       // 0x10B9A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SummonSkill_DataLoaded;                            // 0x10B9B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          KeepHidingMode;                                    // 0x10B9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayedSkillCamera;                                 // 0x10B9D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B9E[0x2];                                    // 0x10B9E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialBlendIN;                                    // 0x10BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialBlendOut;                                   // 0x10BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FinishPersonaSummon;                               // 0x10BA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10BA9[0x3];                                    // 0x10BA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Anim_Section_Latest;                               // 0x10BAC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10BB4[0x4];                                    // 0x10BB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LSTakeover;                                        // 0x10BB8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class ALevelSequenceActor*                    TakeoverActor;                                     // 0x10BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlEvent_C*                         BtlEvent;                                          // 0x10BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Anim_Section_Previous_Frame;                       // 0x10BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Anim_Section_Current_Frame;                        // 0x10BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeAddPos;                                       // 0x10C00(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C0C[0x4];                                    // 0x10C0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCallWeaponVisibility;                            // 0x10C10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnCallGunVisibility;                               // 0x10C20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                LocRunStart;                                       // 0x10C30(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocRunGoal;                                        // 0x10C3C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttackRunning;                                   // 0x10C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10C49[0x3];                                    // 0x10C49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Run_CMpS;                                          // 0x10C4C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunCurrentMoveLen;                                 // 0x10C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunGoalMoveLen;                                    // 0x10C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunMaxLenForAttack;                                // 0x10C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacking;                                       // 0x10C5C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBtlAnimationType                             Selection;                                         // 0x10C5D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C5E[0x2];                                    // 0x10C5E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RunElapsedTime;                                    // 0x10C60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocBackstepStart;                                  // 0x10C64(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocBackstepGoal;                                   // 0x10C70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBackstepping;                                    // 0x10C7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10C7D[0x3];                                    // 0x10C7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackstepElapsedTime;                               // 0x10C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackstepGoalMoveLen;                               // 0x10C84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackstepCurrentMoveLen;                            // 0x10C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Backstep_CMpS;                                     // 0x10C8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackstepMaxLen;                                    // 0x10C90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBackstepLanding;                                 // 0x10C94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RequestPlaySkill;                                  // 0x10C95(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10C96[0x2];                                    // 0x10C96(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEscapeFinish;                                    // 0x10C98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAppCharacterComp*                      App_Character_Comp;                                // 0x10CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadAnimSync;                                      // 0x10CB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNeedToDelayBeforeCutin;                          // 0x10CB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNeedToDelayBeforeSkill;                          // 0x10CB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Force_Show_Weapon;                              // 0x10CB3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RunDelayTime;                                      // 0x10CB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Force_Hide_Weapon;                              // 0x10CB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CalledSkillShotEnd;                                // 0x10CB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsKeepAnimWhenInvisible;                           // 0x10CBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFirstSummonCutin;                                // 0x10CBB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AnimChangeDetectorRemainingWaitTime;               // 0x10CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInMontageUpdate;                                 // 0x10CC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10CC1[0x3];                                    // 0x10CC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialForcedLOD;                                  // 0x10CC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreCoordinatingAnimSpeed;                       // 0x10CC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLastRequestChantAnimation;                       // 0x10CC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSkillShotDelayed;                                // 0x10CCA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void On_End_Action_Turn__DelegateSignature();
	void OnCallWeaponVisibility__DelegateSignature(bool Visible);
	void OnCallGunVisibility__DelegateSignature(bool Visible);
	void OnEscapeFinish__DelegateSignature();
	void ExecuteUbergraph_BP_BtlCharacterBase(int32 EntryPoint);
	void PlayWaitAnimation(float StartingPosition, bool UseBlendSetting, float Blend, bool IgnoreWhenSamePose);
	void Has_Finished_Bad_Status_Damage_Scene();
	void EnemiesLookatThisCharacter();
	void On_Finish_Act_Turn_to_End_Proc();
	void SetupForEventMode(bool Enable);
	void SetVisibleFromCode(bool Visible);
	void ResetAlongWithRelocation();
	void ReceiveTick(float DeltaSeconds);
	void PlayAbsorptionEffect();
	void PlayReflectionEffect();
	void SetStatusColor(const struct FColor& Color);
	void EndWaitTurn();
	void ShowFromHiding();
	void HideForOtherAction(bool CriticalHindrance, bool Rapid, bool HalfMode);
	void ToEndTurn();
	void DestroyEffect(class UNiagaraComponent* PNiagara);
	void On_Finish_Act_Turn();
	void On_Receive_Act_Command();
	void ReceiveBeginPlay();
	void Has_Finished_Act_Start_Event();
	void On_Prepare_Initiate_Turn();
	void On_Character_Act_Command();
	void On_Play_Skill_Camera_From_Special_Action();
	void On_Prepare_Skill_Delayed();
	void On_Play_Skill_Camera_From_Theurgia();
	void On_Play_Skill_Camera_From_Item();
	void On_Finalize_Cutin();
	void Has_Notified_Play_Skill_Camera();
	void Has_Notified_Shift_Show_Skill();
	void Has_Finished_Cutin();
	void Has_Finished_Persona_Skill_Camera();
	void Has_Finished_Skill_Load();
	void Has_Finished_Skill_Effect();
	void On_Prepare_Skill();
	void On_Chant_Skill();
	void Has_Finished_Cutin_Loading();
	void Has_Finished_Persona_Loading_For_Cutin();
	void Play_Command_Wait_Loop_Animation(bool UseAutoBlend, bool ForceToPlay);
	void On_Request_Attack_From_Event_();
	void On_Play_Skill_Without_Persona();
	void Request_Wait_Animation(bool UseManualBlend, float Blend, bool UseAutoBlend, bool ForceToPlay);
	void RequestPersonalAnimation();
	void StopShakeAnim();
	void PlayShakeAnim();
	void On_Play_Item_Use_Animation();
	void Has_Finished_Persona_Summon();
	void On_Request_Shadow_Skill_Chant();
	void On_Request_Shadow_Skill_Shot();
	void On_Request_Attack_Animation(bool NotPlayWeaponAnim);
	void On_Request_Summon_Act_Animation();
	void RequestAnimationWithNext(EBtlAnimationType AnimType, EBtlAnimationType AnimNextType);
	void RequestAnimation(EBtlAnimationType AnimType, float StartingPosition, bool UseBlendSetting, float Blend);
	void Has_Finished_Attack_From_Event();
	void Update_Backstep_From_Attack(float DeltaTime);
	void Update_Run_For_Attack(float DeltaTime);
	void On_Play_Attack_Performance();
	void On_Interrupt_Attack();
	void Has_Finished_Attack_Effect();
	void Has_Finished_Attack_Anim();
	void On_Play_Attack_Hit(const class FString& HitType);
	void RequestDamageAndDeadPerformance();
	void On_Play_Dead_Performance(bool ShortMode);
	void On_Start_Guard();
	void On_Start_Takeover();
	void Show_Summon_Fadein();
	void Has_Notified_Play_Summon_Camera_();
	void Has_Notified_Summon();
	void Has_Finished_Summon_Data_Load();
	void On_BadStatus_Damage_Scene();
	void RequestAddStatusEffect(EBtlBadStatusIcon Type);
	void RequestHidePlayersForEspaceSkill();
	void On_Escape_From_Command();
	void On_Escape_Affect();
	void On_Character_Escaping();
	void On_Escape();
	void On_Failure_Wait();
	void On_Overheat();
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE959A7C6C(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE959A7C6C(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE959A7C6C(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE959A7C6C(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE959A7C6C(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEB4660BD0(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEB4660BD0(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEB4660BD0(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEB4660BD0(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEB4660BD0(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE2BFB25E5(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE2BFB25E5(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE2BFB25E5(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE2BFB25E5(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE2BFB25E5(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEBE111C78(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEBE111C78(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEBE111C78(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEBE111C78(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEBE111C78(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE6487059F(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE6487059F(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE6487059F(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE6487059F(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE6487059F(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE4233FF67(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE4233FF67(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE4233FF67(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE4233FF67(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE4233FF67(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEC2B102C7(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEC2B102C7(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEC2B102C7(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEC2B102C7(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEC2B102C7(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE36E3EACB(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE36E3EACB(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE36E3EACB(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE36E3EACB(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE36E3EACB(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE3568FB09(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE3568FB09(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE3568FB09(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE3568FB09(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE3568FB09(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEB4A5C246(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEB4A5C246(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEB4A5C246(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEB4A5C246(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEB4A5C246(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE52ED0CCE(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE52ED0CCE(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE52ED0CCE(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE52ED0CCE(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE52ED0CCE(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEC93DA035(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEC93DA035(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEC93DA035(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEC93DA035(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEC93DA035(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE085463A4(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE085463A4(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE085463A4(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE085463A4(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE085463A4(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEF644ECEB(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEF644ECEB(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEF644ECEB(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEF644ECEB(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEF644ECEB(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE1CBC4401(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE1CBC4401(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE1CBC4401(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE1CBC4401(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE1CBC4401(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE3CCDCEB1(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE3CCDCEB1(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE3CCDCEB1(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE3CCDCEB1(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE3CCDCEB1(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEACF678DE(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEACF678DE(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEACF678DE(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEACF678DE(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEACF678DE(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE26D8D2CE(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE26D8D2CE(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE26D8D2CE(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE26D8D2CE(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE26D8D2CE(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEBD46534F(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEBD46534F(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEBD46534F(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEBD46534F(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEBD46534F(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE275C7628(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE275C7628(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE275C7628(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE275C7628(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE275C7628(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE99B84275(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE99B84275(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE99B84275(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE99B84275(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE99B84275(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE6BEA06BA(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE6BEA06BA(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE6BEA06BA(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE6BEA06BA(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE6BEA06BA(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEB1172878(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEB1172878(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEB1172878(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEB1172878(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEB1172878(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEADF90FAF(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEADF90FAF(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEADF90FAF(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEADF90FAF(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEADF90FAF(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE1445DF49(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE1445DF49(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE1445DF49(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE1445DF49(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE1445DF49(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE7D6DF3EA(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE7D6DF3EA(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE7D6DF3EA(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE7D6DF3EA(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE7D6DF3EA(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE98C34F75(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE98C34F75(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE98C34F75(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE98C34F75(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE98C34F75(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE2561F0D0(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE2561F0D0(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE2561F0D0(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE2561F0D0(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE2561F0D0(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE4A3D7C4B(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE4A3D7C4B(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE4A3D7C4B(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE4A3D7C4B(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE4A3D7C4B(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BEAE0D0B31(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BEAE0D0B31(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BEAE0D0B31(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BEAE0D0B31(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BEAE0D0B31(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE0C9DA657(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE0C9DA657(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE0C9DA657(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE0C9DA657(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE0C9DA657(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE12425A80(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE12425A80(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE12425A80(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE12425A80(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE12425A80(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE11F3A4AF(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE11F3A4AF(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE11F3A4AF(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE11F3A4AF(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE11F3A4AF(class FName NotifyName);
	void OnCompleted_D5F10E1C4A2F3D29069CB1BE6C29F8BD(class FName NotifyName);
	void OnBlendOut_D5F10E1C4A2F3D29069CB1BE6C29F8BD(class FName NotifyName);
	void OnInterrupted_D5F10E1C4A2F3D29069CB1BE6C29F8BD(class FName NotifyName);
	void OnNotifyBegin_D5F10E1C4A2F3D29069CB1BE6C29F8BD(class FName NotifyName);
	void OnNotifyEnd_D5F10E1C4A2F3D29069CB1BE6C29F8BD(class FName NotifyName);
	void TL_Body_Shake__UpdateFunc();
	void TL_Body_Shake__FinishedFunc();
	void Standby_Skill();
	void GetCylinderCommon(bool UseCommonCylinder, struct FVector* CenterBottom, float* Radius, float* Height, struct FVector* CenterCylinder, struct FVector* LocalCylinderLocation);
	void SetVisible(bool Visible, bool KeepAnim);
	void Finalize_Skill_Phase();
	void GetCharacterRoot(class USceneComponent** Scene);
	void GetShowActor(class AActor** Showing_Actor);
	void GetSkeletalMesh(class USkeletalMeshComponent** SkeletalMesh);
	void Shift_Skill_Phase();
	bool CheckReadyCharacterBP();
	void ShowSummonActEffect();
	void SetupSkillData();
	void ShiftAttackPhase();
	void GetHitEffect(EBtlAnimNotifyHitEffect HitType, class UNiagaraSystem** HitEffect);
	struct FTransform Get_Attack_Effect_Transform(class ABP_BtlCharacterBase_C* Target);
	void SetEquipVisibility(class FName AnimSection, bool ForceHide, bool ForceShowWeapon, bool ForceHideWeapon);
	void GetSummonGunBP(class ABP_BtlSummonGun_C** Gun);
	void GetAttackMontageName(class FName* Attack);
	void HaltCameraAnimation();
	void RotateCharacter(class ABP_BtlCharacterBase_C* LookatCharacter);
	void GetSkillCameraType(EBtlSkillCameraType* Type);
	bool CheckSkillCameraAnimation();
	void SetupAttackingEnemyVisual();
	void BeginDeadPhase(bool IsDown_0);
	struct FTransform GetSocketTransform(class FName InSocketName);
	void GetCharacterEffectScale(float* ScaleValue);
	void DestroySkillCamera();
	class UBtlActionManagerComponent* GetActionManager();
	void Proc_Down_Effect(EBtlAnimationType Type);
	void CreateEffectAtSocket(class UNiagaraSystem* SystemTemplate, class FName SocketName, class ABP_BtlEffectIcon_C** Parent, class UNiagaraComponent** NiagaraEffect);
	void AutoNotifyProcess(class FName NotifyName);
	void SetWeaponVisible(bool Visible);
	void SetGunVisible(bool Visible);
	void RootSocketName(class FName* Socket);
	void RegisterUtensilEffect(class UNiagaraComponent* Niagara);
	void ShiftGuardPhase();
	void ShiftTakeover();
	void GetCylinderTypeName(bool UseCommon, class FName* Name_0);
	void SetupCylinderCollision();
	void GetCharacterScale(struct FVector* Scale);
	void GetCharacterScaleFloat(float* Scale);
	void SetOtherCharacterVisible(bool Visible, bool TargetOnlyOpponent);
	void RotateCharacterAt(const struct FVector& Lookat);
	void RotateLookAtTargetsCenter();
	void RotateSkillPhase();
	void CheckEnableBackShotCamera(bool* Enable);
	void RegisterPersonaOwner();
	void Standby_Summon_Skill();
	void Shift_Summon_Skill_Phase();
	void InitStartTurn();
	void ShiftWait();
	void Initialize();
	void CheckInAllout(bool* Result);
	void GetMaterials(TArray<class UMaterialInstanceDynamic*>* MaterialInstance);
	void SetUIColor(const struct FColor& Color, float Alpha);
	void ProcPersonaSummonFinish();
	void ShiftItemPhase();
	EBtlAnimationType GetCurrentAnimation();
	void Proc_BadStatus_Effect(EBtlBadStatusIcon Type);
	void SetBodyColor(const struct FColor& Color);
	void GetBadStatusSocket(EBtlBadStatusIcon Type, class FName* SocketName);
	void ShiftEscape();
	void OtherEnemiesLookAtTarget();
	void PlayWeaponAttackAnim(EBtlAnimationType Type);
	void PlayAttackSE(EBtlAnimNotifyHitEffect Type);
	void GetFrontEffectAdditionalPos(struct FVector* AddWorldPos);
	struct FTransform Get_Hit_Effect_Transform(class ABP_BtlCharacterBase_C* Target);
	void SetupActCommand();
	void ShiftTheurgia();
	void ArrangeAnimBlend(bool UseCustomBlend, float Blend);
	void Play_Weapon_Animation(class UAnimSequenceBase* Anim_Sequence);
	void SetupEventAnimation(bool Enable);
	void GetVisualTable(struct FBtlCharacterVisual* VisualTable_0);
	void PlayAttackAdditionalSE(EBtlDataAttr Attr);
	void PlayAttackHitSequence();
	void Setup_Attack_Performance_Situation();
	void Coordinate_Run_for_Attack();
	void StartRun();
	void ChoiceAttackSection(EBtlAnimationType* AnimType);
	void PlayAttackHitEffect(const class FString& HitType);
	void CalcAttackRunSpeed(float ElapsedTime, float DelayTime, float* SpeedCmpS);
	void AttackerAndTargetsLookAtEachOther();
	void GetSkillShotSectionName(class FName* Section_Name, bool* Found);
	void ShiftFailureWait();
	void CheckVisible(bool* Visible);
	void Coordinate_Backstep_From_Attack();
	void Start_Backstep_Loop();
	void CalcBackstepSpeed(float ElapsedTime, float* SpeedCmpS);
	void CheckAttackWithMove(bool* AttackWithMove);
	void Check_Need_To_Attack_Anim_Blendout(bool* Need);
	void ArrangeAnimBlendOut(bool UseCustomBlend, float Blend);
	void GetOpacity(float* Opacity);
	void GetBackstepStartLocation(struct FVector* LocAttackRunStart);
	void GetWeaponList(TArray<class AAppCharWeaponBase*>* Weapon);
	void CoordinateAnimationSpeed();
	void MakeAttackHitTransform(struct FTransform* Trans);
	struct FTransform GetBustupSocket();
	void HidePersonaBySkillScene();
	bool ConvAnimTypeToName(const EBtlAnimationType Key, class FName* Value);
	void SetHeadLookatForTopUI(class ABtlActor* LookAtTarget, const class FString& TargetSocket);
	void DisableHeadLookat(bool ForceHeadReset);
	void PlayFaceAnimationFromBodyAnim(class FName Section);
	void GetAppCharacterComp(class UAppCharacterComp** App_Character_Comp_0);
	void GetAppCharacterActor(class ABP_CharacterBase_C** Character);
	void SyncDeadAnim(bool* Dead);
	void SetVisibleEuqipFunc(bool NewVisibility);
	void SetVisibleExceptPersona(bool Visible, bool KeepAnim);
	void PlayAttackCamera();
	void PlayCriticalAttackCamera();
	void PlayAttackCharaCutCamera(int32 CutNumber);
	class UAppCharBaseComp* GetCharaBPFromCode();
	void Conv_Attack_Section(EBtlAnimationType Type, EBtlAnimationType* ConvedType);
	void PlaySkillShotCam();
	void GetHitSENo(EBtlAnimNotifyHitEffect Type, int32* SENo);
	struct FVector CalcClosedStandLocation(class UBtlCoreComponent* PCore, const struct FVector& Pos, float StandRange, bool CoordinateFromEnemyCenter);
	void CoordinateAttackSE(EBtlAnimNotifyHitEffect Type, int32* Se);
	void GetHitEffectEX(EBtlAnimNotifyHitEffect HitType, TSoftObjectPtr<class UNiagaraSystem>* VFX);
	void ShowTheurgiaGun(bool TheurgiaToTurnEnd);
	void OtherEnemiesLookAt();
	void GetAnimMontage(class UAnimMontage** Anim_Montage_0);
	void StopFaceAnimation();
	void Play_Specific_Attack_Camera();
	void GetMaxRunLenForAttack(float* Length);
	void Check_Need_to_Finailze_Attack_Turn(bool* Finazlie);
	void CalcAttackDelayTime(float* Delay);
	void GetHitAttrAdditonalEffect(EBtlDataAttr Attr, TSoftObjectPtr<class UNiagaraSystem>* VFX);
	void PlayFaceAnimation(EAppCharFaceAnimID Type, float BlendIn, float BlendOut, bool ForceNoBlink);
	void SetEquipVisibilityAuto(class FName SectionName);
	void PlayWeaponAnimFromType(EAppCharWeaponAnimType Type, float BlendInTime, float BlendOutTime);
	void PlayFirstSummonScene();
	void Check_First_Summon_Scene_Finished(bool* Finished);
	void Check_Need_To_Show_Action_Name_With_Action(bool* Show);
	class UBtlTargetsManagerComponent* GetTargetsManager();
	void PlaySkillActEffect();
	void CheckNeedToShowPersonaAtSummonShot(bool* Show);
	void GetPersonaBP(class ABP_BtlPersonaBase_C** BP_Btl_Persona);
	void GetEnemyAttackWaitTime(float* Seconds);
	void GetFrontToCamEffectAdditionalPos(struct FVector* AddWorldPos);
	struct FTransform GetSocketTransformFromCpp(class FName SocketName);
	void Hide_Persona_with_effect();
	void PlaySkillEndAnim();
	void ProcBeforeSwitchEachAction();
	void SetupAnimRequestInfo(class FName Anim_Section_New);
	void MonitorLoopAnimThrough(bool* Through);
	void CoordinateRequestAnimPose();
	class UNiagaraSystem* Get_Hit_Resident_Effect(EBtlAnimNotifyHitEffect Type, bool* Found);
	void SaveLODParam();
	void DisableLOD();
	void RestoreLOD();
	void StopAnimation();
	void FinalizeAttackRun();
	void RearrangeAnimSectionLatestName(class FName AnimSectionNameToPlay);
	void AnimRequestCheck(EBtlAnimationType A);
	void GetSkillShotDelayTime(float* DelayTime);
	void SkillShotDelay(float* DelayTime);

	bool CheckShakingWhenDownDamage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlCharacterBase_C">();
	}
	static class ABP_BtlCharacterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlCharacterBase_C>();
	}
};
static_assert(alignof(ABP_BtlCharacterBase_C) == 0x000010, "Wrong alignment on ABP_BtlCharacterBase_C");
static_assert(sizeof(ABP_BtlCharacterBase_C) == 0x010CD0, "Wrong size on ABP_BtlCharacterBase_C");
static_assert(offsetof(ABP_BtlCharacterBase_C, UberGraphFrame) == 0x010A58, "Member 'ABP_BtlCharacterBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, CharacterRoot) == 0x010A60, "Member 'ABP_BtlCharacterBase_C::CharacterRoot' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BP_BtlResidentDataComp) == 0x010A68, "Member 'ABP_BtlCharacterBase_C::BP_BtlResidentDataComp' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BP_BtlCharacterTidy) == 0x010A70, "Member 'ABP_BtlCharacterBase_C::BP_BtlCharacterTidy' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, CylinderCommon) == 0x010A78, "Member 'ABP_BtlCharacterBase_C::CylinderCommon' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BtlSkillGenerator) == 0x010A80, "Member 'ABP_BtlCharacterBase_C::BtlSkillGenerator' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, DefaultSceneRoot) == 0x010A88, "Member 'ABP_BtlCharacterBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, TL_Body_Shake_MoveY_B29803974D53F6B7A872D0B55DF2F8E5) == 0x010A90, "Member 'ABP_BtlCharacterBase_C::TL_Body_Shake_MoveY_B29803974D53F6B7A872D0B55DF2F8E5' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, TL_Body_Shake__Direction_B29803974D53F6B7A872D0B55DF2F8E5) == 0x010A94, "Member 'ABP_BtlCharacterBase_C::TL_Body_Shake__Direction_B29803974D53F6B7A872D0B55DF2F8E5' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, TL_Body_Shake) == 0x010A98, "Member 'ABP_BtlCharacterBase_C::TL_Body_Shake' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, On_End_Action_Turn) == 0x010AA0, "Member 'ABP_BtlCharacterBase_C::On_End_Action_Turn' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, SkillData) == 0x010AB0, "Member 'ABP_BtlCharacterBase_C::SkillData' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BtlCameraManager) == 0x010AB8, "Member 'ABP_BtlCharacterBase_C::BtlCameraManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BtlTargetsManager) == 0x010AC0, "Member 'ABP_BtlCharacterBase_C::BtlTargetsManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsActiveTurnCharacter) == 0x010AC8, "Member 'ABP_BtlCharacterBase_C::IsActiveTurnCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Btl_Core) == 0x010AD0, "Member 'ABP_BtlCharacterBase_C::Btl_Core' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, LoadedSkill) == 0x010AD8, "Member 'ABP_BtlCharacterBase_C::LoadedSkill' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, FinishedPersonaSkillCamera) == 0x010AD9, "Member 'ABP_BtlCharacterBase_C::FinishedPersonaSkillCamera' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Persona_Skill_Camera) == 0x010AE0, "Member 'ABP_BtlCharacterBase_C::Persona_Skill_Camera' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, AppCharacter) == 0x010AE8, "Member 'ABP_BtlCharacterBase_C::AppCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsPlayer) == 0x010AF0, "Member 'ABP_BtlCharacterBase_C::IsPlayer' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Anim_Montage) == 0x010AF8, "Member 'ABP_BtlCharacterBase_C::Anim_Montage' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Anim_Section) == 0x010B00, "Member 'ABP_BtlCharacterBase_C::Anim_Section' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, PersonaLoaded) == 0x010B08, "Member 'ABP_BtlCharacterBase_C::PersonaLoaded' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, CutinLoaded) == 0x010B09, "Member 'ABP_BtlCharacterBase_C::CutinLoaded' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, CutinController) == 0x010B10, "Member 'ABP_BtlCharacterBase_C::CutinController' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, PlayingCutin) == 0x010B18, "Member 'ABP_BtlCharacterBase_C::PlayingCutin' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsCutinPerformance) == 0x010B19, "Member 'ABP_BtlCharacterBase_C::IsCutinPerformance' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BtlEnvironment) == 0x010B20, "Member 'ABP_BtlCharacterBase_C::BtlEnvironment' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, AttackAnimFinished) == 0x010B28, "Member 'ABP_BtlCharacterBase_C::AttackAnimFinished' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, AttackEffectFinished) == 0x010B29, "Member 'ABP_BtlCharacterBase_C::AttackEffectFinished' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, HitEffectTrans) == 0x010B30, "Member 'ABP_BtlCharacterBase_C::HitEffectTrans' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, DynamicSkillCamMode) == 0x010B60, "Member 'ABP_BtlCharacterBase_C::DynamicSkillCamMode' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, LatestPlayedAnim) == 0x010B61, "Member 'ABP_BtlCharacterBase_C::LatestPlayedAnim' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BtlGui) == 0x010B68, "Member 'ABP_BtlCharacterBase_C::BtlGui' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, NotifiedHit) == 0x010B70, "Member 'ABP_BtlCharacterBase_C::NotifiedHit' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsPersonaSummoner) == 0x010B71, "Member 'ABP_BtlCharacterBase_C::IsPersonaSummoner' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, CylinderTable) == 0x010B78, "Member 'ABP_BtlCharacterBase_C::CylinderTable' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BtlActionManager) == 0x010B80, "Member 'ABP_BtlCharacterBase_C::BtlActionManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, CallShadowSkillShot) == 0x010B88, "Member 'ABP_BtlCharacterBase_C::CallShadowSkillShot' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, VisualTable) == 0x010B90, "Member 'ABP_BtlCharacterBase_C::VisualTable' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, CallShadowSkillCamChange) == 0x010B98, "Member 'ABP_BtlCharacterBase_C::CallShadowSkillCamChange' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, CallShadowSkillChantFinish) == 0x010B99, "Member 'ABP_BtlCharacterBase_C::CallShadowSkillChantFinish' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, SummonSkill) == 0x010B9A, "Member 'ABP_BtlCharacterBase_C::SummonSkill' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, SummonSkill_DataLoaded) == 0x010B9B, "Member 'ABP_BtlCharacterBase_C::SummonSkill_DataLoaded' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, KeepHidingMode) == 0x010B9C, "Member 'ABP_BtlCharacterBase_C::KeepHidingMode' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, PlayedSkillCamera) == 0x010B9D, "Member 'ABP_BtlCharacterBase_C::PlayedSkillCamera' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, InitialBlendIN) == 0x010BA0, "Member 'ABP_BtlCharacterBase_C::InitialBlendIN' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, InitialBlendOut) == 0x010BA4, "Member 'ABP_BtlCharacterBase_C::InitialBlendOut' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, FinishPersonaSummon) == 0x010BA8, "Member 'ABP_BtlCharacterBase_C::FinishPersonaSummon' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Anim_Section_Latest) == 0x010BAC, "Member 'ABP_BtlCharacterBase_C::Anim_Section_Latest' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, LSTakeover) == 0x010BB8, "Member 'ABP_BtlCharacterBase_C::LSTakeover' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, TakeoverActor) == 0x010BE0, "Member 'ABP_BtlCharacterBase_C::TakeoverActor' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BtlEvent) == 0x010BE8, "Member 'ABP_BtlCharacterBase_C::BtlEvent' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Anim_Section_Previous_Frame) == 0x010BF0, "Member 'ABP_BtlCharacterBase_C::Anim_Section_Previous_Frame' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Anim_Section_Current_Frame) == 0x010BF8, "Member 'ABP_BtlCharacterBase_C::Anim_Section_Current_Frame' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, ShakeAddPos) == 0x010C00, "Member 'ABP_BtlCharacterBase_C::ShakeAddPos' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, OnCallWeaponVisibility) == 0x010C10, "Member 'ABP_BtlCharacterBase_C::OnCallWeaponVisibility' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, OnCallGunVisibility) == 0x010C20, "Member 'ABP_BtlCharacterBase_C::OnCallGunVisibility' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, LocRunStart) == 0x010C30, "Member 'ABP_BtlCharacterBase_C::LocRunStart' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, LocRunGoal) == 0x010C3C, "Member 'ABP_BtlCharacterBase_C::LocRunGoal' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsAttackRunning) == 0x010C48, "Member 'ABP_BtlCharacterBase_C::IsAttackRunning' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Run_CMpS) == 0x010C4C, "Member 'ABP_BtlCharacterBase_C::Run_CMpS' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, RunCurrentMoveLen) == 0x010C50, "Member 'ABP_BtlCharacterBase_C::RunCurrentMoveLen' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, RunGoalMoveLen) == 0x010C54, "Member 'ABP_BtlCharacterBase_C::RunGoalMoveLen' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, RunMaxLenForAttack) == 0x010C58, "Member 'ABP_BtlCharacterBase_C::RunMaxLenForAttack' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsAttacking) == 0x010C5C, "Member 'ABP_BtlCharacterBase_C::IsAttacking' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Selection) == 0x010C5D, "Member 'ABP_BtlCharacterBase_C::Selection' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, RunElapsedTime) == 0x010C60, "Member 'ABP_BtlCharacterBase_C::RunElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, LocBackstepStart) == 0x010C64, "Member 'ABP_BtlCharacterBase_C::LocBackstepStart' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, LocBackstepGoal) == 0x010C70, "Member 'ABP_BtlCharacterBase_C::LocBackstepGoal' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsBackstepping) == 0x010C7C, "Member 'ABP_BtlCharacterBase_C::IsBackstepping' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BackstepElapsedTime) == 0x010C80, "Member 'ABP_BtlCharacterBase_C::BackstepElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BackstepGoalMoveLen) == 0x010C84, "Member 'ABP_BtlCharacterBase_C::BackstepGoalMoveLen' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BackstepCurrentMoveLen) == 0x010C88, "Member 'ABP_BtlCharacterBase_C::BackstepCurrentMoveLen' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Backstep_CMpS) == 0x010C8C, "Member 'ABP_BtlCharacterBase_C::Backstep_CMpS' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, BackstepMaxLen) == 0x010C90, "Member 'ABP_BtlCharacterBase_C::BackstepMaxLen' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsBackstepLanding) == 0x010C94, "Member 'ABP_BtlCharacterBase_C::IsBackstepLanding' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, RequestPlaySkill) == 0x010C95, "Member 'ABP_BtlCharacterBase_C::RequestPlaySkill' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, OnEscapeFinish) == 0x010C98, "Member 'ABP_BtlCharacterBase_C::OnEscapeFinish' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, App_Character_Comp) == 0x010CA8, "Member 'ABP_BtlCharacterBase_C::App_Character_Comp' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, DeadAnimSync) == 0x010CB0, "Member 'ABP_BtlCharacterBase_C::DeadAnimSync' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsNeedToDelayBeforeCutin) == 0x010CB1, "Member 'ABP_BtlCharacterBase_C::IsNeedToDelayBeforeCutin' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsNeedToDelayBeforeSkill) == 0x010CB2, "Member 'ABP_BtlCharacterBase_C::IsNeedToDelayBeforeSkill' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Is_Force_Show_Weapon) == 0x010CB3, "Member 'ABP_BtlCharacterBase_C::Is_Force_Show_Weapon' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, RunDelayTime) == 0x010CB4, "Member 'ABP_BtlCharacterBase_C::RunDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, Is_Force_Hide_Weapon) == 0x010CB8, "Member 'ABP_BtlCharacterBase_C::Is_Force_Hide_Weapon' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, CalledSkillShotEnd) == 0x010CB9, "Member 'ABP_BtlCharacterBase_C::CalledSkillShotEnd' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsKeepAnimWhenInvisible) == 0x010CBA, "Member 'ABP_BtlCharacterBase_C::IsKeepAnimWhenInvisible' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsFirstSummonCutin) == 0x010CBB, "Member 'ABP_BtlCharacterBase_C::IsFirstSummonCutin' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, AnimChangeDetectorRemainingWaitTime) == 0x010CBC, "Member 'ABP_BtlCharacterBase_C::AnimChangeDetectorRemainingWaitTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsInMontageUpdate) == 0x010CC0, "Member 'ABP_BtlCharacterBase_C::IsInMontageUpdate' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, InitialForcedLOD) == 0x010CC4, "Member 'ABP_BtlCharacterBase_C::InitialForcedLOD' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IgnoreCoordinatingAnimSpeed) == 0x010CC8, "Member 'ABP_BtlCharacterBase_C::IgnoreCoordinatingAnimSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsLastRequestChantAnimation) == 0x010CC9, "Member 'ABP_BtlCharacterBase_C::IsLastRequestChantAnimation' has a wrong offset!");
static_assert(offsetof(ABP_BtlCharacterBase_C, IsSkillShotDelayed) == 0x010CCA, "Member 'ABP_BtlCharacterBase_C::IsSkillShotDelayed' has a wrong offset!");

}

