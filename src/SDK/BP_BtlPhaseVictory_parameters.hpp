#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlPhaseVictory

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FBtlResultSequence_structs.hpp"


namespace SDK::Params
{

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.ExecuteUbergraph_BP_BtlPhaseVictory
// 0x0218 (0x0218 - 0x0000)
struct BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_BtlFadeSync_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BtlFadeSync_ReturnValue_1;                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAstrea_ReturnValue;              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasEvent_Has_Event;                       // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEventResult_IsCaptureResult;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventResult_ReturnValue;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x004C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_CheckNeedResult_ReturnValue;              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_1;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence_1;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 Temp_softobject_Variable;                          // 0x0088(0x0028)(HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x00B4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    CallFunc_CreateLevelSequencePlayer_OutActor;       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_CreateLevelSequencePlayer_ReturnValue;    // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    CallFunc_CreateLevelSequencePlayer_OutActor_1;     // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_CreateLevelSequencePlayer_ReturnValue_1;  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 Temp_softobject_Variable_1;                        // 0x00E8(0x0028)(HasGetValueTypeHash)
	class ABtlActor*                              CallFunc_GetResultMainPlayer_ReturnValue;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetID_ReturnValue;                        // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0130(0x0010)(ZeroConstructor, NoDestructor)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingAstrea_ReturnValue_1;            // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFBtlResultSequence                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0160(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_GetHero_ReturnValue;                      // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 K2Node_Select_Default;                             // 0x0198(0x0028)(HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x01C0(0x0010)(ZeroConstructor, NoDestructor)
	class ALevelSequenceActor*                    CallFunc_CreateLevelSequencePlayer_OutActor_2;     // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_CreateLevelSequencePlayer_ReturnValue_2;  // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x01E0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_6;            // 0x01F0(0x0010)(ZeroConstructor, NoDestructor)
	class ABtlActor*                              CallFunc_GetHero_ReturnValue_1;                    // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory) == 0x000008, "Wrong alignment on BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory");
static_assert(sizeof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory) == 0x000218, "Wrong size on BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, EntryPoint) == 0x000000, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_BtlFadeSync_ReturnValue) == 0x000014, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_BtlFadeSync_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_BtlFadeSync_ReturnValue_1) == 0x000015, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_BtlFadeSync_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_IsPlayingAstrea_ReturnValue) == 0x000016, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_IsPlayingAstrea_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_GetSequencePlayer_ReturnValue) == 0x000018, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_Event_DeltaSeconds) == 0x000020, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_IsValid_ReturnValue_1) == 0x000025, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_IsValid_ReturnValue_2) == 0x000026, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_HasEvent_Has_Event) == 0x000027, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_HasEvent_Has_Event' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, Temp_object_Variable) == 0x000028, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_DynamicCast_AsLevel_Sequence) == 0x000030, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_DynamicCast_AsLevel_Sequence' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_IsValid_ReturnValue_3) == 0x000039, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_CustomEvent_Loaded) == 0x000040, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_IsEventResult_IsCaptureResult) == 0x000048, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_IsEventResult_IsCaptureResult' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_IsEventResult_ReturnValue) == 0x000049, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_IsEventResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_CreateDelegate_OutputDelegate_1) == 0x00004C, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_CheckNeedResult_ReturnValue) == 0x00005C, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_CheckNeedResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_Not_PreBool_ReturnValue) == 0x00005D, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, Temp_object_Variable_1) == 0x000060, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_DynamicCast_AsLevel_Sequence_1) == 0x000068, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_DynamicCast_AsLevel_Sequence_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_CustomEvent_Loaded_1) == 0x000078, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000080, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, Temp_softobject_Variable) == 0x000088, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000B4, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_CreateLevelSequencePlayer_OutActor) == 0x0000C8, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_CreateLevelSequencePlayer_OutActor' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_CreateLevelSequencePlayer_ReturnValue) == 0x0000D0, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_CreateLevelSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_CreateLevelSequencePlayer_OutActor_1) == 0x0000D8, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_CreateLevelSequencePlayer_OutActor_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_CreateLevelSequencePlayer_ReturnValue_1) == 0x0000E0, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_CreateLevelSequencePlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, Temp_softobject_Variable_1) == 0x0000E8, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::Temp_softobject_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_GetResultMainPlayer_ReturnValue) == 0x000110, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_GetResultMainPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_GetID_ReturnValue) == 0x000118, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_GetID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_Conv_IntToString_ReturnValue) == 0x000120, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_CreateDelegate_OutputDelegate_3) == 0x000130, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_Concat_StrStr_ReturnValue) == 0x000140, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_Conv_StringToName_ReturnValue) == 0x000150, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_IsPlayingAstrea_ReturnValue_1) == 0x000158, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_IsPlayingAstrea_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_GetDataTableRowFromName_OutRow) == 0x000160, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000188, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, Temp_bool_Variable) == 0x000189, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_GetHero_ReturnValue) == 0x000190, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_GetHero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_Select_Default) == 0x000198, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_CreateDelegate_OutputDelegate_4) == 0x0001C0, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_CreateLevelSequencePlayer_OutActor_2) == 0x0001D0, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_CreateLevelSequencePlayer_OutActor_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_CreateLevelSequencePlayer_ReturnValue_2) == 0x0001D8, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_CreateLevelSequencePlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_CreateDelegate_OutputDelegate_5) == 0x0001E0, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_CreateDelegate_OutputDelegate_6) == 0x0001F0, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, CallFunc_GetHero_ReturnValue_1) == 0x000200, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::CallFunc_GetHero_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x000208, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory, K2Node_DynamicCast_bSuccess_2) == 0x000210, "Member 'BP_BtlPhaseVictory_C_ExecuteUbergraph_BP_BtlPhaseVictory::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPhaseVictory_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPhaseVictory_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BtlPhaseVictory_C_ReceiveTick");
static_assert(sizeof(BP_BtlPhaseVictory_C_ReceiveTick) == 0x000004, "Wrong size on BP_BtlPhaseVictory_C_ReceiveTick");
static_assert(offsetof(BP_BtlPhaseVictory_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BtlPhaseVictory_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.OnLoaded_D2CA3309431FABD600D3B0B1F69A7505
// 0x0008 (0x0008 - 0x0000)
struct BP_BtlPhaseVictory_C_OnLoaded_D2CA3309431FABD600D3B0B1F69A7505 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPhaseVictory_C_OnLoaded_D2CA3309431FABD600D3B0B1F69A7505) == 0x000008, "Wrong alignment on BP_BtlPhaseVictory_C_OnLoaded_D2CA3309431FABD600D3B0B1F69A7505");
static_assert(sizeof(BP_BtlPhaseVictory_C_OnLoaded_D2CA3309431FABD600D3B0B1F69A7505) == 0x000008, "Wrong size on BP_BtlPhaseVictory_C_OnLoaded_D2CA3309431FABD600D3B0B1F69A7505");
static_assert(offsetof(BP_BtlPhaseVictory_C_OnLoaded_D2CA3309431FABD600D3B0B1F69A7505, Loaded) == 0x000000, "Member 'BP_BtlPhaseVictory_C_OnLoaded_D2CA3309431FABD600D3B0B1F69A7505::Loaded' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.OnLoaded_3CB60A6146F2A8322AC92DA1BE9C51E4
// 0x0008 (0x0008 - 0x0000)
struct BP_BtlPhaseVictory_C_OnLoaded_3CB60A6146F2A8322AC92DA1BE9C51E4 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPhaseVictory_C_OnLoaded_3CB60A6146F2A8322AC92DA1BE9C51E4) == 0x000008, "Wrong alignment on BP_BtlPhaseVictory_C_OnLoaded_3CB60A6146F2A8322AC92DA1BE9C51E4");
static_assert(sizeof(BP_BtlPhaseVictory_C_OnLoaded_3CB60A6146F2A8322AC92DA1BE9C51E4) == 0x000008, "Wrong size on BP_BtlPhaseVictory_C_OnLoaded_3CB60A6146F2A8322AC92DA1BE9C51E4");
static_assert(offsetof(BP_BtlPhaseVictory_C_OnLoaded_3CB60A6146F2A8322AC92DA1BE9C51E4, Loaded) == 0x000000, "Member 'BP_BtlPhaseVictory_C_OnLoaded_3CB60A6146F2A8322AC92DA1BE9C51E4::Loaded' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.GetNextPhaseInBP
// 0x0060 (0x0060 - 0x0000)
struct BP_BtlPhaseVictory_C_GetNextPhaseInBP final
{
public:
	class ABtlPhase*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlPhaseResult*                        Phase;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNeedResult_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetInitialTransform_trans;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlPhaseResult*                        CallFunc_FinishSpawningActor_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPhaseVictory_C_GetNextPhaseInBP) == 0x000010, "Wrong alignment on BP_BtlPhaseVictory_C_GetNextPhaseInBP");
static_assert(sizeof(BP_BtlPhaseVictory_C_GetNextPhaseInBP) == 0x000060, "Wrong size on BP_BtlPhaseVictory_C_GetNextPhaseInBP");
static_assert(offsetof(BP_BtlPhaseVictory_C_GetNextPhaseInBP, ReturnValue) == 0x000000, "Member 'BP_BtlPhaseVictory_C_GetNextPhaseInBP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_GetNextPhaseInBP, Phase) == 0x000008, "Member 'BP_BtlPhaseVictory_C_GetNextPhaseInBP::Phase' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_GetNextPhaseInBP, CallFunc_CheckNeedResult_ReturnValue) == 0x000010, "Member 'BP_BtlPhaseVictory_C_GetNextPhaseInBP::CallFunc_CheckNeedResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_GetNextPhaseInBP, CallFunc_GetInitialTransform_trans) == 0x000020, "Member 'BP_BtlPhaseVictory_C_GetNextPhaseInBP::CallFunc_GetInitialTransform_trans' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_GetNextPhaseInBP, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000050, "Member 'BP_BtlPhaseVictory_C_GetNextPhaseInBP::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_GetNextPhaseInBP, CallFunc_FinishSpawningActor_ReturnValue) == 0x000058, "Member 'BP_BtlPhaseVictory_C_GetNextPhaseInBP::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.Setup
// 0x0008 (0x0008 - 0x0000)
struct BP_BtlPhaseVictory_C_Setup final
{
public:
	class ABP_BtlEventAssistant_C*                CallFunc_GetActorOfClass_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPhaseVictory_C_Setup) == 0x000008, "Wrong alignment on BP_BtlPhaseVictory_C_Setup");
static_assert(sizeof(BP_BtlPhaseVictory_C_Setup) == 0x000008, "Wrong size on BP_BtlPhaseVictory_C_Setup");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup, CallFunc_GetActorOfClass_ReturnValue) == 0x000000, "Member 'BP_BtlPhaseVictory_C_Setup::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.AllocateMembers
// 0x01C8 (0x01C8 - 0x0000)
struct BP_BtlPhaseVictory_C_AllocateMembers final
{
public:
	TArray<class ABP_BtlCharacterBase_C*>         AllocateList;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         LocationNum;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewLocalVar_0;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_BtlCharacterBase_C*>         List;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABtlActor*>                      CallFunc_GetPlayerList_ReturnValue;                // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetID_ReturnValue;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebug_ReturnValue;                      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      CallFunc_GetPlayerList_ReturnValue_1;              // 0x00A8(0x0010)(ReferenceParm)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlActor*                              CallFunc_Array_Get_Item_3;                         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base_1;      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetID_ReturnValue_1;                      // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_GetResultMainPlayer_ReturnValue;          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base_2;      // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_Map_Find_Value;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base_3;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlCharacterBase_C*                 CallFunc_Array_Get_Item_4;                         // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetID_ReturnValue_2;                      // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlCharacterBase_C*                 CallFunc_Array_Get_Item_5;                         // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetID_ReturnValue_3;                      // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_7;          // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16B[0x1];                                      // 0x016B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_172[0x2];                                      // 0x0172(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_GetResultMainPlayer_ReturnValue_1;        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABtlActor*>                      CallFunc_GetPlayerList_ReturnValue_2;              // 0x0188(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_Array_Get_Item_6;                         // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base_4;      // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue_2;            // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPhaseVictory_C_AllocateMembers) == 0x000008, "Wrong alignment on BP_BtlPhaseVictory_C_AllocateMembers");
static_assert(sizeof(BP_BtlPhaseVictory_C_AllocateMembers) == 0x0001C8, "Wrong size on BP_BtlPhaseVictory_C_AllocateMembers");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, AllocateList) == 0x000000, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::AllocateList' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, LocationNum) == 0x000010, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::LocationNum' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, NewLocalVar_0) == 0x000014, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, List) == 0x000018, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::List' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Variable) == 0x000028, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_GetPlayerList_ReturnValue) == 0x000030, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x000060, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_GetID_ReturnValue) == 0x00006C, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_GetID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Array_Index_Variable_1) == 0x000070, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Array_Index_Variable_2) == 0x000074, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000078, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Loop_Counter_Variable_1) == 0x00007C, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Add_IntInt_ReturnValue_2) == 0x000080, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Array_Index_Variable_3) == 0x000084, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Loop_Counter_Variable_2) == 0x000088, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Loop_Counter_Variable_3) == 0x00008C, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Add_IntInt_ReturnValue_3) == 0x000090, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Add_IntInt_ReturnValue_4) == 0x000094, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Array_Index_Variable_4) == 0x000098, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_IsDebug_ReturnValue) == 0x00009C, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_IsDebug_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_GetPlayerList_ReturnValue_1) == 0x0000A8, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_GetPlayerList_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Length_ReturnValue_1) == 0x0000BC, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Get_Item_2) == 0x0000C0, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Length_ReturnValue_2) == 0x0000C4, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000C8, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Less_IntInt_ReturnValue) == 0x0000C9, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Array_Index_Variable_5) == 0x0000CC, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Get_Item_3) == 0x0000D0, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_AsBP_Btl_Character_Base_1) == 0x0000D8, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_AsBP_Btl_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_bSuccess_1) == 0x0000E0, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_GetID_ReturnValue_1) == 0x0000E4, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_GetID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_AddUnique_ReturnValue) == 0x0000E8, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0000EC, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_GetResultMainPlayer_ReturnValue) == 0x0000F0, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_GetResultMainPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Loop_Counter_Variable_4) == 0x0000F8, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_AsBP_Btl_Character_Base_2) == 0x000100, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_AsBP_Btl_Character_Base_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_bSuccess_2) == 0x000108, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Less_IntInt_ReturnValue_1) == 0x000109, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Add_IntInt_ReturnValue_5) == 0x00010C, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000110, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Map_Find_Value) == 0x000118, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Map_Find_ReturnValue) == 0x000120, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_AsBP_Btl_Character_Base_3) == 0x000128, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_AsBP_Btl_Character_Base_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_bSuccess_3) == 0x000130, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000134, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Get_Item_4) == 0x000138, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Length_ReturnValue_3) == 0x000140, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_GetID_ReturnValue_2) == 0x000144, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_GetID_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Less_IntInt_ReturnValue_2) == 0x000148, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000149, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x00014A, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_BooleanOR_ReturnValue) == 0x00014B, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, Temp_int_Loop_Counter_Variable_5) == 0x00014C, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Less_IntInt_ReturnValue_3) == 0x000150, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Add_IntInt_ReturnValue_6) == 0x000154, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Get_Item_5) == 0x000158, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Length_ReturnValue_4) == 0x000160, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_GetID_ReturnValue_3) == 0x000164, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_GetID_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x000168, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x000169, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_EqualEqual_IntInt_ReturnValue_7) == 0x00016A, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_EqualEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Length_ReturnValue_5) == 0x00016C, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_BooleanOR_ReturnValue_1) == 0x000170, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Less_IntInt_ReturnValue_4) == 0x000171, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Length_ReturnValue_6) == 0x000174, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Greater_IntInt_ReturnValue) == 0x000178, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_GetResultMainPlayer_ReturnValue_1) == 0x000180, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_GetResultMainPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_GetPlayerList_ReturnValue_2) == 0x000188, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_GetPlayerList_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Length_ReturnValue_7) == 0x000198, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_Get_Item_6) == 0x0001A0, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Less_IntInt_ReturnValue_5) == 0x0001A8, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_AsBP_Btl_Character_Base_4) == 0x0001B0, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_AsBP_Btl_Character_Base_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, K2Node_DynamicCast_bSuccess_4) == 0x0001B8, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_Array_AddUnique_ReturnValue_2) == 0x0001BC, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_Array_AddUnique_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_AllocateMembers, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0001C0, "Member 'BP_BtlPhaseVictory_C_AllocateMembers::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.Setup All Members Visibility
// 0x0048 (0x0048 - 0x0000)
struct BP_BtlPhaseVictory_C_Setup_All_Members_Visibility final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      CallFunc_GetPlayerList_ReturnValue;                // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility) == 0x000008, "Wrong alignment on BP_BtlPhaseVictory_C_Setup_All_Members_Visibility");
static_assert(sizeof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility) == 0x000048, "Wrong size on BP_BtlPhaseVictory_C_Setup_All_Members_Visibility");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, CallFunc_GetPlayerList_ReturnValue) == 0x000010, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x000038, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_Setup_All_Members_Visibility, CallFunc_IsDead_ReturnValue) == 0x000041, "Member 'BP_BtlPhaseVictory_C_Setup_All_Members_Visibility::CallFunc_IsDead_ReturnValue' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.HideAllEnemies
// 0x0048 (0x0048 - 0x0000)
struct BP_BtlPhaseVictory_C_HideAllEnemies final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      CallFunc_GetEnemyList_ReturnValue;                 // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPhaseVictory_C_HideAllEnemies) == 0x000008, "Wrong alignment on BP_BtlPhaseVictory_C_HideAllEnemies");
static_assert(sizeof(BP_BtlPhaseVictory_C_HideAllEnemies) == 0x000048, "Wrong size on BP_BtlPhaseVictory_C_HideAllEnemies");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, CallFunc_GetEnemyList_ReturnValue) == 0x000010, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x000038, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideAllEnemies, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_BtlPhaseVictory_C_HideAllEnemies::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.LotStandIndex
// 0x0048 (0x0048 - 0x0000)
struct BP_BtlPhaseVictory_C_LotStandIndex final
{
public:
	class ABtlActor*                              Chara;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocationNum;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomStartIndex;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetID_ReturnValue;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlActor*                              CallFunc_Map_Find_Value;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPhaseVictory_C_LotStandIndex) == 0x000008, "Wrong alignment on BP_BtlPhaseVictory_C_LotStandIndex");
static_assert(sizeof(BP_BtlPhaseVictory_C_LotStandIndex) == 0x000048, "Wrong size on BP_BtlPhaseVictory_C_LotStandIndex");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, Chara) == 0x000000, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::Chara' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, LocationNum) == 0x000008, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::LocationNum' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, RandomStartIndex) == 0x00000C, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::RandomStartIndex' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_RandomInteger_ReturnValue) == 0x000014, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_GetID_ReturnValue) == 0x000018, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_GetID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00001D, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, Temp_bool_Variable) == 0x00001E, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_BooleanOR_ReturnValue) == 0x00001F, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, Temp_int_Variable) == 0x000024, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_BooleanAND_ReturnValue) == 0x00002D, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_Add_IntInt_ReturnValue_1) == 0x000030, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x000034, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_Map_Find_Value) == 0x000038, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000041, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_LotStandIndex, CallFunc_BooleanAND_ReturnValue_1) == 0x000042, "Member 'BP_BtlPhaseVictory_C_LotStandIndex::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.HideOtherPlayers
// 0x0048 (0x0048 - 0x0000)
struct BP_BtlPhaseVictory_C_HideOtherPlayers final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      CallFunc_GetPlayerList_ReturnValue;                // 0x0010(0x0010)(ReferenceParm)
	class ABtlActor*                              CallFunc_GetHero_ReturnValue;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlActor*                              CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPhaseVictory_C_HideOtherPlayers) == 0x000008, "Wrong alignment on BP_BtlPhaseVictory_C_HideOtherPlayers");
static_assert(sizeof(BP_BtlPhaseVictory_C_HideOtherPlayers) == 0x000048, "Wrong size on BP_BtlPhaseVictory_C_HideOtherPlayers");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, CallFunc_GetPlayerList_ReturnValue) == 0x000010, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, CallFunc_GetHero_ReturnValue) == 0x000020, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::CallFunc_GetHero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x000038, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000042, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPhaseVictory_C_HideOtherPlayers, CallFunc_IsValid_ReturnValue) == 0x000043, "Member 'BP_BtlPhaseVictory_C_HideOtherPlayers::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BtlPhaseVictory.BP_BtlPhaseVictory_C.CheckProgressNextPhaseInBP
// 0x0001 (0x0001 - 0x0000)
struct BP_BtlPhaseVictory_C_CheckProgressNextPhaseInBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPhaseVictory_C_CheckProgressNextPhaseInBP) == 0x000001, "Wrong alignment on BP_BtlPhaseVictory_C_CheckProgressNextPhaseInBP");
static_assert(sizeof(BP_BtlPhaseVictory_C_CheckProgressNextPhaseInBP) == 0x000001, "Wrong size on BP_BtlPhaseVictory_C_CheckProgressNextPhaseInBP");
static_assert(offsetof(BP_BtlPhaseVictory_C_CheckProgressNextPhaseInBP, ReturnValue) == 0x000000, "Member 'BP_BtlPhaseVictory_C_CheckProgressNextPhaseInBP::ReturnValue' has a wrong offset!");

}

