#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlTargetSelect

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Xrd777_structs.hpp"
#include "BP_BtlGuiBaseActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlTargetSelect.BP_BtlTargetSelect_C
// 0x00C8 (0x0418 - 0x0350)
class ABP_BtlTargetSelect_C final : public ABP_BtlGuiBaseActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BtlTargetSelect_C;               // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBtlGuiResources*                       BtlGuiResources;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiPersonaStatusComponent*          BtlGuiPersonaStatus;                               // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlDataBaseComponent*                  BtlDataBase;                                       // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawComponent*                   BtlGuiDraw;                                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LerpTimeline_param_26FDEEA840A6F03CE8437BBE96C2EC57; // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LerpTimeline__Direction_26FDEEA840A6F03CE8437BBE96C2EC57; // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LerpTimeline;                                      // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABtlActor*>                      TempList;                                          // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABtlActor*>                      TargetList;                                        // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          ListMoveAhead;                                     // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetIndex;                                       // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlDataTargetType                            TargetType;                                        // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Targetrule;                                        // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlDataTargetArea                            Targetarea;                                        // 0x03B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B3[0x1];                                      // 0x03B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnemyNameID;                                       // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCreateTargetList;                                // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FBtlDataTargetRule                     TargetRule2;                                       // 0x03B9(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          CheckPlayer;                                       // 0x03BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BE[0x2];                                      // 0x03BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameVisible;                                      // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringWork;                                        // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AttrText;                                          // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsHP;                                              // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DamageHP;                                          // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DamageSP;                                          // 0x03EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RecoveryHP;                                        // 0x03EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RecoverySP;                                        // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCharge;                                          // 0x03ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSupport;                                         // 0x03EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EF[0x1];                                      // 0x03EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              Action;                                            // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBadStatus;                                       // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TargetInfoVisible;                                 // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FirstSceneInit;                                    // 0x03FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBtlGuiIconKeyHelp                            Help;                                              // 0x03FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOracle;                                          // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CheckEnemy;                                        // 0x03FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HelpDisableParam;                                  // 0x03FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FF[0x1];                                      // 0x03FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectImage*                 Sillhouette1;                                      // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectImage*                 Sillhouette2;                                      // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpParam;                                         // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BtlTargetSelect(int32 EntryPoint);
	void StartLerpTimeline();
	void GuiActorUpdate(float DeltaTime);
	void GuiActorStateExit();
	void SceneInit();
	void On_Select_Behind_Target();
	void On_Select_Next_Target();
	void ChangeStateTargetSelect();
	void GuiActorStateInit(bool Flag, int32 Param);
	void GuiActorBeginPlay();
	void RepInput(const struct FBtlInputKey& InputKey);
	void PushTouch();
	void OnAnalyze();
	void GuiActorUnbindAction();
	void GuiActorBindAction();
	void PushCancel();
	void PushOk();
	void LerpTimeline__UpdateFunc();
	void LerpTimeline__FinishedFunc();
	void CheckItemID(int32 ID, int32* SkillId);
	void CheckEffecary(bool* Effecary);
	void SortTargetEnemyList(TArray<class ABtlActor*>& InList, TArray<class ABtlActor*>* OutList);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlTargetSelect_C">();
	}
	static class ABP_BtlTargetSelect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlTargetSelect_C>();
	}
};
static_assert(alignof(ABP_BtlTargetSelect_C) == 0x000008, "Wrong alignment on ABP_BtlTargetSelect_C");
static_assert(sizeof(ABP_BtlTargetSelect_C) == 0x000418, "Wrong size on ABP_BtlTargetSelect_C");
static_assert(offsetof(ABP_BtlTargetSelect_C, UberGraphFrame_BP_BtlTargetSelect_C) == 0x000350, "Member 'ABP_BtlTargetSelect_C::UberGraphFrame_BP_BtlTargetSelect_C' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, BtlGuiResources) == 0x000358, "Member 'ABP_BtlTargetSelect_C::BtlGuiResources' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, BtlGuiPersonaStatus) == 0x000360, "Member 'ABP_BtlTargetSelect_C::BtlGuiPersonaStatus' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, BtlDataBase) == 0x000368, "Member 'ABP_BtlTargetSelect_C::BtlDataBase' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, BtlGuiDraw) == 0x000370, "Member 'ABP_BtlTargetSelect_C::BtlGuiDraw' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, LerpTimeline_param_26FDEEA840A6F03CE8437BBE96C2EC57) == 0x000378, "Member 'ABP_BtlTargetSelect_C::LerpTimeline_param_26FDEEA840A6F03CE8437BBE96C2EC57' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, LerpTimeline__Direction_26FDEEA840A6F03CE8437BBE96C2EC57) == 0x00037C, "Member 'ABP_BtlTargetSelect_C::LerpTimeline__Direction_26FDEEA840A6F03CE8437BBE96C2EC57' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, LerpTimeline) == 0x000380, "Member 'ABP_BtlTargetSelect_C::LerpTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, TempList) == 0x000388, "Member 'ABP_BtlTargetSelect_C::TempList' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, TargetList) == 0x000398, "Member 'ABP_BtlTargetSelect_C::TargetList' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, ListMoveAhead) == 0x0003A8, "Member 'ABP_BtlTargetSelect_C::ListMoveAhead' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, TargetIndex) == 0x0003AC, "Member 'ABP_BtlTargetSelect_C::TargetIndex' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, TargetType) == 0x0003B0, "Member 'ABP_BtlTargetSelect_C::TargetType' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, Targetrule) == 0x0003B1, "Member 'ABP_BtlTargetSelect_C::Targetrule' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, Targetarea) == 0x0003B2, "Member 'ABP_BtlTargetSelect_C::Targetarea' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, EnemyNameID) == 0x0003B4, "Member 'ABP_BtlTargetSelect_C::EnemyNameID' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, IsCreateTargetList) == 0x0003B8, "Member 'ABP_BtlTargetSelect_C::IsCreateTargetList' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, TargetRule2) == 0x0003B9, "Member 'ABP_BtlTargetSelect_C::TargetRule2' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, CheckPlayer) == 0x0003BD, "Member 'ABP_BtlTargetSelect_C::CheckPlayer' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, FrameVisible) == 0x0003C0, "Member 'ABP_BtlTargetSelect_C::FrameVisible' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, StringWork) == 0x0003C8, "Member 'ABP_BtlTargetSelect_C::StringWork' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, AttrText) == 0x0003D8, "Member 'ABP_BtlTargetSelect_C::AttrText' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, IsHP) == 0x0003E8, "Member 'ABP_BtlTargetSelect_C::IsHP' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, DamageHP) == 0x0003E9, "Member 'ABP_BtlTargetSelect_C::DamageHP' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, DamageSP) == 0x0003EA, "Member 'ABP_BtlTargetSelect_C::DamageSP' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, RecoveryHP) == 0x0003EB, "Member 'ABP_BtlTargetSelect_C::RecoveryHP' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, RecoverySP) == 0x0003EC, "Member 'ABP_BtlTargetSelect_C::RecoverySP' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, IsCharge) == 0x0003ED, "Member 'ABP_BtlTargetSelect_C::IsCharge' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, IsSupport) == 0x0003EE, "Member 'ABP_BtlTargetSelect_C::IsSupport' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, Action) == 0x0003F0, "Member 'ABP_BtlTargetSelect_C::Action' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, IsBadStatus) == 0x0003F8, "Member 'ABP_BtlTargetSelect_C::IsBadStatus' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, TargetInfoVisible) == 0x0003F9, "Member 'ABP_BtlTargetSelect_C::TargetInfoVisible' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, FirstSceneInit) == 0x0003FA, "Member 'ABP_BtlTargetSelect_C::FirstSceneInit' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, Help) == 0x0003FB, "Member 'ABP_BtlTargetSelect_C::Help' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, IsOracle) == 0x0003FC, "Member 'ABP_BtlTargetSelect_C::IsOracle' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, CheckEnemy) == 0x0003FD, "Member 'ABP_BtlTargetSelect_C::CheckEnemy' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, HelpDisableParam) == 0x0003FE, "Member 'ABP_BtlTargetSelect_C::HelpDisableParam' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, Sillhouette1) == 0x000400, "Member 'ABP_BtlTargetSelect_C::Sillhouette1' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, Sillhouette2) == 0x000408, "Member 'ABP_BtlTargetSelect_C::Sillhouette2' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetSelect_C, LerpParam) == 0x000410, "Member 'ABP_BtlTargetSelect_C::LerpParam' has a wrong offset!");

}

