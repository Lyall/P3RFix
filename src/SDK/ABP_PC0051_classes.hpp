#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PC0051

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_PC0051.ABP_PC0051_C
// 0x0900 (0x0BC0 - 0x02C0)
class UABP_PC0051_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x02F8(0x0048)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0340(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0448(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0550(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0570(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0590(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0610(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x06B0(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0730(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x07D0(0x0080)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0850(0x00C8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0918(0x00C0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x09D8(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0B30(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0B58(0x0028)()
	bool                                          bBlink;                                            // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNoBlink;                                          // 0x0B81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_B82[0x2];                                      // 0x0B82(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlinkWait;                                         // 0x0B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         BlinkContinuousNumber;                             // 0x0B88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B89[0x3];                                      // 0x0B89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SaccadePos;                                        // 0x0B8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SaccadeRandomVec;                                  // 0x0B98(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SaccadeWait;                                       // 0x0BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SaccadeAlpha;                                      // 0x0BA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAC[0x4];                                      // 0x0BAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  PawnOwner;                                         // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_PC0051(int32 EntryPoint);
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EyeBlink(float DeltaTime);
	void EyeSaccade(float DeltaTime);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_PC0051_C">();
	}
	static class UABP_PC0051_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_PC0051_C>();
	}
};
static_assert(alignof(UABP_PC0051_C) == 0x000010, "Wrong alignment on UABP_PC0051_C");
static_assert(sizeof(UABP_PC0051_C) == 0x000BC0, "Wrong size on UABP_PC0051_C");
static_assert(offsetof(UABP_PC0051_C, UberGraphFrame) == 0x0002C0, "Member 'UABP_PC0051_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UABP_PC0051_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_Slot) == 0x0002F8, "Member 'UABP_PC0051_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_ModifyBone_1) == 0x000340, "Member 'UABP_PC0051_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_ModifyBone) == 0x000448, "Member 'UABP_PC0051_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_LocalToComponentSpace) == 0x000550, "Member 'UABP_PC0051_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_ComponentToLocalSpace) == 0x000570, "Member 'UABP_PC0051_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_SequencePlayer_2) == 0x000590, "Member 'UABP_PC0051_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_BlendListByBool_1) == 0x000610, "Member 'UABP_PC0051_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_SequencePlayer_1) == 0x0006B0, "Member 'UABP_PC0051_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_BlendListByBool) == 0x000730, "Member 'UABP_PC0051_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_SequencePlayer) == 0x0007D0, "Member 'UABP_PC0051_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_ApplyAdditive) == 0x000850, "Member 'UABP_PC0051_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_LayeredBoneBlend) == 0x000918, "Member 'UABP_PC0051_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_SaveCachedPose) == 0x0009D8, "Member 'UABP_PC0051_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_UseCachedPose_1) == 0x000B30, "Member 'UABP_PC0051_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, AnimGraphNode_UseCachedPose) == 0x000B58, "Member 'UABP_PC0051_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, bBlink) == 0x000B80, "Member 'UABP_PC0051_C::bBlink' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, bNoBlink) == 0x000B81, "Member 'UABP_PC0051_C::bNoBlink' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, BlinkWait) == 0x000B84, "Member 'UABP_PC0051_C::BlinkWait' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, BlinkContinuousNumber) == 0x000B88, "Member 'UABP_PC0051_C::BlinkContinuousNumber' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, SaccadePos) == 0x000B8C, "Member 'UABP_PC0051_C::SaccadePos' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, SaccadeRandomVec) == 0x000B98, "Member 'UABP_PC0051_C::SaccadeRandomVec' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, SaccadeWait) == 0x000BA4, "Member 'UABP_PC0051_C::SaccadeWait' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, SaccadeAlpha) == 0x000BA8, "Member 'UABP_PC0051_C::SaccadeAlpha' has a wrong offset!");
static_assert(offsetof(UABP_PC0051_C, PawnOwner) == 0x000BB0, "Member 'UABP_PC0051_C::PawnOwner' has a wrong offset!");

}

