#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Pp2001

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ABP_Pp2001.ABP_Pp2001_C.ExecuteUbergraph_ABP_Pp2001
// 0x001C (0x001C - 0x0000)
struct ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_RootYaw;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float RootYaw)>                K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001) == 0x000004, "Wrong alignment on ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001");
static_assert(sizeof(ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001) == 0x00001C, "Wrong size on ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001");
static_assert(offsetof(ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001, EntryPoint) == 0x000000, "Member 'ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001, K2Node_CustomEvent_RootYaw) == 0x000004, "Member 'ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001::K2Node_CustomEvent_RootYaw' has a wrong offset!");
static_assert(offsetof(ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001, K2Node_Event_DeltaTimeX) == 0x000018, "Member 'ABP_Pp2001_C_ExecuteUbergraph_ABP_Pp2001::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function ABP_Pp2001.ABP_Pp2001_C.RootYawEvent_§ŸÛ»_0
// 0x0004 (0x0004 - 0x0000)
struct ABP_Pp2001_C_RootYawEvent______0 final
{
public:
	float                                         RootYaw;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Pp2001_C_RootYawEvent______0) == 0x000004, "Wrong alignment on ABP_Pp2001_C_RootYawEvent______0");
static_assert(sizeof(ABP_Pp2001_C_RootYawEvent______0) == 0x000004, "Wrong size on ABP_Pp2001_C_RootYawEvent______0");
static_assert(offsetof(ABP_Pp2001_C_RootYawEvent______0, RootYaw) == 0x000000, "Member 'ABP_Pp2001_C_RootYawEvent______0::RootYaw' has a wrong offset!");

// Function ABP_Pp2001.ABP_Pp2001_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Pp2001_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Pp2001_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Pp2001_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Pp2001_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Pp2001_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Pp2001_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Pp2001_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Pp2001.ABP_Pp2001_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Pp2001_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Pp2001_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Pp2001_C_AnimGraph");
static_assert(sizeof(ABP_Pp2001_C_AnimGraph) == 0x000010, "Wrong size on ABP_Pp2001_C_AnimGraph");
static_assert(offsetof(ABP_Pp2001_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Pp2001_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

