#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Battle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Xrd777_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPFL_Battle.BPFL_Battle_C.MakeCylinder
// 0x01E0 (0x01E0 - 0x0000)
struct BPFL_Battle_C_MakeCylinder final
{
public:
	TArray<class ABtlActor*>                      Targets;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          UseCommonCylinder;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ModeSizeWeightingCylinder;                         // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Bottom_Center;                                     // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height;                                            // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDefault;                                        // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowestZ;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalHeight;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHeight;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLength;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalVec;                                          // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABtlActor*>                      TargetList;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ABP_BtlCharacterBase_C*                 Chara;                                             // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcCylinderCenter_CylinderCenter;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcCylinderCenter_SizeWeightingCenter;   // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCylinderCommon_CenterBottom;           // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Radius;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Height;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterCylinder;         // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_LocalCylinderLocation;  // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCylinderCommon_CenterBottom_1;         // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Radius_1;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Height_1;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterCylinder_1;       // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_LocalCylinderLocation_1; // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterBottom_2;         // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Radius_2;               // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Height_2;               // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterCylinder_2;       // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_LocalCylinderLocation_2; // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCylinderCommon_CenterBottom_3;         // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Radius_3;               // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Height_3;               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterCylinder_3;       // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_LocalCylinderLocation_3; // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_Array_Get_Item;                           // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_MakeCylinder) == 0x000008, "Wrong alignment on BPFL_Battle_C_MakeCylinder");
static_assert(sizeof(BPFL_Battle_C_MakeCylinder) == 0x0001E0, "Wrong size on BPFL_Battle_C_MakeCylinder");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, Targets) == 0x000000, "Member 'BPFL_Battle_C_MakeCylinder::Targets' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, UseCommonCylinder) == 0x000010, "Member 'BPFL_Battle_C_MakeCylinder::UseCommonCylinder' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, ModeSizeWeightingCylinder) == 0x000011, "Member 'BPFL_Battle_C_MakeCylinder::ModeSizeWeightingCylinder' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, __WorldContext) == 0x000018, "Member 'BPFL_Battle_C_MakeCylinder::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, Bottom_Center) == 0x000020, "Member 'BPFL_Battle_C_MakeCylinder::Bottom_Center' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, Radius) == 0x00002C, "Member 'BPFL_Battle_C_MakeCylinder::Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, Height) == 0x000030, "Member 'BPFL_Battle_C_MakeCylinder::Height' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, UseDefault) == 0x000034, "Member 'BPFL_Battle_C_MakeCylinder::UseDefault' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, LowestZ) == 0x000038, "Member 'BPFL_Battle_C_MakeCylinder::LowestZ' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, LocalHeight) == 0x00003C, "Member 'BPFL_Battle_C_MakeCylinder::LocalHeight' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, MaxHeight) == 0x000040, "Member 'BPFL_Battle_C_MakeCylinder::MaxHeight' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, MaxLength) == 0x000044, "Member 'BPFL_Battle_C_MakeCylinder::MaxLength' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, LocalVec) == 0x000048, "Member 'BPFL_Battle_C_MakeCylinder::LocalVec' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, Center) == 0x000054, "Member 'BPFL_Battle_C_MakeCylinder::Center' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, TargetList) == 0x000060, "Member 'BPFL_Battle_C_MakeCylinder::TargetList' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, Chara) == 0x000070, "Member 'BPFL_Battle_C_MakeCylinder::Chara' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, Temp_int_Array_Index_Variable) == 0x000078, "Member 'BPFL_Battle_C_MakeCylinder::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00007C, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_CalcCylinderCenter_CylinderCenter) == 0x000080, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_CalcCylinderCenter_CylinderCenter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_CalcCylinderCenter_SizeWeightingCenter) == 0x00008C, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_CalcCylinderCenter_SizeWeightingCenter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_X) == 0x000098, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_Y) == 0x00009C, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_Z) == 0x0000A0, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000A4, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Array_Length_ReturnValue) == 0x0000A8, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Greater_IntInt_ReturnValue) == 0x0000AC, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_CenterBottom) == 0x0000B0, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_CenterBottom' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_Radius) == 0x0000BC, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_Height) == 0x0000C0, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_Height' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_CenterCylinder) == 0x0000C4, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_CenterCylinder' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_LocalCylinderLocation) == 0x0000D0, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_LocalCylinderLocation' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_X_1) == 0x0000DC, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_Y_1) == 0x0000E0, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_Z_1) == 0x0000E4, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_X_2) == 0x0000E8, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_Y_2) == 0x0000EC, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_Z_2) == 0x0000F0, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_MakeVector_ReturnValue) == 0x0000F4, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_FMin_ReturnValue) == 0x000100, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Less_FloatFloat_ReturnValue) == 0x000104, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_CenterBottom_1) == 0x000108, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_CenterBottom_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_Radius_1) == 0x000114, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_Radius_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_Height_1) == 0x000118, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_Height_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_CenterCylinder_1) == 0x00011C, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_CenterCylinder_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_LocalCylinderLocation_1) == 0x000128, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_LocalCylinderLocation_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_X_3) == 0x000134, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_Y_3) == 0x000138, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_BreakVector_Z_3) == 0x00013C, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Add_FloatFloat_ReturnValue) == 0x000140, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_CenterBottom_2) == 0x000144, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_CenterBottom_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_Radius_2) == 0x000150, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_Radius_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_Height_2) == 0x000154, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_Height_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_CenterCylinder_2) == 0x000158, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_CenterCylinder_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_LocalCylinderLocation_2) == 0x000164, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_LocalCylinderLocation_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_VSize_ReturnValue) == 0x000170, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000174, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000178, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000184, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_CenterBottom_3) == 0x000188, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_CenterBottom_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_Radius_3) == 0x000194, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_Radius_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_Height_3) == 0x000198, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_Height_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_CenterCylinder_3) == 0x00019C, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_CenterCylinder_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_GetCylinderCommon_LocalCylinderLocation_3) == 0x0001A8, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_GetCylinderCommon_LocalCylinderLocation_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Array_Get_Item) == 0x0001B8, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Array_Length_ReturnValue_1) == 0x0001C0, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x0001C8, "Member 'BPFL_Battle_C_MakeCylinder::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, K2Node_DynamicCast_bSuccess) == 0x0001D0, "Member 'BPFL_Battle_C_MakeCylinder::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, Temp_int_Loop_Counter_Variable) == 0x0001D4, "Member 'BPFL_Battle_C_MakeCylinder::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Less_IntInt_ReturnValue) == 0x0001D8, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_MakeCylinder, CallFunc_Add_IntInt_ReturnValue) == 0x0001DC, "Member 'BPFL_Battle_C_MakeCylinder::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.GetInitialTransform
// 0x0070 (0x0070 - 0x0000)
struct BPFL_Battle_C_GetInitialTransform final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Trans;                                             // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_GetInitialTransform) == 0x000010, "Wrong alignment on BPFL_Battle_C_GetInitialTransform");
static_assert(sizeof(BPFL_Battle_C_GetInitialTransform) == 0x000070, "Wrong size on BPFL_Battle_C_GetInitialTransform");
static_assert(offsetof(BPFL_Battle_C_GetInitialTransform, __WorldContext) == 0x000000, "Member 'BPFL_Battle_C_GetInitialTransform::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_GetInitialTransform, Trans) == 0x000010, "Member 'BPFL_Battle_C_GetInitialTransform::Trans' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_GetInitialTransform, CallFunc_MakeTransform_ReturnValue) == 0x000040, "Member 'BPFL_Battle_C_GetInitialTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.AddInt
// 0x0018 (0x0018 - 0x0000)
struct BPFL_Battle_C_AddInt final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Add_Value;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_AddInt) == 0x000008, "Wrong alignment on BPFL_Battle_C_AddInt");
static_assert(sizeof(BPFL_Battle_C_AddInt) == 0x000018, "Wrong size on BPFL_Battle_C_AddInt");
static_assert(offsetof(BPFL_Battle_C_AddInt, Value) == 0x000000, "Member 'BPFL_Battle_C_AddInt::Value' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_AddInt, Add_Value) == 0x000004, "Member 'BPFL_Battle_C_AddInt::Add_Value' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_AddInt, __WorldContext) == 0x000008, "Member 'BPFL_Battle_C_AddInt::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_AddInt, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BPFL_Battle_C_AddInt::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.AddFloat
// 0x0018 (0x0018 - 0x0000)
struct BPFL_Battle_C_AddFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddValue;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_AddFloat) == 0x000008, "Wrong alignment on BPFL_Battle_C_AddFloat");
static_assert(sizeof(BPFL_Battle_C_AddFloat) == 0x000018, "Wrong size on BPFL_Battle_C_AddFloat");
static_assert(offsetof(BPFL_Battle_C_AddFloat, Value) == 0x000000, "Member 'BPFL_Battle_C_AddFloat::Value' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_AddFloat, AddValue) == 0x000004, "Member 'BPFL_Battle_C_AddFloat::AddValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_AddFloat, __WorldContext) == 0x000008, "Member 'BPFL_Battle_C_AddFloat::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_AddFloat, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BPFL_Battle_C_AddFloat::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Conv Vec to CSV string
// 0x0070 (0x0070 - 0x0000)
struct BPFL_Battle_C_Conv_Vec_to_CSV_string final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 String;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 String_Buffer;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_ReplaceInline_ReturnValue;                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_Conv_Vec_to_CSV_string) == 0x000008, "Wrong alignment on BPFL_Battle_C_Conv_Vec_to_CSV_string");
static_assert(sizeof(BPFL_Battle_C_Conv_Vec_to_CSV_string) == 0x000070, "Wrong size on BPFL_Battle_C_Conv_Vec_to_CSV_string");
static_assert(offsetof(BPFL_Battle_C_Conv_Vec_to_CSV_string, Location) == 0x000000, "Member 'BPFL_Battle_C_Conv_Vec_to_CSV_string::Location' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Conv_Vec_to_CSV_string, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Conv_Vec_to_CSV_string::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Conv_Vec_to_CSV_string, String) == 0x000018, "Member 'BPFL_Battle_C_Conv_Vec_to_CSV_string::String' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Conv_Vec_to_CSV_string, String_Buffer) == 0x000028, "Member 'BPFL_Battle_C_Conv_Vec_to_CSV_string::String_Buffer' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Conv_Vec_to_CSV_string, CallFunc_Conv_VectorToString_ReturnValue) == 0x000038, "Member 'BPFL_Battle_C_Conv_Vec_to_CSV_string::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Conv_Vec_to_CSV_string, CallFunc_ReplaceInline_ReturnValue) == 0x000048, "Member 'BPFL_Battle_C_Conv_Vec_to_CSV_string::CallFunc_ReplaceInline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Conv_Vec_to_CSV_string, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'BPFL_Battle_C_Conv_Vec_to_CSV_string::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Conv_Vec_to_CSV_string, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000060, "Member 'BPFL_Battle_C_Conv_Vec_to_CSV_string::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Battle Print Error String
// 0x0050 (0x0050 - 0x0000)
struct BPFL_Battle_C_Battle_Print_Error_String final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebug_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_Battle_Print_Error_String) == 0x000008, "Wrong alignment on BPFL_Battle_C_Battle_Print_Error_String");
static_assert(sizeof(BPFL_Battle_C_Battle_Print_Error_String) == 0x000050, "Wrong size on BPFL_Battle_C_Battle_Print_Error_String");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Error_String, String) == 0x000000, "Member 'BPFL_Battle_C_Battle_Print_Error_String::String' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Error_String, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Battle_Print_Error_String::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Error_String, CallFunc_IsDebug_ReturnValue) == 0x000018, "Member 'BPFL_Battle_C_Battle_Print_Error_String::CallFunc_IsDebug_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Error_String, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BPFL_Battle_C_Battle_Print_Error_String::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Error_String, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000030, "Member 'BPFL_Battle_C_Battle_Print_Error_String::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Error_String, K2Node_MakeStruct_LinearColor) == 0x000040, "Member 'BPFL_Battle_C_Battle_Print_Error_String::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Battle Print Warning String
// 0x0050 (0x0050 - 0x0000)
struct BPFL_Battle_C_Battle_Print_Warning_String final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebug_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_Battle_Print_Warning_String) == 0x000008, "Wrong alignment on BPFL_Battle_C_Battle_Print_Warning_String");
static_assert(sizeof(BPFL_Battle_C_Battle_Print_Warning_String) == 0x000050, "Wrong size on BPFL_Battle_C_Battle_Print_Warning_String");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Warning_String, String) == 0x000000, "Member 'BPFL_Battle_C_Battle_Print_Warning_String::String' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Warning_String, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Battle_Print_Warning_String::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Warning_String, CallFunc_IsDebug_ReturnValue) == 0x000018, "Member 'BPFL_Battle_C_Battle_Print_Warning_String::CallFunc_IsDebug_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Warning_String, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BPFL_Battle_C_Battle_Print_Warning_String::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Warning_String, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000030, "Member 'BPFL_Battle_C_Battle_Print_Warning_String::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Warning_String, K2Node_MakeStruct_LinearColor) == 0x000040, "Member 'BPFL_Battle_C_Battle_Print_Warning_String::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Battle Print Note String
// 0x0050 (0x0050 - 0x0000)
struct BPFL_Battle_C_Battle_Print_Note_String final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebug_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_Battle_Print_Note_String) == 0x000008, "Wrong alignment on BPFL_Battle_C_Battle_Print_Note_String");
static_assert(sizeof(BPFL_Battle_C_Battle_Print_Note_String) == 0x000050, "Wrong size on BPFL_Battle_C_Battle_Print_Note_String");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Note_String, String) == 0x000000, "Member 'BPFL_Battle_C_Battle_Print_Note_String::String' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Note_String, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Battle_Print_Note_String::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Note_String, CallFunc_IsDebug_ReturnValue) == 0x000018, "Member 'BPFL_Battle_C_Battle_Print_Note_String::CallFunc_IsDebug_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Note_String, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BPFL_Battle_C_Battle_Print_Note_String::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Note_String, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000030, "Member 'BPFL_Battle_C_Battle_Print_Note_String::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Note_String, K2Node_MakeStruct_LinearColor) == 0x000040, "Member 'BPFL_Battle_C_Battle_Print_Note_String::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.CalculateCylinderLocation
// 0x0088 (0x0088 - 0x0000)
struct BPFL_Battle_C_CalculateCylinderLocation final
{
public:
	TArray<class ABP_BtlCharacterBase_C*>         Character_List;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Radius_Ratio;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height_Ratio;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotate_Degree;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Common_Cylinder;                               // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Work;                                              // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Len;                                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeCylinder_Bottom_Center;               // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeCylinder_Radius;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeCylinder_Height;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegSin_ReturnValue;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_CalculateCylinderLocation) == 0x000008, "Wrong alignment on BPFL_Battle_C_CalculateCylinderLocation");
static_assert(sizeof(BPFL_Battle_C_CalculateCylinderLocation) == 0x000088, "Wrong size on BPFL_Battle_C_CalculateCylinderLocation");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, Character_List) == 0x000000, "Member 'BPFL_Battle_C_CalculateCylinderLocation::Character_List' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, Radius_Ratio) == 0x000010, "Member 'BPFL_Battle_C_CalculateCylinderLocation::Radius_Ratio' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, Height_Ratio) == 0x000014, "Member 'BPFL_Battle_C_CalculateCylinderLocation::Height_Ratio' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, Rotate_Degree) == 0x000018, "Member 'BPFL_Battle_C_CalculateCylinderLocation::Rotate_Degree' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, Use_Common_Cylinder) == 0x00001C, "Member 'BPFL_Battle_C_CalculateCylinderLocation::Use_Common_Cylinder' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, __WorldContext) == 0x000020, "Member 'BPFL_Battle_C_CalculateCylinderLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, Location) == 0x000028, "Member 'BPFL_Battle_C_CalculateCylinderLocation::Location' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, Work) == 0x000034, "Member 'BPFL_Battle_C_CalculateCylinderLocation::Work' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, Len) == 0x000040, "Member 'BPFL_Battle_C_CalculateCylinderLocation::Len' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_MakeCylinder_Bottom_Center) == 0x000044, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_MakeCylinder_Bottom_Center' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_MakeCylinder_Radius) == 0x000050, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_MakeCylinder_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_MakeCylinder_Height) == 0x000054, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_MakeCylinder_Height' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_DegCos_ReturnValue) == 0x000058, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00005C, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000060, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000064, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_DegSin_ReturnValue) == 0x000070, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_DegSin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000074, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000078, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalculateCylinderLocation, CallFunc_MakeVector_ReturnValue) == 0x00007C, "Member 'BPFL_Battle_C_CalculateCylinderLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.CalcLoopIndex
// 0x0020 (0x0020 - 0x0000)
struct BPFL_Battle_C_CalcLoopIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoopIndex;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_CalcLoopIndex) == 0x000008, "Wrong alignment on BPFL_Battle_C_CalcLoopIndex");
static_assert(sizeof(BPFL_Battle_C_CalcLoopIndex) == 0x000020, "Wrong size on BPFL_Battle_C_CalcLoopIndex");
static_assert(offsetof(BPFL_Battle_C_CalcLoopIndex, Value) == 0x000000, "Member 'BPFL_Battle_C_CalcLoopIndex::Value' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLoopIndex, Max) == 0x000004, "Member 'BPFL_Battle_C_CalcLoopIndex::Max' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLoopIndex, __WorldContext) == 0x000008, "Member 'BPFL_Battle_C_CalcLoopIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLoopIndex, LoopIndex) == 0x000010, "Member 'BPFL_Battle_C_CalcLoopIndex::LoopIndex' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLoopIndex, CallFunc_Divide_IntInt_ReturnValue) == 0x000014, "Member 'BPFL_Battle_C_CalcLoopIndex::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLoopIndex, CallFunc_Multiply_IntInt_ReturnValue) == 0x000018, "Member 'BPFL_Battle_C_CalcLoopIndex::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLoopIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'BPFL_Battle_C_CalcLoopIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Battle Print Log
// 0x0030 (0x0030 - 0x0000)
struct BPFL_Battle_C_Battle_Print_Log final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebug_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_Battle_Print_Log) == 0x000008, "Wrong alignment on BPFL_Battle_C_Battle_Print_Log");
static_assert(sizeof(BPFL_Battle_C_Battle_Print_Log) == 0x000030, "Wrong size on BPFL_Battle_C_Battle_Print_Log");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Log, String) == 0x000000, "Member 'BPFL_Battle_C_Battle_Print_Log::String' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Log, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Battle_Print_Log::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Log, CallFunc_IsDebug_ReturnValue) == 0x000018, "Member 'BPFL_Battle_C_Battle_Print_Log::CallFunc_IsDebug_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Print_Log, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BPFL_Battle_C_Battle_Print_Log::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.BtlFindLookAtRotationFlat
// 0x0120 (0x0120 - 0x0000)
struct BPFL_Battle_C_BtlFindLookAtRotationFlat final
{
public:
	class ABP_BtlCharacterBase_C*                 Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlCharacterBase_C*                 LookatCharacter;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0060(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_BtlFindLookAtRotationFlat) == 0x000010, "Wrong alignment on BPFL_Battle_C_BtlFindLookAtRotationFlat");
static_assert(sizeof(BPFL_Battle_C_BtlFindLookAtRotationFlat) == 0x000120, "Wrong size on BPFL_Battle_C_BtlFindLookAtRotationFlat");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, Character) == 0x000000, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::Character' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, LookatCharacter) == 0x000008, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::LookatCharacter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, ReturnValue) == 0x000018, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_GetTransform_ReturnValue_1) == 0x000060, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakTransform_Location) == 0x000090, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakTransform_Location_1) == 0x0000B4, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakTransform_Rotation_1) == 0x0000C0, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakTransform_Scale_1) == 0x0000CC, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakVector_X) == 0x0000D8, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakVector_Y) == 0x0000DC, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakVector_Z) == 0x0000E0, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakVector_X_1) == 0x0000E4, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakVector_Y_1) == 0x0000E8, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_BreakVector_Z_1) == 0x0000EC, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_MakeVector_ReturnValue) == 0x0000F0, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_MakeVector_ReturnValue_1) == 0x0000FC, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtRotationFlat, CallFunc_FindLookAtRotation_ReturnValue) == 0x000108, "Member 'BPFL_Battle_C_BtlFindLookAtRotationFlat::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Get Human Notify
// 0x0030 (0x0030 - 0x0000)
struct BPFL_Battle_C_Get_Human_Notify final
{
public:
	EBtlAnimNotify                                Selection;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultNotifyName;                                 // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Notify_Name;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Work;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_Get_Human_Notify) == 0x000008, "Wrong alignment on BPFL_Battle_C_Get_Human_Notify");
static_assert(sizeof(BPFL_Battle_C_Get_Human_Notify) == 0x000030, "Wrong size on BPFL_Battle_C_Get_Human_Notify");
static_assert(offsetof(BPFL_Battle_C_Get_Human_Notify, Selection) == 0x000000, "Member 'BPFL_Battle_C_Get_Human_Notify::Selection' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Human_Notify, DefaultNotifyName) == 0x000004, "Member 'BPFL_Battle_C_Get_Human_Notify::DefaultNotifyName' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Human_Notify, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Get_Human_Notify::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Human_Notify, Notify_Name) == 0x000018, "Member 'BPFL_Battle_C_Get_Human_Notify::Notify_Name' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Human_Notify, Work) == 0x000020, "Member 'BPFL_Battle_C_Get_Human_Notify::Work' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Human_Notify, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'BPFL_Battle_C_Get_Human_Notify::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Get Persona Notify
// 0x0030 (0x0030 - 0x0000)
struct BPFL_Battle_C_Get_Persona_Notify final
{
public:
	EBtlAnimNotifyPersona                         Selection;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultNotifyName;                                 // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Notify_Name;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Work;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_Get_Persona_Notify) == 0x000008, "Wrong alignment on BPFL_Battle_C_Get_Persona_Notify");
static_assert(sizeof(BPFL_Battle_C_Get_Persona_Notify) == 0x000030, "Wrong size on BPFL_Battle_C_Get_Persona_Notify");
static_assert(offsetof(BPFL_Battle_C_Get_Persona_Notify, Selection) == 0x000000, "Member 'BPFL_Battle_C_Get_Persona_Notify::Selection' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Persona_Notify, DefaultNotifyName) == 0x000004, "Member 'BPFL_Battle_C_Get_Persona_Notify::DefaultNotifyName' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Persona_Notify, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Get_Persona_Notify::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Persona_Notify, Notify_Name) == 0x000018, "Member 'BPFL_Battle_C_Get_Persona_Notify::Notify_Name' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Persona_Notify, Work) == 0x000020, "Member 'BPFL_Battle_C_Get_Persona_Notify::Work' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Persona_Notify, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'BPFL_Battle_C_Get_Persona_Notify::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Get Shadow Notify
// 0x0030 (0x0030 - 0x0000)
struct BPFL_Battle_C_Get_Shadow_Notify final
{
public:
	EBtlAnimNotifyShadow                          Selection;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultNotifyName;                                 // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Notify_Name;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Work;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_Get_Shadow_Notify) == 0x000008, "Wrong alignment on BPFL_Battle_C_Get_Shadow_Notify");
static_assert(sizeof(BPFL_Battle_C_Get_Shadow_Notify) == 0x000030, "Wrong size on BPFL_Battle_C_Get_Shadow_Notify");
static_assert(offsetof(BPFL_Battle_C_Get_Shadow_Notify, Selection) == 0x000000, "Member 'BPFL_Battle_C_Get_Shadow_Notify::Selection' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Shadow_Notify, DefaultNotifyName) == 0x000004, "Member 'BPFL_Battle_C_Get_Shadow_Notify::DefaultNotifyName' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Shadow_Notify, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Get_Shadow_Notify::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Shadow_Notify, Notify_Name) == 0x000018, "Member 'BPFL_Battle_C_Get_Shadow_Notify::Notify_Name' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Shadow_Notify, Work) == 0x000020, "Member 'BPFL_Battle_C_Get_Shadow_Notify::Work' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Shadow_Notify, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'BPFL_Battle_C_Get_Shadow_Notify::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.VectorAnim
// 0x0068 (0x0068 - 0x0000)
struct BPFL_Battle_C_VectorAnim final
{
public:
	struct FVector                                Vec0;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vec1;                                              // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vec;                                               // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Work;                                              // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_VectorAnim) == 0x000008, "Wrong alignment on BPFL_Battle_C_VectorAnim");
static_assert(sizeof(BPFL_Battle_C_VectorAnim) == 0x000068, "Wrong size on BPFL_Battle_C_VectorAnim");
static_assert(offsetof(BPFL_Battle_C_VectorAnim, Vec0) == 0x000000, "Member 'BPFL_Battle_C_VectorAnim::Vec0' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_VectorAnim, Vec1) == 0x00000C, "Member 'BPFL_Battle_C_VectorAnim::Vec1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_VectorAnim, Alpha) == 0x000018, "Member 'BPFL_Battle_C_VectorAnim::Alpha' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_VectorAnim, __WorldContext) == 0x000020, "Member 'BPFL_Battle_C_VectorAnim::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_VectorAnim, Vec) == 0x000028, "Member 'BPFL_Battle_C_VectorAnim::Vec' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_VectorAnim, Work) == 0x000034, "Member 'BPFL_Battle_C_VectorAnim::Work' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_VectorAnim, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'BPFL_Battle_C_VectorAnim::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_VectorAnim, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00004C, "Member 'BPFL_Battle_C_VectorAnim::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_VectorAnim, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'BPFL_Battle_C_VectorAnim::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.BtlFindLookAtPosRotationFlat
// 0x00C0 (0x00C0 - 0x0000)
struct BPFL_Battle_C_BtlFindLookAtPosRotationFlat final
{
public:
	class ABP_BtlCharacterBase_C*                 Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtLocation;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat) == 0x000010, "Wrong alignment on BPFL_Battle_C_BtlFindLookAtPosRotationFlat");
static_assert(sizeof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat) == 0x0000C0, "Wrong size on BPFL_Battle_C_BtlFindLookAtPosRotationFlat");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, Character) == 0x000000, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::Character' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, LookAtLocation) == 0x000008, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::LookAtLocation' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, __WorldContext) == 0x000018, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, ReturnValue) == 0x000020, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_BreakVector_X) == 0x000060, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_BreakVector_Y) == 0x000064, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_BreakVector_Z) == 0x000068, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_BreakTransform_Location) == 0x00006C, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_BreakTransform_Rotation) == 0x000078, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_BreakTransform_Scale) == 0x000084, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_MakeVector_ReturnValue) == 0x000090, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_BreakVector_X_1) == 0x00009C, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_BreakVector_Y_1) == 0x0000A0, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_BreakVector_Z_1) == 0x0000A4, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_MakeVector_ReturnValue_1) == 0x0000A8, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlFindLookAtPosRotationFlat, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000B4, "Member 'BPFL_Battle_C_BtlFindLookAtPosRotationFlat::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.BtlRotateTurningTable
// 0x02C0 (0x02C0 - 0x0000)
struct BPFL_Battle_C_BtlRotateTurningTable final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlActor*                              MainCharacter;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TurntableForceReset;                               // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlCoreComponent*                      Core;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemy_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      CallFunc_GetEnemyList_ReturnValue;                 // 0x0098(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_MakeCylinder_Bottom_Center;               // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeCylinder_Radius;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeCylinder_Height;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNeedTurningTable_ReturnValue;        // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x00F4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorRelativeTransform_SweepHitResult; // 0x01B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0240(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_1;        // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_BtlRotateTurningTable) == 0x000010, "Wrong alignment on BPFL_Battle_C_BtlRotateTurningTable");
static_assert(sizeof(BPFL_Battle_C_BtlRotateTurningTable) == 0x0002C0, "Wrong size on BPFL_Battle_C_BtlRotateTurningTable");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, BtlCore) == 0x000000, "Member 'BPFL_Battle_C_BtlRotateTurningTable::BtlCore' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, MainCharacter) == 0x000008, "Member 'BPFL_Battle_C_BtlRotateTurningTable::MainCharacter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, TurntableForceReset) == 0x000010, "Member 'BPFL_Battle_C_BtlRotateTurningTable::TurntableForceReset' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, __WorldContext) == 0x000018, "Member 'BPFL_Battle_C_BtlRotateTurningTable::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, Core) == 0x000020, "Member 'BPFL_Battle_C_BtlRotateTurningTable::Core' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_IsEnemy_ReturnValue) == 0x000028, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_IsEnemy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x000030, "Member 'BPFL_Battle_C_BtlRotateTurningTable::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BPFL_Battle_C_BtlRotateTurningTable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakTransform_Location) == 0x000070, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakTransform_Rotation) == 0x00007C, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakTransform_Scale) == 0x000088, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_GetEnemyList_ReturnValue) == 0x000098, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_MakeCylinder_Bottom_Center) == 0x0000A8, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_MakeCylinder_Bottom_Center' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_MakeCylinder_Radius) == 0x0000B4, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_MakeCylinder_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_MakeCylinder_Height) == 0x0000B8, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_MakeCylinder_Height' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000BC, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C8, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0000D4, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakVector_X) == 0x0000D8, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakVector_Y) == 0x0000DC, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakVector_Z) == 0x0000E0, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_MakeVector_ReturnValue) == 0x0000E4, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_CheckNeedTurningTable_ReturnValue) == 0x0000F0, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_CheckNeedTurningTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0000F4, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_K2_SetActorLocation_ReturnValue) == 0x00017C, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_MakeTransform_ReturnValue) == 0x000180, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_K2_SetActorRelativeTransform_SweepHitResult) == 0x0001B0, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_K2_SetActorRelativeTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_GetTransform_ReturnValue_1) == 0x000240, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakTransform_Location_1) == 0x000270, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakTransform_Rotation_1) == 0x00027C, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakTransform_Scale_1) == 0x000288, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_FindLookAtRotation_ReturnValue) == 0x000294, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakRotator_Roll) == 0x0002A0, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakRotator_Pitch) == 0x0002A4, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_BreakRotator_Yaw) == 0x0002A8, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_MakeRotator_ReturnValue) == 0x0002AC, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTable, CallFunc_K2_SetActorRotation_ReturnValue_1) == 0x0002B8, "Member 'BPFL_Battle_C_BtlRotateTurningTable::CallFunc_K2_SetActorRotation_ReturnValue_1' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.BtlRotateTurningTableRequest
// 0x0030 (0x0030 - 0x0000)
struct BPFL_Battle_C_BtlRotateTurningTableRequest final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlActor*                              MainCharacter;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TurntableForceReset;                               // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_BtlRotateTurningTableRequest) == 0x000008, "Wrong alignment on BPFL_Battle_C_BtlRotateTurningTableRequest");
static_assert(sizeof(BPFL_Battle_C_BtlRotateTurningTableRequest) == 0x000030, "Wrong size on BPFL_Battle_C_BtlRotateTurningTableRequest");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTableRequest, BtlCore) == 0x000000, "Member 'BPFL_Battle_C_BtlRotateTurningTableRequest::BtlCore' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTableRequest, MainCharacter) == 0x000008, "Member 'BPFL_Battle_C_BtlRotateTurningTableRequest::MainCharacter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTableRequest, TurntableForceReset) == 0x000010, "Member 'BPFL_Battle_C_BtlRotateTurningTableRequest::TurntableForceReset' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTableRequest, __WorldContext) == 0x000018, "Member 'BPFL_Battle_C_BtlRotateTurningTableRequest::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTableRequest, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x000020, "Member 'BPFL_Battle_C_BtlRotateTurningTableRequest::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateTurningTableRequest, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_Battle_C_BtlRotateTurningTableRequest::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.BtlRotateEnemiesLookatMainChara
// 0x0068 (0x0068 - 0x0000)
struct BPFL_Battle_C_BtlRotateEnemiesLookatMainChara final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlActor*                              MainCharacter;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      CallFunc_GetEnemyList_ReturnValue;                 // 0x0030(0x0010)(ReferenceParm)
	class ABtlActor*                              CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEnableRotation_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyInParty_ReturnValue;               // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base_1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara) == 0x000008, "Wrong alignment on BPFL_Battle_C_BtlRotateEnemiesLookatMainChara");
static_assert(sizeof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara) == 0x000068, "Wrong size on BPFL_Battle_C_BtlRotateEnemiesLookatMainChara");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, BtlCore) == 0x000000, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::BtlCore' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, MainCharacter) == 0x000008, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::MainCharacter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x000020, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, CallFunc_IsEnemy_ReturnValue) == 0x000029, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::CallFunc_IsEnemy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, CallFunc_GetEnemyList_ReturnValue) == 0x000030, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, CallFunc_Array_Get_Item) == 0x000040, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, CallFunc_CheckEnableRotation_ReturnValue) == 0x00004C, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::CallFunc_CheckEnableRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, CallFunc_IsEnemyInParty_ReturnValue) == 0x00004D, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::CallFunc_IsEnemyInParty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, K2Node_DynamicCast_AsBP_Btl_Character_Base_1) == 0x000050, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::K2Node_DynamicCast_AsBP_Btl_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_BtlRotateEnemiesLookatMainChara, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'BPFL_Battle_C_BtlRotateEnemiesLookatMainChara::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.CalcLevelSequencePlayTime
// 0x0058 (0x0058 - 0x0000)
struct BPFL_Battle_C_CalcLevelSequencePlayTime final
{
public:
	class ALevelSequenceActor*                    LS_Actor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimTime;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_1;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    CallFunc_GetStartTime_ReturnValue;                 // 0x0028(0x0010)(NoDestructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    CallFunc_GetEndTime_ReturnValue;                   // 0x0038(0x0010)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue_1; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_CalcLevelSequencePlayTime) == 0x000008, "Wrong alignment on BPFL_Battle_C_CalcLevelSequencePlayTime");
static_assert(sizeof(BPFL_Battle_C_CalcLevelSequencePlayTime) == 0x000058, "Wrong size on BPFL_Battle_C_CalcLevelSequencePlayTime");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, LS_Actor) == 0x000000, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::LS_Actor' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, __WorldContext) == 0x000008, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, AnimTime) == 0x000010, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::AnimTime' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, CallFunc_GetSequencePlayer_ReturnValue) == 0x000018, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, CallFunc_GetSequencePlayer_ReturnValue_1) == 0x000020, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::CallFunc_GetSequencePlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, CallFunc_GetStartTime_ReturnValue) == 0x000028, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::CallFunc_GetStartTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, CallFunc_GetEndTime_ReturnValue) == 0x000038, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue) == 0x000048, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue_1) == 0x00004C, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcLevelSequencePlayTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000050, "Member 'BPFL_Battle_C_CalcLevelSequencePlayTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Battle Coordinate Close Formation
// 0x0188 (0x0188 - 0x0000)
struct BPFL_Battle_C_Battle_Coordinate_Close_Formation final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DependsOnEnemyTarget;                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyCylinderRadius;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EnemyCylinderCenter;                               // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEnableRelocationClosedFormation_ReturnValue; // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      CallFunc_GetPlayerList_ReturnValue;                // 0x0030(0x0010)(ReferenceParm)
	TArray<class ABtlActor*>                      CallFunc_GetEnemyList_ReturnValue;                 // 0x0040(0x0010)(ReferenceParm)
	class ABtlActor*                              CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeCylinder_Bottom_Center;               // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeCylinder_Radius;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeCylinder_Height;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInActionTurn_ReturnValue;               // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckActiveMode_ReturnValue;              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x00FC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_Battle_Coordinate_Close_Formation) == 0x000008, "Wrong alignment on BPFL_Battle_C_Battle_Coordinate_Close_Formation");
static_assert(sizeof(BPFL_Battle_C_Battle_Coordinate_Close_Formation) == 0x000188, "Wrong size on BPFL_Battle_C_Battle_Coordinate_Close_Formation");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, BtlCore) == 0x000000, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::BtlCore' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, DependsOnEnemyTarget) == 0x000008, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::DependsOnEnemyTarget' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, EnemyCylinderRadius) == 0x000018, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::EnemyCylinderRadius' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, EnemyCylinderCenter) == 0x00001C, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::EnemyCylinderCenter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_CheckEnableRelocationClosedFormation_ReturnValue) == 0x00002C, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_CheckEnableRelocationClosedFormation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_GetPlayerList_ReturnValue) == 0x000030, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_GetEnemyList_ReturnValue) == 0x000040, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_Array_Get_Item) == 0x000050, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_MakeCylinder_Bottom_Center) == 0x000058, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_MakeCylinder_Bottom_Center' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_MakeCylinder_Radius) == 0x000064, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_MakeCylinder_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_MakeCylinder_Height) == 0x000068, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_MakeCylinder_Height' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_IsInActionTurn_ReturnValue) == 0x00006C, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_IsInActionTurn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_SelectFloat_ReturnValue) == 0x00007C, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_CheckActiveMode_ReturnValue) == 0x000080, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_CheckActiveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, Temp_int_Loop_Counter_Variable) == 0x000088, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_Add_IntInt_ReturnValue) == 0x000090, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_FMax_ReturnValue) == 0x000094, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000098, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000A4, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_BreakVector_X) == 0x0000A8, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_BreakVector_Y) == 0x0000AC, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_BreakVector_Z) == 0x0000B0, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_MakeVector_ReturnValue) == 0x0000B4, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_Normal_ReturnValue) == 0x0000C0, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000CC, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_BreakVector_X_1) == 0x0000E4, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_BreakVector_Y_1) == 0x0000E8, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_BreakVector_Z_1) == 0x0000EC, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_MakeVector_ReturnValue_1) == 0x0000F0, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0000FC, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Battle_Coordinate_Close_Formation, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000184, "Member 'BPFL_Battle_C_Battle_Coordinate_Close_Formation::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.CalcCylinderCenter
// 0x0240 (0x0240 - 0x0000)
struct BPFL_Battle_C_CalcCylinderCenter final
{
public:
	TArray<class ABtlActor*>                      TargetList;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          UseCommonCylinder;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CylinderCenter;                                    // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SizeWeightingCenter;                               // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkSmall;                                         // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkLarge;                                         // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WeightingCenter;                                   // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 Chara;                                             // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      Targets;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlActor*                              CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCylinderCommon_CenterBottom;           // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Radius;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Height;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterCylinder;         // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_LocalCylinderLocation;  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterBottom_1;         // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Radius_1;               // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Height_1;               // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterCylinder_1;       // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_LocalCylinderLocation_1; // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              CallFunc_Array_Get_Item_1;                         // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base_1;      // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABtlActor*                              CallFunc_Array_Get_Item_2;                         // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 K2Node_DynamicCast_AsBP_Btl_Character_Base_2;      // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA[0x2];                                      // 0x01EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCylinderCommon_CenterBottom_2;         // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Radius_2;               // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Height_2;               // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterCylinder_2;       // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_LocalCylinderLocation_2; // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Battle_C_CalcCylinderCenter) == 0x000008, "Wrong alignment on BPFL_Battle_C_CalcCylinderCenter");
static_assert(sizeof(BPFL_Battle_C_CalcCylinderCenter) == 0x000240, "Wrong size on BPFL_Battle_C_CalcCylinderCenter");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, TargetList) == 0x000000, "Member 'BPFL_Battle_C_CalcCylinderCenter::TargetList' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, UseCommonCylinder) == 0x000010, "Member 'BPFL_Battle_C_CalcCylinderCenter::UseCommonCylinder' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, __WorldContext) == 0x000018, "Member 'BPFL_Battle_C_CalcCylinderCenter::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CylinderCenter) == 0x000020, "Member 'BPFL_Battle_C_CalcCylinderCenter::CylinderCenter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, SizeWeightingCenter) == 0x00002C, "Member 'BPFL_Battle_C_CalcCylinderCenter::SizeWeightingCenter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, WorkSmall) == 0x000038, "Member 'BPFL_Battle_C_CalcCylinderCenter::WorkSmall' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, WorkLarge) == 0x000044, "Member 'BPFL_Battle_C_CalcCylinderCenter::WorkLarge' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, WeightingCenter) == 0x000050, "Member 'BPFL_Battle_C_CalcCylinderCenter::WeightingCenter' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, Chara) == 0x000060, "Member 'BPFL_Battle_C_CalcCylinderCenter::Chara' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, Center) == 0x000068, "Member 'BPFL_Battle_C_CalcCylinderCenter::Center' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, Targets) == 0x000078, "Member 'BPFL_Battle_C_CalcCylinderCenter::Targets' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, Temp_int_Array_Index_Variable) == 0x000088, "Member 'BPFL_Battle_C_CalcCylinderCenter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, Temp_int_Loop_Counter_Variable) == 0x00008C, "Member 'BPFL_Battle_C_CalcCylinderCenter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Add_IntInt_ReturnValue) == 0x000090, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, Temp_int_Array_Index_Variable_1) == 0x000094, "Member 'BPFL_Battle_C_CalcCylinderCenter::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Array_Get_Item) == 0x000098, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, K2Node_DynamicCast_AsBP_Btl_Character_Base) == 0x0000A0, "Member 'BPFL_Battle_C_CalcCylinderCenter::K2Node_DynamicCast_AsBP_Btl_Character_Base' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BPFL_Battle_C_CalcCylinderCenter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_CenterBottom) == 0x0000AC, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_CenterBottom' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_Radius) == 0x0000B8, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_Height) == 0x0000BC, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_Height' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_CenterCylinder) == 0x0000C0, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_CenterCylinder' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_LocalCylinderLocation) == 0x0000CC, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_LocalCylinderLocation' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_X) == 0x0000D8, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Y) == 0x0000DC, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Z) == 0x0000E0, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E4, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_X_1) == 0x0000F0, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Y_1) == 0x0000F4, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Z_1) == 0x0000F8, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000FC, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Add_VectorVector_ReturnValue) == 0x000108, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_X_2) == 0x000114, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Y_2) == 0x000118, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Z_2) == 0x00011C, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_X_3) == 0x000120, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Y_3) == 0x000124, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Z_3) == 0x000128, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_MakeVector_ReturnValue) == 0x00012C, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_CenterBottom_1) == 0x000138, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_CenterBottom_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_Radius_1) == 0x000144, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_Radius_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_Height_1) == 0x000148, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_Height_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_CenterCylinder_1) == 0x00014C, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_CenterCylinder_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_LocalCylinderLocation_1) == 0x000158, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_LocalCylinderLocation_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Array_Get_Item_1) == 0x000168, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_X_4) == 0x000170, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Y_4) == 0x000174, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_BreakVector_Z_4) == 0x000178, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, K2Node_DynamicCast_AsBP_Btl_Character_Base_1) == 0x000180, "Member 'BPFL_Battle_C_CalcCylinderCenter::K2Node_DynamicCast_AsBP_Btl_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, K2Node_DynamicCast_bSuccess_1) == 0x000188, "Member 'BPFL_Battle_C_CalcCylinderCenter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00018C, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_FMin_ReturnValue) == 0x000190, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Add_FloatFloat_ReturnValue) == 0x000194, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000198, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_FMax_ReturnValue) == 0x00019C, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_FMin_ReturnValue_1) == 0x0001A0, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0001A4, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_MakeVector_ReturnValue_1) == 0x0001A8, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_FMax_ReturnValue_1) == 0x0001B4, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_MakeVector_ReturnValue_2) == 0x0001B8, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Array_Length_ReturnValue) == 0x0001C4, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Array_Length_ReturnValue_1) == 0x0001C8, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001CC, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Array_Get_Item_2) == 0x0001D0, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Array_Length_ReturnValue_2) == 0x0001D8, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, K2Node_DynamicCast_AsBP_Btl_Character_Base_2) == 0x0001E0, "Member 'BPFL_Battle_C_CalcCylinderCenter::K2Node_DynamicCast_AsBP_Btl_Character_Base_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, K2Node_DynamicCast_bSuccess_2) == 0x0001E8, "Member 'BPFL_Battle_C_CalcCylinderCenter::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Less_IntInt_ReturnValue) == 0x0001E9, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_CenterBottom_2) == 0x0001EC, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_CenterBottom_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_Radius_2) == 0x0001F8, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_Radius_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_Height_2) == 0x0001FC, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_Height_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_CenterCylinder_2) == 0x000200, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_CenterCylinder_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_GetCylinderCommon_LocalCylinderLocation_2) == 0x00020C, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_GetCylinderCommon_LocalCylinderLocation_2' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000218, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000224, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, Temp_int_Loop_Counter_Variable_1) == 0x000230, "Member 'BPFL_Battle_C_CalcCylinderCenter::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Less_IntInt_ReturnValue_1) == 0x000234, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_CalcCylinderCenter, CallFunc_Add_IntInt_ReturnValue_1) == 0x000238, "Member 'BPFL_Battle_C_CalcCylinderCenter::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Get Hit Notify Name
// 0x0028 (0x0028 - 0x0000)
struct BPFL_Battle_C_Get_Hit_Notify_Name final
{
public:
	EBtlAnimNotifyHitEffect                       Selection;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Notify_Name;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Work;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_Get_Hit_Notify_Name) == 0x000008, "Wrong alignment on BPFL_Battle_C_Get_Hit_Notify_Name");
static_assert(sizeof(BPFL_Battle_C_Get_Hit_Notify_Name) == 0x000028, "Wrong size on BPFL_Battle_C_Get_Hit_Notify_Name");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_Name, Selection) == 0x000000, "Member 'BPFL_Battle_C_Get_Hit_Notify_Name::Selection' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_Name, __WorldContext) == 0x000008, "Member 'BPFL_Battle_C_Get_Hit_Notify_Name::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_Name, Notify_Name) == 0x000010, "Member 'BPFL_Battle_C_Get_Hit_Notify_Name::Notify_Name' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_Name, Work) == 0x000018, "Member 'BPFL_Battle_C_Get_Hit_Notify_Name::Work' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_Name, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'BPFL_Battle_C_Get_Hit_Notify_Name::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BPFL_Battle.BPFL_Battle_C.Get Hit Notify From Name
// 0x0050 (0x0050 - 0x0000)
struct BPFL_Battle_C_Get_Hit_Notify_From_Name final
{
public:
	class FString                                 HitTypeName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimNotifyHitEffect                       Notify_Name;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimNotifyHitEffect                       RetVal;                                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Get_Hit_Notify_Name_Notify_Name;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_Battle_C_Get_Hit_Notify_From_Name) == 0x000008, "Wrong alignment on BPFL_Battle_C_Get_Hit_Notify_From_Name");
static_assert(sizeof(BPFL_Battle_C_Get_Hit_Notify_From_Name) == 0x000050, "Wrong size on BPFL_Battle_C_Get_Hit_Notify_From_Name");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, HitTypeName) == 0x000000, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::HitTypeName' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, __WorldContext) == 0x000010, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, Notify_Name) == 0x000018, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::Notify_Name' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, RetVal) == 0x000019, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::RetVal' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_MakeLiteralInt_ReturnValue) == 0x00001C, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000020, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_Conv_StringToName_ReturnValue) == 0x000024, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, Temp_int_Variable) == 0x00002C, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, Temp_int_Variable_1) == 0x000030, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_Conv_IntToByte_ReturnValue) == 0x000034, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_GetValidValue_ReturnValue) == 0x00003C, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x00003D, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x00003E, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_Get_Hit_Notify_Name_Notify_Name) == 0x000040, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_Get_Hit_Notify_Name_Notify_Name' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000048, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00004C, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Battle_C_Get_Hit_Notify_From_Name, CallFunc_Less_IntInt_ReturnValue) == 0x00004D, "Member 'BPFL_Battle_C_Get_Hit_Notify_From_Name::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

