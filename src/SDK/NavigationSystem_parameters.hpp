#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NavigationSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function NavigationSystem.NavigationPath.EnableDebugDrawing
// 0x0014 (0x0014 - 0x0000)
struct NavigationPath_EnableDebugDrawing final
{
public:
	bool                                          bShouldDrawDebugData;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           PathColor;                                         // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPath_EnableDebugDrawing) == 0x000004, "Wrong alignment on NavigationPath_EnableDebugDrawing");
static_assert(sizeof(NavigationPath_EnableDebugDrawing) == 0x000014, "Wrong size on NavigationPath_EnableDebugDrawing");
static_assert(offsetof(NavigationPath_EnableDebugDrawing, bShouldDrawDebugData) == 0x000000, "Member 'NavigationPath_EnableDebugDrawing::bShouldDrawDebugData' has a wrong offset!");
static_assert(offsetof(NavigationPath_EnableDebugDrawing, PathColor) == 0x000004, "Member 'NavigationPath_EnableDebugDrawing::PathColor' has a wrong offset!");

// Function NavigationSystem.NavigationPath.EnableRecalculationOnInvalidation
// 0x0001 (0x0001 - 0x0000)
struct NavigationPath_EnableRecalculationOnInvalidation final
{
public:
	ENavigationOptionFlag                         DoRecalculation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPath_EnableRecalculationOnInvalidation) == 0x000001, "Wrong alignment on NavigationPath_EnableRecalculationOnInvalidation");
static_assert(sizeof(NavigationPath_EnableRecalculationOnInvalidation) == 0x000001, "Wrong size on NavigationPath_EnableRecalculationOnInvalidation");
static_assert(offsetof(NavigationPath_EnableRecalculationOnInvalidation, DoRecalculation) == 0x000000, "Member 'NavigationPath_EnableRecalculationOnInvalidation::DoRecalculation' has a wrong offset!");

// Function NavigationSystem.NavigationPath.GetDebugString
// 0x0010 (0x0010 - 0x0000)
struct NavigationPath_GetDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPath_GetDebugString) == 0x000008, "Wrong alignment on NavigationPath_GetDebugString");
static_assert(sizeof(NavigationPath_GetDebugString) == 0x000010, "Wrong size on NavigationPath_GetDebugString");
static_assert(offsetof(NavigationPath_GetDebugString, ReturnValue) == 0x000000, "Member 'NavigationPath_GetDebugString::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationPath.GetPathCost
// 0x0004 (0x0004 - 0x0000)
struct NavigationPath_GetPathCost final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPath_GetPathCost) == 0x000004, "Wrong alignment on NavigationPath_GetPathCost");
static_assert(sizeof(NavigationPath_GetPathCost) == 0x000004, "Wrong size on NavigationPath_GetPathCost");
static_assert(offsetof(NavigationPath_GetPathCost, ReturnValue) == 0x000000, "Member 'NavigationPath_GetPathCost::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationPath.GetPathLength
// 0x0004 (0x0004 - 0x0000)
struct NavigationPath_GetPathLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPath_GetPathLength) == 0x000004, "Wrong alignment on NavigationPath_GetPathLength");
static_assert(sizeof(NavigationPath_GetPathLength) == 0x000004, "Wrong size on NavigationPath_GetPathLength");
static_assert(offsetof(NavigationPath_GetPathLength, ReturnValue) == 0x000000, "Member 'NavigationPath_GetPathLength::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationPath.IsPartial
// 0x0001 (0x0001 - 0x0000)
struct NavigationPath_IsPartial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPath_IsPartial) == 0x000001, "Wrong alignment on NavigationPath_IsPartial");
static_assert(sizeof(NavigationPath_IsPartial) == 0x000001, "Wrong size on NavigationPath_IsPartial");
static_assert(offsetof(NavigationPath_IsPartial, ReturnValue) == 0x000000, "Member 'NavigationPath_IsPartial::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationPath.IsStringPulled
// 0x0001 (0x0001 - 0x0000)
struct NavigationPath_IsStringPulled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPath_IsStringPulled) == 0x000001, "Wrong alignment on NavigationPath_IsStringPulled");
static_assert(sizeof(NavigationPath_IsStringPulled) == 0x000001, "Wrong size on NavigationPath_IsStringPulled");
static_assert(offsetof(NavigationPath_IsStringPulled, ReturnValue) == 0x000000, "Member 'NavigationPath_IsStringPulled::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationPath.IsValid
// 0x0001 (0x0001 - 0x0000)
struct NavigationPath_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPath_IsValid) == 0x000001, "Wrong alignment on NavigationPath_IsValid");
static_assert(sizeof(NavigationPath_IsValid) == 0x000001, "Wrong size on NavigationPath_IsValid");
static_assert(offsetof(NavigationPath_IsValid, ReturnValue) == 0x000000, "Member 'NavigationPath_IsValid::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.FindPathToActorSynchronously
// 0x0040 (0x0040 - 0x0000)
struct NavigationSystemV1_FindPathToActorSynchronously final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathStart;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GoalActor;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TetherDistance;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PathfindingContext;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationPath*                        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_FindPathToActorSynchronously) == 0x000008, "Wrong alignment on NavigationSystemV1_FindPathToActorSynchronously");
static_assert(sizeof(NavigationSystemV1_FindPathToActorSynchronously) == 0x000040, "Wrong size on NavigationSystemV1_FindPathToActorSynchronously");
static_assert(offsetof(NavigationSystemV1_FindPathToActorSynchronously, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_FindPathToActorSynchronously::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToActorSynchronously, PathStart) == 0x000008, "Member 'NavigationSystemV1_FindPathToActorSynchronously::PathStart' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToActorSynchronously, GoalActor) == 0x000018, "Member 'NavigationSystemV1_FindPathToActorSynchronously::GoalActor' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToActorSynchronously, TetherDistance) == 0x000020, "Member 'NavigationSystemV1_FindPathToActorSynchronously::TetherDistance' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToActorSynchronously, PathfindingContext) == 0x000028, "Member 'NavigationSystemV1_FindPathToActorSynchronously::PathfindingContext' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToActorSynchronously, FilterClass) == 0x000030, "Member 'NavigationSystemV1_FindPathToActorSynchronously::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToActorSynchronously, ReturnValue) == 0x000038, "Member 'NavigationSystemV1_FindPathToActorSynchronously::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.FindPathToLocationSynchronously
// 0x0038 (0x0038 - 0x0000)
struct NavigationSystemV1_FindPathToLocationSynchronously final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathStart;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathEnd;                                           // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PathfindingContext;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationPath*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_FindPathToLocationSynchronously) == 0x000008, "Wrong alignment on NavigationSystemV1_FindPathToLocationSynchronously");
static_assert(sizeof(NavigationSystemV1_FindPathToLocationSynchronously) == 0x000038, "Wrong size on NavigationSystemV1_FindPathToLocationSynchronously");
static_assert(offsetof(NavigationSystemV1_FindPathToLocationSynchronously, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_FindPathToLocationSynchronously::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToLocationSynchronously, PathStart) == 0x000008, "Member 'NavigationSystemV1_FindPathToLocationSynchronously::PathStart' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToLocationSynchronously, PathEnd) == 0x000014, "Member 'NavigationSystemV1_FindPathToLocationSynchronously::PathEnd' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToLocationSynchronously, PathfindingContext) == 0x000020, "Member 'NavigationSystemV1_FindPathToLocationSynchronously::PathfindingContext' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToLocationSynchronously, FilterClass) == 0x000028, "Member 'NavigationSystemV1_FindPathToLocationSynchronously::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_FindPathToLocationSynchronously, ReturnValue) == 0x000030, "Member 'NavigationSystemV1_FindPathToLocationSynchronously::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.GetNavigationSystem
// 0x0010 (0x0010 - 0x0000)
struct NavigationSystemV1_GetNavigationSystem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationSystemV1*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_GetNavigationSystem) == 0x000008, "Wrong alignment on NavigationSystemV1_GetNavigationSystem");
static_assert(sizeof(NavigationSystemV1_GetNavigationSystem) == 0x000010, "Wrong size on NavigationSystemV1_GetNavigationSystem");
static_assert(offsetof(NavigationSystemV1_GetNavigationSystem, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_GetNavigationSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetNavigationSystem, ReturnValue) == 0x000008, "Member 'NavigationSystemV1_GetNavigationSystem::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.GetPathCost
// 0x0040 (0x0040 - 0x0000)
struct NavigationSystemV1_GetPathCost final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathStart;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathEnd;                                           // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathCost;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NavData;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENavigationQueryResult                        ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_GetPathCost) == 0x000008, "Wrong alignment on NavigationSystemV1_GetPathCost");
static_assert(sizeof(NavigationSystemV1_GetPathCost) == 0x000040, "Wrong size on NavigationSystemV1_GetPathCost");
static_assert(offsetof(NavigationSystemV1_GetPathCost, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_GetPathCost::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathCost, PathStart) == 0x000008, "Member 'NavigationSystemV1_GetPathCost::PathStart' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathCost, PathEnd) == 0x000014, "Member 'NavigationSystemV1_GetPathCost::PathEnd' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathCost, PathCost) == 0x000020, "Member 'NavigationSystemV1_GetPathCost::PathCost' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathCost, NavData) == 0x000028, "Member 'NavigationSystemV1_GetPathCost::NavData' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathCost, FilterClass) == 0x000030, "Member 'NavigationSystemV1_GetPathCost::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathCost, ReturnValue) == 0x000038, "Member 'NavigationSystemV1_GetPathCost::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.GetPathLength
// 0x0040 (0x0040 - 0x0000)
struct NavigationSystemV1_GetPathLength final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathStart;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathEnd;                                           // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathLength;                                        // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NavData;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENavigationQueryResult                        ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_GetPathLength) == 0x000008, "Wrong alignment on NavigationSystemV1_GetPathLength");
static_assert(sizeof(NavigationSystemV1_GetPathLength) == 0x000040, "Wrong size on NavigationSystemV1_GetPathLength");
static_assert(offsetof(NavigationSystemV1_GetPathLength, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_GetPathLength::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathLength, PathStart) == 0x000008, "Member 'NavigationSystemV1_GetPathLength::PathStart' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathLength, PathEnd) == 0x000014, "Member 'NavigationSystemV1_GetPathLength::PathEnd' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathLength, PathLength) == 0x000020, "Member 'NavigationSystemV1_GetPathLength::PathLength' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathLength, NavData) == 0x000028, "Member 'NavigationSystemV1_GetPathLength::NavData' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathLength, FilterClass) == 0x000030, "Member 'NavigationSystemV1_GetPathLength::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetPathLength, ReturnValue) == 0x000038, "Member 'NavigationSystemV1_GetPathLength::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.GetRandomPointInNavigableRadius
// 0x0038 (0x0038 - 0x0000)
struct NavigationSystemV1_GetRandomPointInNavigableRadius final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                        NavData;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_GetRandomPointInNavigableRadius) == 0x000008, "Wrong alignment on NavigationSystemV1_GetRandomPointInNavigableRadius");
static_assert(sizeof(NavigationSystemV1_GetRandomPointInNavigableRadius) == 0x000038, "Wrong size on NavigationSystemV1_GetRandomPointInNavigableRadius");
static_assert(offsetof(NavigationSystemV1_GetRandomPointInNavigableRadius, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_GetRandomPointInNavigableRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomPointInNavigableRadius, Origin) == 0x000008, "Member 'NavigationSystemV1_GetRandomPointInNavigableRadius::Origin' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomPointInNavigableRadius, Radius) == 0x000014, "Member 'NavigationSystemV1_GetRandomPointInNavigableRadius::Radius' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomPointInNavigableRadius, NavData) == 0x000018, "Member 'NavigationSystemV1_GetRandomPointInNavigableRadius::NavData' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomPointInNavigableRadius, FilterClass) == 0x000020, "Member 'NavigationSystemV1_GetRandomPointInNavigableRadius::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomPointInNavigableRadius, ReturnValue) == 0x000028, "Member 'NavigationSystemV1_GetRandomPointInNavigableRadius::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.GetRandomReachablePointInRadius
// 0x0038 (0x0038 - 0x0000)
struct NavigationSystemV1_GetRandomReachablePointInRadius final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                        NavData;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_GetRandomReachablePointInRadius) == 0x000008, "Wrong alignment on NavigationSystemV1_GetRandomReachablePointInRadius");
static_assert(sizeof(NavigationSystemV1_GetRandomReachablePointInRadius) == 0x000038, "Wrong size on NavigationSystemV1_GetRandomReachablePointInRadius");
static_assert(offsetof(NavigationSystemV1_GetRandomReachablePointInRadius, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_GetRandomReachablePointInRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomReachablePointInRadius, Origin) == 0x000008, "Member 'NavigationSystemV1_GetRandomReachablePointInRadius::Origin' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomReachablePointInRadius, Radius) == 0x000014, "Member 'NavigationSystemV1_GetRandomReachablePointInRadius::Radius' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomReachablePointInRadius, NavData) == 0x000018, "Member 'NavigationSystemV1_GetRandomReachablePointInRadius::NavData' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomReachablePointInRadius, FilterClass) == 0x000020, "Member 'NavigationSystemV1_GetRandomReachablePointInRadius::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_GetRandomReachablePointInRadius, ReturnValue) == 0x000028, "Member 'NavigationSystemV1_GetRandomReachablePointInRadius::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.IsNavigationBeingBuilt
// 0x0010 (0x0010 - 0x0000)
struct NavigationSystemV1_IsNavigationBeingBuilt final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_IsNavigationBeingBuilt) == 0x000008, "Wrong alignment on NavigationSystemV1_IsNavigationBeingBuilt");
static_assert(sizeof(NavigationSystemV1_IsNavigationBeingBuilt) == 0x000010, "Wrong size on NavigationSystemV1_IsNavigationBeingBuilt");
static_assert(offsetof(NavigationSystemV1_IsNavigationBeingBuilt, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_IsNavigationBeingBuilt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_IsNavigationBeingBuilt, ReturnValue) == 0x000008, "Member 'NavigationSystemV1_IsNavigationBeingBuilt::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.IsNavigationBeingBuiltOrLocked
// 0x0010 (0x0010 - 0x0000)
struct NavigationSystemV1_IsNavigationBeingBuiltOrLocked final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_IsNavigationBeingBuiltOrLocked) == 0x000008, "Wrong alignment on NavigationSystemV1_IsNavigationBeingBuiltOrLocked");
static_assert(sizeof(NavigationSystemV1_IsNavigationBeingBuiltOrLocked) == 0x000010, "Wrong size on NavigationSystemV1_IsNavigationBeingBuiltOrLocked");
static_assert(offsetof(NavigationSystemV1_IsNavigationBeingBuiltOrLocked, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_IsNavigationBeingBuiltOrLocked::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_IsNavigationBeingBuiltOrLocked, ReturnValue) == 0x000008, "Member 'NavigationSystemV1_IsNavigationBeingBuiltOrLocked::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.K2_GetRandomLocationInNavigableRadius
// 0x0040 (0x0040 - 0x0000)
struct NavigationSystemV1_K2_GetRandomLocationInNavigableRadius final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RandomLocation;                                    // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NavData;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_K2_GetRandomLocationInNavigableRadius) == 0x000008, "Wrong alignment on NavigationSystemV1_K2_GetRandomLocationInNavigableRadius");
static_assert(sizeof(NavigationSystemV1_K2_GetRandomLocationInNavigableRadius) == 0x000040, "Wrong size on NavigationSystemV1_K2_GetRandomLocationInNavigableRadius");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomLocationInNavigableRadius, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_K2_GetRandomLocationInNavigableRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomLocationInNavigableRadius, Origin) == 0x000008, "Member 'NavigationSystemV1_K2_GetRandomLocationInNavigableRadius::Origin' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomLocationInNavigableRadius, RandomLocation) == 0x000014, "Member 'NavigationSystemV1_K2_GetRandomLocationInNavigableRadius::RandomLocation' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomLocationInNavigableRadius, Radius) == 0x000020, "Member 'NavigationSystemV1_K2_GetRandomLocationInNavigableRadius::Radius' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomLocationInNavigableRadius, NavData) == 0x000028, "Member 'NavigationSystemV1_K2_GetRandomLocationInNavigableRadius::NavData' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomLocationInNavigableRadius, FilterClass) == 0x000030, "Member 'NavigationSystemV1_K2_GetRandomLocationInNavigableRadius::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomLocationInNavigableRadius, ReturnValue) == 0x000038, "Member 'NavigationSystemV1_K2_GetRandomLocationInNavigableRadius::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.K2_GetRandomPointInNavigableRadius
// 0x0040 (0x0040 - 0x0000)
struct NavigationSystemV1_K2_GetRandomPointInNavigableRadius final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RandomLocation;                                    // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NavData;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_K2_GetRandomPointInNavigableRadius) == 0x000008, "Wrong alignment on NavigationSystemV1_K2_GetRandomPointInNavigableRadius");
static_assert(sizeof(NavigationSystemV1_K2_GetRandomPointInNavigableRadius) == 0x000040, "Wrong size on NavigationSystemV1_K2_GetRandomPointInNavigableRadius");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomPointInNavigableRadius, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_K2_GetRandomPointInNavigableRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomPointInNavigableRadius, Origin) == 0x000008, "Member 'NavigationSystemV1_K2_GetRandomPointInNavigableRadius::Origin' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomPointInNavigableRadius, RandomLocation) == 0x000014, "Member 'NavigationSystemV1_K2_GetRandomPointInNavigableRadius::RandomLocation' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomPointInNavigableRadius, Radius) == 0x000020, "Member 'NavigationSystemV1_K2_GetRandomPointInNavigableRadius::Radius' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomPointInNavigableRadius, NavData) == 0x000028, "Member 'NavigationSystemV1_K2_GetRandomPointInNavigableRadius::NavData' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomPointInNavigableRadius, FilterClass) == 0x000030, "Member 'NavigationSystemV1_K2_GetRandomPointInNavigableRadius::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomPointInNavigableRadius, ReturnValue) == 0x000038, "Member 'NavigationSystemV1_K2_GetRandomPointInNavigableRadius::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.K2_GetRandomReachablePointInRadius
// 0x0040 (0x0040 - 0x0000)
struct NavigationSystemV1_K2_GetRandomReachablePointInRadius final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RandomLocation;                                    // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NavData;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_K2_GetRandomReachablePointInRadius) == 0x000008, "Wrong alignment on NavigationSystemV1_K2_GetRandomReachablePointInRadius");
static_assert(sizeof(NavigationSystemV1_K2_GetRandomReachablePointInRadius) == 0x000040, "Wrong size on NavigationSystemV1_K2_GetRandomReachablePointInRadius");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomReachablePointInRadius, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_K2_GetRandomReachablePointInRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomReachablePointInRadius, Origin) == 0x000008, "Member 'NavigationSystemV1_K2_GetRandomReachablePointInRadius::Origin' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomReachablePointInRadius, RandomLocation) == 0x000014, "Member 'NavigationSystemV1_K2_GetRandomReachablePointInRadius::RandomLocation' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomReachablePointInRadius, Radius) == 0x000020, "Member 'NavigationSystemV1_K2_GetRandomReachablePointInRadius::Radius' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomReachablePointInRadius, NavData) == 0x000028, "Member 'NavigationSystemV1_K2_GetRandomReachablePointInRadius::NavData' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomReachablePointInRadius, FilterClass) == 0x000030, "Member 'NavigationSystemV1_K2_GetRandomReachablePointInRadius::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_GetRandomReachablePointInRadius, ReturnValue) == 0x000038, "Member 'NavigationSystemV1_K2_GetRandomReachablePointInRadius::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.K2_ProjectPointToNavigation
// 0x0040 (0x0040 - 0x0000)
struct NavigationSystemV1_K2_ProjectPointToNavigation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProjectedLocation;                                 // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                        NavData;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                QueryExtent;                                       // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_K2_ProjectPointToNavigation) == 0x000008, "Wrong alignment on NavigationSystemV1_K2_ProjectPointToNavigation");
static_assert(sizeof(NavigationSystemV1_K2_ProjectPointToNavigation) == 0x000040, "Wrong size on NavigationSystemV1_K2_ProjectPointToNavigation");
static_assert(offsetof(NavigationSystemV1_K2_ProjectPointToNavigation, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_K2_ProjectPointToNavigation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_ProjectPointToNavigation, Point) == 0x000008, "Member 'NavigationSystemV1_K2_ProjectPointToNavigation::Point' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_ProjectPointToNavigation, ProjectedLocation) == 0x000014, "Member 'NavigationSystemV1_K2_ProjectPointToNavigation::ProjectedLocation' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_ProjectPointToNavigation, NavData) == 0x000020, "Member 'NavigationSystemV1_K2_ProjectPointToNavigation::NavData' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_ProjectPointToNavigation, FilterClass) == 0x000028, "Member 'NavigationSystemV1_K2_ProjectPointToNavigation::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_ProjectPointToNavigation, QueryExtent) == 0x000030, "Member 'NavigationSystemV1_K2_ProjectPointToNavigation::QueryExtent' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_ProjectPointToNavigation, ReturnValue) == 0x00003C, "Member 'NavigationSystemV1_K2_ProjectPointToNavigation::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.NavigationRaycast
// 0x0048 (0x0048 - 0x0000)
struct NavigationSystemV1_NavigationRaycast final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayStart;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayEnd;                                            // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Querier;                                           // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_NavigationRaycast) == 0x000008, "Wrong alignment on NavigationSystemV1_NavigationRaycast");
static_assert(sizeof(NavigationSystemV1_NavigationRaycast) == 0x000048, "Wrong size on NavigationSystemV1_NavigationRaycast");
static_assert(offsetof(NavigationSystemV1_NavigationRaycast, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_NavigationRaycast::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_NavigationRaycast, RayStart) == 0x000008, "Member 'NavigationSystemV1_NavigationRaycast::RayStart' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_NavigationRaycast, RayEnd) == 0x000014, "Member 'NavigationSystemV1_NavigationRaycast::RayEnd' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_NavigationRaycast, HitLocation) == 0x000020, "Member 'NavigationSystemV1_NavigationRaycast::HitLocation' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_NavigationRaycast, FilterClass) == 0x000030, "Member 'NavigationSystemV1_NavigationRaycast::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_NavigationRaycast, Querier) == 0x000038, "Member 'NavigationSystemV1_NavigationRaycast::Querier' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_NavigationRaycast, ReturnValue) == 0x000040, "Member 'NavigationSystemV1_NavigationRaycast::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.ProjectPointToNavigation
// 0x0040 (0x0040 - 0x0000)
struct NavigationSystemV1_ProjectPointToNavigation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NavData;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                QueryExtent;                                       // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_ProjectPointToNavigation) == 0x000008, "Wrong alignment on NavigationSystemV1_ProjectPointToNavigation");
static_assert(sizeof(NavigationSystemV1_ProjectPointToNavigation) == 0x000040, "Wrong size on NavigationSystemV1_ProjectPointToNavigation");
static_assert(offsetof(NavigationSystemV1_ProjectPointToNavigation, WorldContextObject) == 0x000000, "Member 'NavigationSystemV1_ProjectPointToNavigation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_ProjectPointToNavigation, Point) == 0x000008, "Member 'NavigationSystemV1_ProjectPointToNavigation::Point' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_ProjectPointToNavigation, NavData) == 0x000018, "Member 'NavigationSystemV1_ProjectPointToNavigation::NavData' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_ProjectPointToNavigation, FilterClass) == 0x000020, "Member 'NavigationSystemV1_ProjectPointToNavigation::FilterClass' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_ProjectPointToNavigation, QueryExtent) == 0x000028, "Member 'NavigationSystemV1_ProjectPointToNavigation::QueryExtent' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_ProjectPointToNavigation, ReturnValue) == 0x000034, "Member 'NavigationSystemV1_ProjectPointToNavigation::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.SimpleMoveToActor
// 0x0010 (0x0010 - 0x0000)
struct NavigationSystemV1_SimpleMoveToActor final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Goal;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_SimpleMoveToActor) == 0x000008, "Wrong alignment on NavigationSystemV1_SimpleMoveToActor");
static_assert(sizeof(NavigationSystemV1_SimpleMoveToActor) == 0x000010, "Wrong size on NavigationSystemV1_SimpleMoveToActor");
static_assert(offsetof(NavigationSystemV1_SimpleMoveToActor, Controller) == 0x000000, "Member 'NavigationSystemV1_SimpleMoveToActor::Controller' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_SimpleMoveToActor, Goal) == 0x000008, "Member 'NavigationSystemV1_SimpleMoveToActor::Goal' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.SimpleMoveToLocation
// 0x0018 (0x0018 - 0x0000)
struct NavigationSystemV1_SimpleMoveToLocation final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Goal;                                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_SimpleMoveToLocation) == 0x000008, "Wrong alignment on NavigationSystemV1_SimpleMoveToLocation");
static_assert(sizeof(NavigationSystemV1_SimpleMoveToLocation) == 0x000018, "Wrong size on NavigationSystemV1_SimpleMoveToLocation");
static_assert(offsetof(NavigationSystemV1_SimpleMoveToLocation, Controller) == 0x000000, "Member 'NavigationSystemV1_SimpleMoveToLocation::Controller' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_SimpleMoveToLocation, Goal) == 0x000008, "Member 'NavigationSystemV1_SimpleMoveToLocation::Goal' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.K2_ReplaceAreaInOctreeData
// 0x0020 (0x0020 - 0x0000)
struct NavigationSystemV1_K2_ReplaceAreaInOctreeData final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   OldArea;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   NewArea;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationSystemV1_K2_ReplaceAreaInOctreeData) == 0x000008, "Wrong alignment on NavigationSystemV1_K2_ReplaceAreaInOctreeData");
static_assert(sizeof(NavigationSystemV1_K2_ReplaceAreaInOctreeData) == 0x000020, "Wrong size on NavigationSystemV1_K2_ReplaceAreaInOctreeData");
static_assert(offsetof(NavigationSystemV1_K2_ReplaceAreaInOctreeData, Object) == 0x000000, "Member 'NavigationSystemV1_K2_ReplaceAreaInOctreeData::Object' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_ReplaceAreaInOctreeData, OldArea) == 0x000008, "Member 'NavigationSystemV1_K2_ReplaceAreaInOctreeData::OldArea' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_ReplaceAreaInOctreeData, NewArea) == 0x000010, "Member 'NavigationSystemV1_K2_ReplaceAreaInOctreeData::NewArea' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_K2_ReplaceAreaInOctreeData, ReturnValue) == 0x000018, "Member 'NavigationSystemV1_K2_ReplaceAreaInOctreeData::ReturnValue' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.OnNavigationBoundsUpdated
// 0x0008 (0x0008 - 0x0000)
struct NavigationSystemV1_OnNavigationBoundsUpdated final
{
public:
	class ANavMeshBoundsVolume*                   NavVolume;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_OnNavigationBoundsUpdated) == 0x000008, "Wrong alignment on NavigationSystemV1_OnNavigationBoundsUpdated");
static_assert(sizeof(NavigationSystemV1_OnNavigationBoundsUpdated) == 0x000008, "Wrong size on NavigationSystemV1_OnNavigationBoundsUpdated");
static_assert(offsetof(NavigationSystemV1_OnNavigationBoundsUpdated, NavVolume) == 0x000000, "Member 'NavigationSystemV1_OnNavigationBoundsUpdated::NavVolume' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.RegisterNavigationInvoker
// 0x0010 (0x0010 - 0x0000)
struct NavigationSystemV1_RegisterNavigationInvoker final
{
public:
	class AActor*                                 Invoker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileGenerationRadius;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileRemovalRadius;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_RegisterNavigationInvoker) == 0x000008, "Wrong alignment on NavigationSystemV1_RegisterNavigationInvoker");
static_assert(sizeof(NavigationSystemV1_RegisterNavigationInvoker) == 0x000010, "Wrong size on NavigationSystemV1_RegisterNavigationInvoker");
static_assert(offsetof(NavigationSystemV1_RegisterNavigationInvoker, Invoker) == 0x000000, "Member 'NavigationSystemV1_RegisterNavigationInvoker::Invoker' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_RegisterNavigationInvoker, TileGenerationRadius) == 0x000008, "Member 'NavigationSystemV1_RegisterNavigationInvoker::TileGenerationRadius' has a wrong offset!");
static_assert(offsetof(NavigationSystemV1_RegisterNavigationInvoker, TileRemovalRadius) == 0x00000C, "Member 'NavigationSystemV1_RegisterNavigationInvoker::TileRemovalRadius' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.SetGeometryGatheringMode
// 0x0001 (0x0001 - 0x0000)
struct NavigationSystemV1_SetGeometryGatheringMode final
{
public:
	ENavDataGatheringModeConfig                   NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_SetGeometryGatheringMode) == 0x000001, "Wrong alignment on NavigationSystemV1_SetGeometryGatheringMode");
static_assert(sizeof(NavigationSystemV1_SetGeometryGatheringMode) == 0x000001, "Wrong size on NavigationSystemV1_SetGeometryGatheringMode");
static_assert(offsetof(NavigationSystemV1_SetGeometryGatheringMode, NewMode) == 0x000000, "Member 'NavigationSystemV1_SetGeometryGatheringMode::NewMode' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.SetMaxSimultaneousTileGenerationJobsCount
// 0x0004 (0x0004 - 0x0000)
struct NavigationSystemV1_SetMaxSimultaneousTileGenerationJobsCount final
{
public:
	int32                                         MaxNumberOfJobs;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_SetMaxSimultaneousTileGenerationJobsCount) == 0x000004, "Wrong alignment on NavigationSystemV1_SetMaxSimultaneousTileGenerationJobsCount");
static_assert(sizeof(NavigationSystemV1_SetMaxSimultaneousTileGenerationJobsCount) == 0x000004, "Wrong size on NavigationSystemV1_SetMaxSimultaneousTileGenerationJobsCount");
static_assert(offsetof(NavigationSystemV1_SetMaxSimultaneousTileGenerationJobsCount, MaxNumberOfJobs) == 0x000000, "Member 'NavigationSystemV1_SetMaxSimultaneousTileGenerationJobsCount::MaxNumberOfJobs' has a wrong offset!");

// Function NavigationSystem.NavigationSystemV1.UnregisterNavigationInvoker
// 0x0008 (0x0008 - 0x0000)
struct NavigationSystemV1_UnregisterNavigationInvoker final
{
public:
	class AActor*                                 Invoker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationSystemV1_UnregisterNavigationInvoker) == 0x000008, "Wrong alignment on NavigationSystemV1_UnregisterNavigationInvoker");
static_assert(sizeof(NavigationSystemV1_UnregisterNavigationInvoker) == 0x000008, "Wrong size on NavigationSystemV1_UnregisterNavigationInvoker");
static_assert(offsetof(NavigationSystemV1_UnregisterNavigationInvoker, Invoker) == 0x000000, "Member 'NavigationSystemV1_UnregisterNavigationInvoker::Invoker' has a wrong offset!");

// Function NavigationSystem.NavRelevantComponent.SetNavigationRelevancy
// 0x0001 (0x0001 - 0x0000)
struct NavRelevantComponent_SetNavigationRelevancy final
{
public:
	bool                                          bRelevant;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavRelevantComponent_SetNavigationRelevancy) == 0x000001, "Wrong alignment on NavRelevantComponent_SetNavigationRelevancy");
static_assert(sizeof(NavRelevantComponent_SetNavigationRelevancy) == 0x000001, "Wrong size on NavRelevantComponent_SetNavigationRelevancy");
static_assert(offsetof(NavRelevantComponent_SetNavigationRelevancy, bRelevant) == 0x000000, "Member 'NavRelevantComponent_SetNavigationRelevancy::bRelevant' has a wrong offset!");

// Function NavigationSystem.NavModifierComponent.SetAreaClass
// 0x0008 (0x0008 - 0x0000)
struct NavModifierComponent_SetAreaClass final
{
public:
	TSubclassOf<class UNavArea>                   NewAreaClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavModifierComponent_SetAreaClass) == 0x000008, "Wrong alignment on NavModifierComponent_SetAreaClass");
static_assert(sizeof(NavModifierComponent_SetAreaClass) == 0x000008, "Wrong size on NavModifierComponent_SetAreaClass");
static_assert(offsetof(NavModifierComponent_SetAreaClass, NewAreaClass) == 0x000000, "Member 'NavModifierComponent_SetAreaClass::NewAreaClass' has a wrong offset!");

// Function NavigationSystem.NavModifierVolume.SetAreaClass
// 0x0008 (0x0008 - 0x0000)
struct NavModifierVolume_SetAreaClass final
{
public:
	TSubclassOf<class UNavArea>                   NewAreaClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavModifierVolume_SetAreaClass) == 0x000008, "Wrong alignment on NavModifierVolume_SetAreaClass");
static_assert(sizeof(NavModifierVolume_SetAreaClass) == 0x000008, "Wrong size on NavModifierVolume_SetAreaClass");
static_assert(offsetof(NavModifierVolume_SetAreaClass, NewAreaClass) == 0x000000, "Member 'NavModifierVolume_SetAreaClass::NewAreaClass' has a wrong offset!");

// Function NavigationSystem.RecastNavMesh.K2_ReplaceAreaInTileBounds
// 0x0038 (0x0038 - 0x0000)
struct RecastNavMesh_K2_ReplaceAreaInTileBounds final
{
public:
	struct FBox                                   Bounds;                                            // 0x0000(0x001C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavArea>                   OldArea;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   NewArea;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaceLinks;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RecastNavMesh_K2_ReplaceAreaInTileBounds) == 0x000008, "Wrong alignment on RecastNavMesh_K2_ReplaceAreaInTileBounds");
static_assert(sizeof(RecastNavMesh_K2_ReplaceAreaInTileBounds) == 0x000038, "Wrong size on RecastNavMesh_K2_ReplaceAreaInTileBounds");
static_assert(offsetof(RecastNavMesh_K2_ReplaceAreaInTileBounds, Bounds) == 0x000000, "Member 'RecastNavMesh_K2_ReplaceAreaInTileBounds::Bounds' has a wrong offset!");
static_assert(offsetof(RecastNavMesh_K2_ReplaceAreaInTileBounds, OldArea) == 0x000020, "Member 'RecastNavMesh_K2_ReplaceAreaInTileBounds::OldArea' has a wrong offset!");
static_assert(offsetof(RecastNavMesh_K2_ReplaceAreaInTileBounds, NewArea) == 0x000028, "Member 'RecastNavMesh_K2_ReplaceAreaInTileBounds::NewArea' has a wrong offset!");
static_assert(offsetof(RecastNavMesh_K2_ReplaceAreaInTileBounds, ReplaceLinks) == 0x000030, "Member 'RecastNavMesh_K2_ReplaceAreaInTileBounds::ReplaceLinks' has a wrong offset!");
static_assert(offsetof(RecastNavMesh_K2_ReplaceAreaInTileBounds, ReturnValue) == 0x000031, "Member 'RecastNavMesh_K2_ReplaceAreaInTileBounds::ReturnValue' has a wrong offset!");

}

