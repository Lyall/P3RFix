#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LS_BtlResult_Master

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "LevelSequence_classes.hpp"
#include "Xrd777_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass LS_BtlResult_Master.SequenceDirector_C
// 0x0008 (0x0040 - 0x0038)
class LS_BtlResult_Master::USequenceDirector_C final : public ULevelSequenceDirector
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0038(0x0008)(ZeroConstructor, Transient, DuplicateTransient)

public:
	void ExecuteUbergraph_SequenceDirector(int32 EntryPoint);
	void BtlEventAssistant_Event_2(class ABP_BtlEventAssistant_C* BtlEventAssistant, int32 ID);
	void BtlEventAssistant_Event_1(class ABP_BtlEventAssistant_C* BtlEventAssistant);
	void BtlEventAssistant_Event_0(class ABP_BtlEventAssistant_C* BtlEventAssistant);
	void BCD_Invoke_Event_7(class ABP_BtlPerformer_C* BCD_Invoke, EBtlSceneAnimationType AnimId, EBtlSceneAnimationType AnimID_Next);
	void BCD_PartyMember3_Event_4(class ABP_BtlPerformer_C* BCD_PartyMember3, EBtlSceneAnimationType AnimId, EBtlSceneAnimationType AnimID_Next);
	void BCD_PartyMember2_Event_4(class ABP_BtlPerformer_C* BCD_PartyMember2, EBtlSceneAnimationType AnimId, EBtlSceneAnimationType AnimID_Next);
	void BCD_PartyMember1_Event_5(class ABP_BtlPerformer_C* BCD_PartyMember1, EBtlSceneAnimationType AnimId, EBtlSceneAnimationType AnimID_Next);
	void BCD_PartyMember1_Event_4(class ABP_BtlPerformer_C* BCD_PartyMember1, bool Bind);
	void BCD_PartyMember3_Event_3(class ABP_BtlPerformer_C* BCD_PartyMember3, EBtlAnimationType Anim_ID, float Blend);
	void BCD_PartyMember2_Event_3(class ABP_BtlPerformer_C* BCD_PartyMember2, EBtlAnimationType Anim_ID, float Blend);
	void BCD_PartyMember1_Event_3(class ABP_BtlPerformer_C* BCD_PartyMember1, EBtlAnimationType Anim_ID, float Blend);
	void BCD_Invoke_Event_5(class ABP_BtlPerformer_C* BCD_Invoke, EBtlAnimationType Anim_ID, float Blend);
	void BCD_PartyMember3_Event_2(class ABP_BtlPerformer_C* BCD_PartyMember3, EBtlAnimationType Anim_ID, float Blend);
	void BCD_PartyMember2_Event_2(class ABP_BtlPerformer_C* BCD_PartyMember2, EBtlAnimationType Anim_ID, float Blend);
	void BCD_PartyMember1_Event_2(class ABP_BtlPerformer_C* BCD_PartyMember1, EBtlAnimationType Anim_ID, float Blend);
	void BCD_Invoke_Event_4(class ABP_BtlPerformer_C* BCD_Invoke, EBtlAnimationType Anim_ID, float Blend);
	void BCD_Invoke_Event_2(class ABP_BtlPerformer_C* BCD_Invoke, bool Bind);
	void BCD_PartyMember3_Event_1(class ABP_BtlPerformer_C* BCD_PartyMember3, EBtlAnimationType Anim_ID, float Blend);
	void BCD_PartyMember3_Event_0(class ABP_BtlPerformer_C* BCD_PartyMember3, bool Bind);
	void BCD_PartyMember2_Event_0(class ABP_BtlPerformer_C* BCD_PartyMember2, bool Bind);
	void BCD_PartyMember1_Event_0(class ABP_BtlPerformer_C* BCD_PartyMember1, bool Bind);
	void BCD_Invoke_Event_3(class ABP_BtlPerformer_C* BCD_Invoke, float Interp_Time, float Radius, float Height_Ratio, float Rotate_Degree, EBtlEventAreaType TargetType);
	void BCD_Invoke_Event_1(class ABP_BtlPerformer_C* BCD_Invoke, bool Bind);
	void BCD_Invoke_Event_0(class ABP_BtlPerformer_C* BCD_Invoke);
	void SequenceEvent__ENTRYPOINTSequenceDirector_0(class ABP_BtlPerformer_C* BCD_Invoke);
	void SequenceEvent__ENTRYPOINTSequenceDirector_1(class ABP_BtlPerformer_C* BCD_Invoke);
	void SequenceEvent__ENTRYPOINTSequenceDirector_2(class ABP_BtlPerformer_C* BCD_PartyMember1);
	void SequenceEvent__ENTRYPOINTSequenceDirector_3(class ABP_BtlPerformer_C* BCD_PartyMember2);
	void SequenceEvent__ENTRYPOINTSequenceDirector_4(class ABP_BtlPerformer_C* BCD_PartyMember3);
	void SequenceEvent__ENTRYPOINTSequenceDirector_5(class ABP_BtlPerformer_C* BCD_PartyMember3);
	void SequenceEvent__ENTRYPOINTSequenceDirector_6(class ABP_BtlPerformer_C* BCD_PartyMember2);
	void SequenceEvent__ENTRYPOINTSequenceDirector_7(class ABP_BtlPerformer_C* BCD_PartyMember3);
	void SequenceEvent__ENTRYPOINTSequenceDirector_8(class ABP_BtlPerformer_C* BCD_Invoke);
	void SequenceEvent__ENTRYPOINTSequenceDirector_9(class ABP_BtlPerformer_C* BCD_PartyMember1);
	void SequenceEvent__ENTRYPOINTSequenceDirector_10(class ABP_BtlPerformer_C* BCD_PartyMember1);
	void SequenceEvent__ENTRYPOINTSequenceDirector_11(class ABP_BtlEventAssistant_C* BtlEventAssistant);
	void SequenceEvent__ENTRYPOINTSequenceDirector_12(class ABP_BtlEventAssistant_C* BtlEventAssistant);
	void SequenceEvent__ENTRYPOINTSequenceDirector_13(class ABP_BtlEventAssistant_C* BtlEventAssistant);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlueprintGeneratedClass LS_BtlResult_Master.SequenceDirector_C", true, "SequenceDirector_C">();
	}
	static class LS_BtlResult_Master::USequenceDirector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<LS_BtlResult_Master::USequenceDirector_C>();
	}
};
static_assert(alignof(LS_BtlResult_Master::USequenceDirector_C) == 0x000008, "Wrong alignment on LS_BtlResult_Master::USequenceDirector_C");
static_assert(sizeof(LS_BtlResult_Master::USequenceDirector_C) == 0x000040, "Wrong size on LS_BtlResult_Master::USequenceDirector_C");
static_assert(offsetof(LS_BtlResult_Master::USequenceDirector_C, UberGraphFrame) == 0x000038, "Member 'LS_BtlResult_Master::USequenceDirector_C::UberGraphFrame' has a wrong offset!");

}

