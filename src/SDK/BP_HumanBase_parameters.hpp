#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HumanBase

#include "Basic.hpp"

#include "ALS_MovementAction_structs.hpp"
#include "ALS_ComponentAndTransform_structs.hpp"
#include "Engine_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MantleType_structs.hpp"
#include "Mantle_Asset_structs.hpp"
#include "Mantle_Params_structs.hpp"
#include "Mantle_TraceSettings_structs.hpp"
#include "MovementSettings_structs.hpp"
#include "MovementSettings_State_structs.hpp"


namespace SDK::Params
{

// Function BP_HumanBase.BP_HumanBase_C.ExecuteUbergraph_BP_HumanBase
// 0x0110 (0x0110 - 0x0000)
struct BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HalfHeightAdjust_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ScaledHalfHeightAdjust_1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HalfHeightAdjust;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ScaledHalfHeightAdjust;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MantleCheck_CanClimb_Vault;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovementMode                                 K2Node_Event_PrevMovementMode;                     // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Event_NewMovementMode;                      // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_PrevCustomMode;                       // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_NewCustomMode;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x0034(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IALS_Animation_BPI_C>  K2Node_DynamicCast_AsALS_Animation_BPI;            // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default;                             // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EALS_MovementState                            K2Node_Event_NewMovementState;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EALS_MovementAction                           K2Node_Event_NewMovementAction;                    // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EALS_RotationMode                             K2Node_Event_NewRotationMode;                      // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EALS_Gait                                     K2Node_Event_NewGait;                              // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x00E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EALS_ViewMode                                 K2Node_Event_NewViewMode;                          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EALS_OverlayState                             K2Node_Event_NewOverlayState;                      // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_5;          // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetRollAnimation_ReturnValue;             // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetRollAnimation_ReturnValue_1;           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue_1;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase) == 0x000008, "Wrong alignment on BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase");
static_assert(sizeof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase) == 0x000110, "Wrong size on BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, EntryPoint) == 0x000000, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_HalfHeightAdjust_1) == 0x00000C, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_HalfHeightAdjust_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_ScaledHalfHeightAdjust_1) == 0x000010, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_ScaledHalfHeightAdjust_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_HalfHeightAdjust) == 0x000014, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_ScaledHalfHeightAdjust) == 0x000018, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_ScaledHalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_MantleCheck_CanClimb_Vault) == 0x00001C, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_MantleCheck_CanClimb_Vault' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_PrevMovementMode) == 0x00001D, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_NewMovementMode) == 0x00001E, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_NewMovementMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_PrevCustomMode) == 0x00001F, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_PrevCustomMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_NewCustomMode) == 0x000020, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_NewCustomMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000024, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_Hit) == 0x000034, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_IsValid_ReturnValue_2) == 0x0000BC, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_DynamicCast_AsALS_Animation_BPI) == 0x0000C0, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_DynamicCast_AsALS_Animation_BPI' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_SwitchEnum_CmpSuccess) == 0x0000D1, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, Temp_bool_Variable) == 0x0000D2, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Select_Default) == 0x0000D4, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_NewMovementState) == 0x0000E0, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_NewMovementState' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000E1, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_NewMovementAction) == 0x0000E2, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_NewMovementAction' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0000E3, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_NewRotationMode) == 0x0000E4, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_NewRotationMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x0000E5, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_NewGait) == 0x0000E6, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_NewGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x0000E7, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_NewViewMode) == 0x0000E8, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_NewViewMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x0000E9, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_Event_NewOverlayState) == 0x0000EA, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_Event_NewOverlayState' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_NotEqual_ByteByte_ReturnValue_5) == 0x0000EB, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_NotEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_InputAxisEvent_AxisValue_1) == 0x0000EC, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_GetRollAnimation_ReturnValue) == 0x0000F0, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_GetRollAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_GetRollAnimation_ReturnValue_1) == 0x0000F8, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_GetRollAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_Montage_Play_ReturnValue) == 0x000100, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, CallFunc_Montage_Play_ReturnValue_1) == 0x000104, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::CallFunc_Montage_Play_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase, K2Node_InputAxisEvent_AxisValue) == 0x000108, "Member 'BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct BP_HumanBase_C_InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on BP_HumanBase_C_InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0");
static_assert(sizeof(BP_HumanBase_C_InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on BP_HumanBase_C_InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0");
static_assert(offsetof(BP_HumanBase_C_InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'BP_HumanBase_C_InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1
// 0x0004 (0x0004 - 0x0000)
struct BP_HumanBase_C_InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1) == 0x000004, "Wrong alignment on BP_HumanBase_C_InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1");
static_assert(sizeof(BP_HumanBase_C_InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1) == 0x000004, "Wrong size on BP_HumanBase_C_InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1");
static_assert(offsetof(BP_HumanBase_C_InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1, AxisValue) == 0x000000, "Member 'BP_HumanBase_C_InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1::AxisValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_OverlayState
// 0x0001 (0x0001 - 0x0000)
struct BP_HumanBase_C_BPI_Set_OverlayState final
{
public:
	EALS_OverlayState                             NewOverlayState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_BPI_Set_OverlayState) == 0x000001, "Wrong alignment on BP_HumanBase_C_BPI_Set_OverlayState");
static_assert(sizeof(BP_HumanBase_C_BPI_Set_OverlayState) == 0x000001, "Wrong size on BP_HumanBase_C_BPI_Set_OverlayState");
static_assert(offsetof(BP_HumanBase_C_BPI_Set_OverlayState, NewOverlayState) == 0x000000, "Member 'BP_HumanBase_C_BPI_Set_OverlayState::NewOverlayState' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_ViewMode
// 0x0001 (0x0001 - 0x0000)
struct BP_HumanBase_C_BPI_Set_ViewMode final
{
public:
	EALS_ViewMode                                 NewViewMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_BPI_Set_ViewMode) == 0x000001, "Wrong alignment on BP_HumanBase_C_BPI_Set_ViewMode");
static_assert(sizeof(BP_HumanBase_C_BPI_Set_ViewMode) == 0x000001, "Wrong size on BP_HumanBase_C_BPI_Set_ViewMode");
static_assert(offsetof(BP_HumanBase_C_BPI_Set_ViewMode, NewViewMode) == 0x000000, "Member 'BP_HumanBase_C_BPI_Set_ViewMode::NewViewMode' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_Gait
// 0x0001 (0x0001 - 0x0000)
struct BP_HumanBase_C_BPI_Set_Gait final
{
public:
	EALS_Gait                                     NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_BPI_Set_Gait) == 0x000001, "Wrong alignment on BP_HumanBase_C_BPI_Set_Gait");
static_assert(sizeof(BP_HumanBase_C_BPI_Set_Gait) == 0x000001, "Wrong size on BP_HumanBase_C_BPI_Set_Gait");
static_assert(offsetof(BP_HumanBase_C_BPI_Set_Gait, NewGait) == 0x000000, "Member 'BP_HumanBase_C_BPI_Set_Gait::NewGait' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_RotationMode
// 0x0001 (0x0001 - 0x0000)
struct BP_HumanBase_C_BPI_Set_RotationMode final
{
public:
	EALS_RotationMode                             NewRotationMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_BPI_Set_RotationMode) == 0x000001, "Wrong alignment on BP_HumanBase_C_BPI_Set_RotationMode");
static_assert(sizeof(BP_HumanBase_C_BPI_Set_RotationMode) == 0x000001, "Wrong size on BP_HumanBase_C_BPI_Set_RotationMode");
static_assert(offsetof(BP_HumanBase_C_BPI_Set_RotationMode, NewRotationMode) == 0x000000, "Member 'BP_HumanBase_C_BPI_Set_RotationMode::NewRotationMode' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_MovementAction
// 0x0001 (0x0001 - 0x0000)
struct BP_HumanBase_C_BPI_Set_MovementAction final
{
public:
	EALS_MovementAction                           NewMovementAction;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_BPI_Set_MovementAction) == 0x000001, "Wrong alignment on BP_HumanBase_C_BPI_Set_MovementAction");
static_assert(sizeof(BP_HumanBase_C_BPI_Set_MovementAction) == 0x000001, "Wrong size on BP_HumanBase_C_BPI_Set_MovementAction");
static_assert(offsetof(BP_HumanBase_C_BPI_Set_MovementAction, NewMovementAction) == 0x000000, "Member 'BP_HumanBase_C_BPI_Set_MovementAction::NewMovementAction' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_MovementState
// 0x0001 (0x0001 - 0x0000)
struct BP_HumanBase_C_BPI_Set_MovementState final
{
public:
	EALS_MovementState                            NewMovementState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_BPI_Set_MovementState) == 0x000001, "Wrong alignment on BP_HumanBase_C_BPI_Set_MovementState");
static_assert(sizeof(BP_HumanBase_C_BPI_Set_MovementState) == 0x000001, "Wrong size on BP_HumanBase_C_BPI_Set_MovementState");
static_assert(offsetof(BP_HumanBase_C_BPI_Set_MovementState, NewMovementState) == 0x000000, "Member 'BP_HumanBase_C_BPI_Set_MovementState::NewMovementState' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.OnLanded
// 0x0088 (0x0088 - 0x0000)
struct BP_HumanBase_C_OnLanded final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_HumanBase_C_OnLanded) == 0x000004, "Wrong alignment on BP_HumanBase_C_OnLanded");
static_assert(sizeof(BP_HumanBase_C_OnLanded) == 0x000088, "Wrong size on BP_HumanBase_C_OnLanded");
static_assert(offsetof(BP_HumanBase_C_OnLanded, Hit) == 0x000000, "Member 'BP_HumanBase_C_OnLanded::Hit' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.K2_OnMovementModeChanged
// 0x0004 (0x0004 - 0x0000)
struct BP_HumanBase_C_K2_OnMovementModeChanged final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_K2_OnMovementModeChanged) == 0x000001, "Wrong alignment on BP_HumanBase_C_K2_OnMovementModeChanged");
static_assert(sizeof(BP_HumanBase_C_K2_OnMovementModeChanged) == 0x000004, "Wrong size on BP_HumanBase_C_K2_OnMovementModeChanged");
static_assert(offsetof(BP_HumanBase_C_K2_OnMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'BP_HumanBase_C_K2_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_K2_OnMovementModeChanged, NewMovementMode) == 0x000001, "Member 'BP_HumanBase_C_K2_OnMovementModeChanged::NewMovementMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_K2_OnMovementModeChanged, PrevCustomMode) == 0x000002, "Member 'BP_HumanBase_C_K2_OnMovementModeChanged::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_K2_OnMovementModeChanged, NewCustomMode) == 0x000003, "Member 'BP_HumanBase_C_K2_OnMovementModeChanged::NewCustomMode' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.K2_OnEndCrouch
// 0x0008 (0x0008 - 0x0000)
struct BP_HumanBase_C_K2_OnEndCrouch final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_K2_OnEndCrouch) == 0x000004, "Wrong alignment on BP_HumanBase_C_K2_OnEndCrouch");
static_assert(sizeof(BP_HumanBase_C_K2_OnEndCrouch) == 0x000008, "Wrong size on BP_HumanBase_C_K2_OnEndCrouch");
static_assert(offsetof(BP_HumanBase_C_K2_OnEndCrouch, HalfHeightAdjust) == 0x000000, "Member 'BP_HumanBase_C_K2_OnEndCrouch::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_K2_OnEndCrouch, ScaledHalfHeightAdjust) == 0x000004, "Member 'BP_HumanBase_C_K2_OnEndCrouch::ScaledHalfHeightAdjust' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.K2_OnStartCrouch
// 0x0008 (0x0008 - 0x0000)
struct BP_HumanBase_C_K2_OnStartCrouch final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_K2_OnStartCrouch) == 0x000004, "Wrong alignment on BP_HumanBase_C_K2_OnStartCrouch");
static_assert(sizeof(BP_HumanBase_C_K2_OnStartCrouch) == 0x000008, "Wrong size on BP_HumanBase_C_K2_OnStartCrouch");
static_assert(offsetof(BP_HumanBase_C_K2_OnStartCrouch, HalfHeightAdjust) == 0x000000, "Member 'BP_HumanBase_C_K2_OnStartCrouch::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_K2_OnStartCrouch, ScaledHalfHeightAdjust) == 0x000004, "Member 'BP_HumanBase_C_K2_OnStartCrouch::ScaledHalfHeightAdjust' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_HumanBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_HumanBase_C_ReceiveTick");
static_assert(sizeof(BP_HumanBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_HumanBase_C_ReceiveTick");
static_assert(offsetof(BP_HumanBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_HumanBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.PlayerMovementInput
// 0x0030 (0x0030 - 0x0000)
struct BP_HumanBase_C_PlayerMovementInput final
{
public:
	bool                                          IsForwardAxis;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInputAxisValue_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlForward_RightVector_ForwardVector; // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlForward_RightVector_RightVector; // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputAxisValue_ReturnValue_1;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FixDiagonalGamepadValues_Y_Out;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FixDiagonalGamepadValues_X_Out;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_PlayerMovementInput) == 0x000004, "Wrong alignment on BP_HumanBase_C_PlayerMovementInput");
static_assert(sizeof(BP_HumanBase_C_PlayerMovementInput) == 0x000030, "Wrong size on BP_HumanBase_C_PlayerMovementInput");
static_assert(offsetof(BP_HumanBase_C_PlayerMovementInput, IsForwardAxis) == 0x000000, "Member 'BP_HumanBase_C_PlayerMovementInput::IsForwardAxis' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_PlayerMovementInput, CallFunc_GetInputAxisValue_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_PlayerMovementInput::CallFunc_GetInputAxisValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_PlayerMovementInput, CallFunc_GetControlForward_RightVector_ForwardVector) == 0x000008, "Member 'BP_HumanBase_C_PlayerMovementInput::CallFunc_GetControlForward_RightVector_ForwardVector' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_PlayerMovementInput, CallFunc_GetControlForward_RightVector_RightVector) == 0x000014, "Member 'BP_HumanBase_C_PlayerMovementInput::CallFunc_GetControlForward_RightVector_RightVector' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_PlayerMovementInput, CallFunc_GetInputAxisValue_ReturnValue_1) == 0x000020, "Member 'BP_HumanBase_C_PlayerMovementInput::CallFunc_GetInputAxisValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_PlayerMovementInput, CallFunc_FixDiagonalGamepadValues_Y_Out) == 0x000024, "Member 'BP_HumanBase_C_PlayerMovementInput::CallFunc_FixDiagonalGamepadValues_Y_Out' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_PlayerMovementInput, CallFunc_FixDiagonalGamepadValues_X_Out) == 0x000028, "Member 'BP_HumanBase_C_PlayerMovementInput::CallFunc_FixDiagonalGamepadValues_X_Out' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_PlayerMovementInput, K2Node_SwitchEnum_CmpSuccess) == 0x00002C, "Member 'BP_HumanBase_C_PlayerMovementInput::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.SetEssentialValues
// 0x00AC (0x00AC - 0x0000)
struct BP_HumanBase_C_SetEssentialValues final
{
public:
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateAcceleration_ReturnValue;        // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetMaxAcceleration_ReturnValue;           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue_1;     // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_SetEssentialValues) == 0x000004, "Wrong alignment on BP_HumanBase_C_SetEssentialValues");
static_assert(sizeof(BP_HumanBase_C_SetEssentialValues) == 0x0000AC, "Wrong size on BP_HumanBase_C_SetEssentialValues");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_GetVelocity_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_GetVelocity_ReturnValue_1) == 0x000010, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00001C, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_BreakVector_X) == 0x000028, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_BreakVector_Y) == 0x00002C, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_BreakVector_Z) == 0x000030, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000040, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_VSize_ReturnValue) == 0x000044, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_CalculateAcceleration_ReturnValue) == 0x000048, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_CalculateAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000054, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000060, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x000064, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_GetMaxAcceleration_ReturnValue) == 0x000070, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_GetMaxAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_GetCurrentAcceleration_ReturnValue_1) == 0x000074, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_GetCurrentAcceleration_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_GetControlRotation_ReturnValue) == 0x000080, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_VSize_ReturnValue_1) == 0x00008C, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_BreakRotator_Roll) == 0x000090, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_BreakRotator_Pitch) == 0x000094, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_BreakRotator_Yaw) == 0x000098, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000A4, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetEssentialValues, CallFunc_Abs_ReturnValue) == 0x0000A8, "Member 'BP_HumanBase_C_SetEssentialValues::CallFunc_Abs_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.CacheValues
// 0x0024 (0x0024 - 0x0000)
struct BP_HumanBase_C_CacheValues final
{
public:
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_CacheValues) == 0x000004, "Wrong alignment on BP_HumanBase_C_CacheValues");
static_assert(sizeof(BP_HumanBase_C_CacheValues) == 0x000024, "Wrong size on BP_HumanBase_C_CacheValues");
static_assert(offsetof(BP_HumanBase_C_CacheValues, CallFunc_GetVelocity_ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_CacheValues::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CacheValues, CallFunc_GetControlRotation_ReturnValue) == 0x00000C, "Member 'BP_HumanBase_C_CacheValues::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CacheValues, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'BP_HumanBase_C_CacheValues::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CacheValues, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'BP_HumanBase_C_CacheValues::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CacheValues, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'BP_HumanBase_C_CacheValues::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.UpdateGroudedRotation
// 0x0170 (0x0170 - 0x0000)
struct BP_HumanBase_C_UpdateGroudedRotation final
{
public:
	bool                                          CallFunc_CanUpdateMovingRotation_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_CalculateGroundedRotationRate_ReturnValue; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetAnimCurveValue_ReturnValue;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimCurveValue_ReturnValue_1;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateGroundedRotationRate_ReturnValue_1; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue_1;         // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateGroundedRotationRate_ReturnValue_2; // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_4;                // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_5;                // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddActorWorldRotation_SweepHitResult;  // 0x00E4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_UpdateGroudedRotation) == 0x000004, "Wrong alignment on BP_HumanBase_C_UpdateGroudedRotation");
static_assert(sizeof(BP_HumanBase_C_UpdateGroudedRotation) == 0x000170, "Wrong size on BP_HumanBase_C_UpdateGroudedRotation");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_CanUpdateMovingRotation_ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_CanUpdateMovingRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_HumanBase_C_UpdateGroudedRotation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_GetControlRotation_ReturnValue) == 0x000008, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000014, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll) == 0x000020, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch) == 0x000024, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw) == 0x000028, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue) == 0x00002C, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_CalculateGroundedRotationRate_ReturnValue) == 0x000038, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_CalculateGroundedRotationRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll_1) == 0x00003C, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch_1) == 0x000040, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw_1) == 0x000044, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, K2Node_SwitchEnum_CmpSuccess_1) == 0x000048, "Member 'BP_HumanBase_C_UpdateGroudedRotation::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_1) == 0x00004C, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_GetAnimCurveValue_ReturnValue) == 0x000058, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_GetAnimCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_Abs_ReturnValue) == 0x00005C, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_GetAnimCurveValue_ReturnValue_1) == 0x000060, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_GetAnimCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000064, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, K2Node_SwitchEnum_CmpSuccess_2) == 0x000065, "Member 'BP_HumanBase_C_UpdateGroudedRotation::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll_2) == 0x000068, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch_2) == 0x00006C, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw_2) == 0x000070, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_CalculateGroundedRotationRate_ReturnValue_1) == 0x000074, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_CalculateGroundedRotationRate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_2) == 0x000078, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll_3) == 0x000084, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch_3) == 0x000088, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw_3) == 0x00008C, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_GetControlRotation_ReturnValue_1) == 0x000090, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_GetControlRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_3) == 0x00009C, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll_4) == 0x0000A8, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch_4) == 0x0000AC, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw_4) == 0x0000B0, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B4, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_CalculateGroundedRotationRate_ReturnValue_2) == 0x0000B8, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_CalculateGroundedRotationRate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_4) == 0x0000BC, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000C8, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000CC, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000D0, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, K2Node_SwitchEnum_CmpSuccess_3) == 0x0000D4, "Member 'BP_HumanBase_C_UpdateGroudedRotation::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_5) == 0x0000D8, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, CallFunc_K2_AddActorWorldRotation_SweepHitResult) == 0x0000E4, "Member 'BP_HumanBase_C_UpdateGroudedRotation::CallFunc_K2_AddActorWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateGroudedRotation, K2Node_SwitchEnum_CmpSuccess_4) == 0x00016C, "Member 'BP_HumanBase_C_UpdateGroudedRotation::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.UpdateInAirRotation
// 0x004C (0x004C - 0x0000)
struct BP_HumanBase_C_UpdateInAirRotation final
{
public:
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_UpdateInAirRotation) == 0x000004, "Wrong alignment on BP_HumanBase_C_UpdateInAirRotation");
static_assert(sizeof(BP_HumanBase_C_UpdateInAirRotation) == 0x00004C, "Wrong size on BP_HumanBase_C_UpdateInAirRotation");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_GetControlRotation_ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_BreakRotator_Roll) == 0x00000C, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_BreakRotator_Pitch) == 0x000010, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_BreakRotator_Yaw) == 0x000014, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_BreakRotator_Roll_1) == 0x000018, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_BreakRotator_Pitch_1) == 0x00001C, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_BreakRotator_Yaw_1) == 0x000020, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_MakeRotator_ReturnValue) == 0x000024, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_MakeRotator_ReturnValue_1) == 0x000030, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00003C, "Member 'BP_HumanBase_C_UpdateInAirRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateInAirRotation, K2Node_SwitchEnum_CmpSuccess) == 0x000048, "Member 'BP_HumanBase_C_UpdateInAirRotation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.SmoothCharacterRotation
// 0x0044 (0x0044 - 0x0000)
struct BP_HumanBase_C_SmoothCharacterRotation final
{
public:
	struct FRotator                               Target;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TargetInterpSpeed_Const_;                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActorInterpSpeed_Smooth_;                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_Constant_ReturnValue;           // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_SmoothCharacterRotation) == 0x000004, "Wrong alignment on BP_HumanBase_C_SmoothCharacterRotation");
static_assert(sizeof(BP_HumanBase_C_SmoothCharacterRotation) == 0x000044, "Wrong size on BP_HumanBase_C_SmoothCharacterRotation");
static_assert(offsetof(BP_HumanBase_C_SmoothCharacterRotation, Target) == 0x000000, "Member 'BP_HumanBase_C_SmoothCharacterRotation::Target' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SmoothCharacterRotation, TargetInterpSpeed_Const_) == 0x00000C, "Member 'BP_HumanBase_C_SmoothCharacterRotation::TargetInterpSpeed_Const_' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SmoothCharacterRotation, ActorInterpSpeed_Smooth_) == 0x000010, "Member 'BP_HumanBase_C_SmoothCharacterRotation::ActorInterpSpeed_Smooth_' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SmoothCharacterRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000014, "Member 'BP_HumanBase_C_SmoothCharacterRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SmoothCharacterRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000018, "Member 'BP_HumanBase_C_SmoothCharacterRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SmoothCharacterRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00001C, "Member 'BP_HumanBase_C_SmoothCharacterRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SmoothCharacterRotation, CallFunc_RInterpTo_ReturnValue) == 0x000028, "Member 'BP_HumanBase_C_SmoothCharacterRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SmoothCharacterRotation, CallFunc_RInterpTo_Constant_ReturnValue) == 0x000034, "Member 'BP_HumanBase_C_SmoothCharacterRotation::CallFunc_RInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SmoothCharacterRotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000040, "Member 'BP_HumanBase_C_SmoothCharacterRotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.SetMovementModel
// 0x00C8 (0x00C8 - 0x0000)
struct BP_HumanBase_C_SetMovementModel final
{
public:
	struct FMovementSettings_State                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0000(0x00C0)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_SetMovementModel) == 0x000008, "Wrong alignment on BP_HumanBase_C_SetMovementModel");
static_assert(sizeof(BP_HumanBase_C_SetMovementModel) == 0x0000C8, "Wrong size on BP_HumanBase_C_SetMovementModel");
static_assert(offsetof(BP_HumanBase_C_SetMovementModel, CallFunc_GetDataTableRowFromName_OutRow) == 0x000000, "Member 'BP_HumanBase_C_SetMovementModel::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetMovementModel, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000C0, "Member 'BP_HumanBase_C_SetMovementModel::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.UpdateCharacterMovement
// 0x0005 (0x0005 - 0x0000)
struct BP_HumanBase_C_UpdateCharacterMovement final
{
public:
	EALS_Gait                                     ActualGait;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     AllowedGait;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     CallFunc_GetActualGait_ActualGait;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EALS_Gait                                     CallFunc_GetAllowedGait_AllowedGait;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_UpdateCharacterMovement) == 0x000001, "Wrong alignment on BP_HumanBase_C_UpdateCharacterMovement");
static_assert(sizeof(BP_HumanBase_C_UpdateCharacterMovement) == 0x000005, "Wrong size on BP_HumanBase_C_UpdateCharacterMovement");
static_assert(offsetof(BP_HumanBase_C_UpdateCharacterMovement, ActualGait) == 0x000000, "Member 'BP_HumanBase_C_UpdateCharacterMovement::ActualGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateCharacterMovement, AllowedGait) == 0x000001, "Member 'BP_HumanBase_C_UpdateCharacterMovement::AllowedGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateCharacterMovement, CallFunc_GetActualGait_ActualGait) == 0x000002, "Member 'BP_HumanBase_C_UpdateCharacterMovement::CallFunc_GetActualGait_ActualGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateCharacterMovement, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_HumanBase_C_UpdateCharacterMovement::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateCharacterMovement, CallFunc_GetAllowedGait_AllowedGait) == 0x000004, "Member 'BP_HumanBase_C_UpdateCharacterMovement::CallFunc_GetAllowedGait_AllowedGait' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.UpdateDynamicMovementSettings
// 0x0028 (0x0028 - 0x0000)
struct BP_HumanBase_C_UpdateDynamicMovementSettings final
{
public:
	EALS_Gait                                     AllowedGait;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovementSettings                      CallFunc_GetTargetMovementSettings_MovementSettings; // 0x0008(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_UpdateDynamicMovementSettings) == 0x000008, "Wrong alignment on BP_HumanBase_C_UpdateDynamicMovementSettings");
static_assert(sizeof(BP_HumanBase_C_UpdateDynamicMovementSettings) == 0x000028, "Wrong size on BP_HumanBase_C_UpdateDynamicMovementSettings");
static_assert(offsetof(BP_HumanBase_C_UpdateDynamicMovementSettings, AllowedGait) == 0x000000, "Member 'BP_HumanBase_C_UpdateDynamicMovementSettings::AllowedGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_UpdateDynamicMovementSettings, CallFunc_GetTargetMovementSettings_MovementSettings) == 0x000008, "Member 'BP_HumanBase_C_UpdateDynamicMovementSettings::CallFunc_GetTargetMovementSettings_MovementSettings' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetTargetMovementSettings
// 0x0028 (0x0028 - 0x0000)
struct BP_HumanBase_C_GetTargetMovementSettings final
{
public:
	struct FMovementSettings                      MovementSettings;                                  // 0x0000(0x0020)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_GetTargetMovementSettings) == 0x000008, "Wrong alignment on BP_HumanBase_C_GetTargetMovementSettings");
static_assert(sizeof(BP_HumanBase_C_GetTargetMovementSettings) == 0x000028, "Wrong size on BP_HumanBase_C_GetTargetMovementSettings");
static_assert(offsetof(BP_HumanBase_C_GetTargetMovementSettings, MovementSettings) == 0x000000, "Member 'BP_HumanBase_C_GetTargetMovementSettings::MovementSettings' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTargetMovementSettings, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'BP_HumanBase_C_GetTargetMovementSettings::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTargetMovementSettings, K2Node_SwitchEnum_CmpSuccess_1) == 0x000021, "Member 'BP_HumanBase_C_GetTargetMovementSettings::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTargetMovementSettings, K2Node_SwitchEnum_CmpSuccess_2) == 0x000022, "Member 'BP_HumanBase_C_GetTargetMovementSettings::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTargetMovementSettings, K2Node_SwitchEnum_CmpSuccess_3) == 0x000023, "Member 'BP_HumanBase_C_GetTargetMovementSettings::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetAllowedGait
// 0x0006 (0x0006 - 0x0000)
struct BP_HumanBase_C_GetAllowedGait final
{
public:
	EALS_Gait                                     AllowedGait;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSprint_CanSprint;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_GetAllowedGait) == 0x000001, "Wrong alignment on BP_HumanBase_C_GetAllowedGait");
static_assert(sizeof(BP_HumanBase_C_GetAllowedGait) == 0x000006, "Wrong size on BP_HumanBase_C_GetAllowedGait");
static_assert(offsetof(BP_HumanBase_C_GetAllowedGait, AllowedGait) == 0x000000, "Member 'BP_HumanBase_C_GetAllowedGait::AllowedGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetAllowedGait, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_HumanBase_C_GetAllowedGait::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetAllowedGait, K2Node_SwitchEnum_CmpSuccess_1) == 0x000002, "Member 'BP_HumanBase_C_GetAllowedGait::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetAllowedGait, K2Node_SwitchEnum_CmpSuccess_2) == 0x000003, "Member 'BP_HumanBase_C_GetAllowedGait::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetAllowedGait, K2Node_SwitchEnum_CmpSuccess_3) == 0x000004, "Member 'BP_HumanBase_C_GetAllowedGait::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetAllowedGait, CallFunc_CanSprint_CanSprint) == 0x000005, "Member 'BP_HumanBase_C_GetAllowedGait::CallFunc_CanSprint_CanSprint' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetActualGait
// 0x0024 (0x0024 - 0x0000)
struct BP_HumanBase_C_GetActualGait final
{
public:
	EALS_Gait                                     AllowedGait;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     ActualGait;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocalSprintSpeed;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalRunSpeed;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalWalkSpeed;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_GetActualGait) == 0x000004, "Wrong alignment on BP_HumanBase_C_GetActualGait");
static_assert(sizeof(BP_HumanBase_C_GetActualGait) == 0x000024, "Wrong size on BP_HumanBase_C_GetActualGait");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, AllowedGait) == 0x000000, "Member 'BP_HumanBase_C_GetActualGait::AllowedGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, ActualGait) == 0x000001, "Member 'BP_HumanBase_C_GetActualGait::ActualGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, LocalSprintSpeed) == 0x000004, "Member 'BP_HumanBase_C_GetActualGait::LocalSprintSpeed' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, LocalRunSpeed) == 0x000008, "Member 'BP_HumanBase_C_GetActualGait::LocalRunSpeed' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, LocalWalkSpeed) == 0x00000C, "Member 'BP_HumanBase_C_GetActualGait::LocalWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_HumanBase_C_GetActualGait::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_HumanBase_C_GetActualGait::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_HumanBase_C_GetActualGait::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_HumanBase_C_GetActualGait::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetActualGait, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000020, "Member 'BP_HumanBase_C_GetActualGait::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.CanSprint
// 0x0050 (0x0050 - 0x0000)
struct BP_HumanBase_C_CanSprint final
{
public:
	bool                                          CanSprint_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_CanSprint) == 0x000004, "Wrong alignment on BP_HumanBase_C_CanSprint");
static_assert(sizeof(BP_HumanBase_C_CanSprint) == 0x000050, "Wrong size on BP_HumanBase_C_CanSprint");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CanSprint_0) == 0x000000, "Member 'BP_HumanBase_C_CanSprint::CanSprint_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_GetControlRotation_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_CanSprint::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000010, "Member 'BP_HumanBase_C_CanSprint::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_HumanBase_C_CanSprint::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000020, "Member 'BP_HumanBase_C_CanSprint::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x00002C, "Member 'BP_HumanBase_C_CanSprint::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, K2Node_SwitchEnum_CmpSuccess) == 0x000038, "Member 'BP_HumanBase_C_CanSprint::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_BreakRotator_Roll) == 0x00003C, "Member 'BP_HumanBase_C_CanSprint::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_BreakRotator_Pitch) == 0x000040, "Member 'BP_HumanBase_C_CanSprint::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_BreakRotator_Yaw) == 0x000044, "Member 'BP_HumanBase_C_CanSprint::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_Abs_ReturnValue) == 0x000048, "Member 'BP_HumanBase_C_CanSprint::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_Less_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_HumanBase_C_CanSprint::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_BooleanAND_ReturnValue) == 0x00004D, "Member 'BP_HumanBase_C_CanSprint::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanSprint, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00004E, "Member 'BP_HumanBase_C_CanSprint::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.AddToCharacterRotation
// 0x00A0 (0x00A0 - 0x0000)
struct BP_HumanBase_C_AddToCharacterRotation final
{
public:
	struct FRotator                               DeltaRotation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddActorWorldRotation_SweepHitResult;  // 0x0018(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_HumanBase_C_AddToCharacterRotation) == 0x000004, "Wrong alignment on BP_HumanBase_C_AddToCharacterRotation");
static_assert(sizeof(BP_HumanBase_C_AddToCharacterRotation) == 0x0000A0, "Wrong size on BP_HumanBase_C_AddToCharacterRotation");
static_assert(offsetof(BP_HumanBase_C_AddToCharacterRotation, DeltaRotation) == 0x000000, "Member 'BP_HumanBase_C_AddToCharacterRotation::DeltaRotation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_AddToCharacterRotation, CallFunc_ComposeRotators_ReturnValue) == 0x00000C, "Member 'BP_HumanBase_C_AddToCharacterRotation::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_AddToCharacterRotation, CallFunc_K2_AddActorWorldRotation_SweepHitResult) == 0x000018, "Member 'BP_HumanBase_C_AddToCharacterRotation::CallFunc_K2_AddActorWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.LimitRotation
// 0x0070 (0x0070 - 0x0000)
struct BP_HumanBase_C_LimitRotation final
{
public:
	float                                         AimYawMin;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYawMax;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue_1;         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_LimitRotation) == 0x000004, "Wrong alignment on BP_HumanBase_C_LimitRotation");
static_assert(sizeof(BP_HumanBase_C_LimitRotation) == 0x000070, "Wrong size on BP_HumanBase_C_LimitRotation");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, AimYawMin) == 0x000000, "Member 'BP_HumanBase_C_LimitRotation::AimYawMin' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, AimYawMax) == 0x000004, "Member 'BP_HumanBase_C_LimitRotation::AimYawMax' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, InterpSpeed) == 0x000008, "Member 'BP_HumanBase_C_LimitRotation::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_GetControlRotation_ReturnValue) == 0x00000C, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_BreakRotator_Roll) == 0x000024, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_BreakRotator_Pitch) == 0x000028, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_BreakRotator_Yaw) == 0x00002C, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_GetControlRotation_ReturnValue_1) == 0x000030, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_GetControlRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000040, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_BreakRotator_Roll_1) == 0x000050, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_BreakRotator_Pitch_1) == 0x000054, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_BreakRotator_Yaw_1) == 0x000058, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_InRange_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00005D, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_SelectFloat_ReturnValue) == 0x000060, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_LimitRotation, CallFunc_MakeRotator_ReturnValue) == 0x000064, "Member 'BP_HumanBase_C_LimitRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.SetActorLocationAndRotation(UpdateTarget)
// 0x0134 (0x0134 - 0x0000)
struct BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_ final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSweep;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTeleport;                                         // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x001C(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00A4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_) == 0x000004, "Wrong alignment on BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_");
static_assert(sizeof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_) == 0x000134, "Wrong size on BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_, NewLocation) == 0x000000, "Member 'BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_::NewLocation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_, NewRotation) == 0x00000C, "Member 'BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_::NewRotation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_, bSweep) == 0x000018, "Member 'BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_::bSweep' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_, bTeleport) == 0x000019, "Member 'BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_::bTeleport' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_, SweepHitResult) == 0x00001C, "Member 'BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_::SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_, ReturnValue) == 0x0000A4, "Member 'BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0000A8, "Member 'BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000130, "Member 'BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.CalculateGroundedRotationRate
// 0x0014 (0x0014 - 0x0000)
struct BP_HumanBase_C_CalculateGroundedRotationRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMappedSpeed_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_CalculateGroundedRotationRate) == 0x000004, "Wrong alignment on BP_HumanBase_C_CalculateGroundedRotationRate");
static_assert(sizeof(BP_HumanBase_C_CalculateGroundedRotationRate) == 0x000014, "Wrong size on BP_HumanBase_C_CalculateGroundedRotationRate");
static_assert(offsetof(BP_HumanBase_C_CalculateGroundedRotationRate, ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_CalculateGroundedRotationRate::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CalculateGroundedRotationRate, CallFunc_GetMappedSpeed_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_CalculateGroundedRotationRate::CallFunc_GetMappedSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CalculateGroundedRotationRate, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'BP_HumanBase_C_CalculateGroundedRotationRate::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CalculateGroundedRotationRate, CallFunc_GetFloatValue_ReturnValue) == 0x00000C, "Member 'BP_HumanBase_C_CalculateGroundedRotationRate::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CalculateGroundedRotationRate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_HumanBase_C_CalculateGroundedRotationRate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.MantleCheck
// 0x04C0 (0x04C0 - 0x0000)
struct BP_HumanBase_C_MantleCheck final
{
public:
	struct FMantle_TraceSettings                  Trace_Settings;                                    // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugType;                                         // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Vault;                                             // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EMantleType                                   MantleType;                                        // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MantleHeight;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0020(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DownTraceLocation;                                 // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialTrace_Normal;                               // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialTrace_ImpactPoint;                          // 0x0070(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0080(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0090(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               CallFunc_GetTraceDebugType_ReturnValue;            // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               CallFunc_GetTraceDebugType_ReturnValue_1;          // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               CallFunc_GetTraceDebugType_ReturnValue_2;          // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCalpsuleBaseLocation_ReturnValue;      // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCalpsuleBaseLocation_ReturnValue_1;    // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0130(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C2[0x2];                                      // 0x01C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0210(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPlayerMovementInput_ReturnValue;       // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALS_ComponentAndTransform             K2Node_MakeStruct_ALS_ComponentAndTransform;       // 0x02C0(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingle_OutHit;                // 0x030C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingle_ReturnValue;           // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWalkable_ReturnValue;                   // 0x0395(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_396[0x2];                                      // 0x0396(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x03A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x03B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6[0x2];                                      // 0x03B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0400(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x041C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0428(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCapsuleLocationFromBase_ReturnValue;   // 0x0434(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0440(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0471(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0472(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CapsuleHasRoomCheck_HasRoom;              // 0x0473(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0474(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0480(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x048C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWalkable_ReturnValue_1;                 // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x049C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_4;                          // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_MantleCheck) == 0x000010, "Wrong alignment on BP_HumanBase_C_MantleCheck");
static_assert(sizeof(BP_HumanBase_C_MantleCheck) == 0x0004C0, "Wrong size on BP_HumanBase_C_MantleCheck");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, Trace_Settings) == 0x000000, "Member 'BP_HumanBase_C_MantleCheck::Trace_Settings' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, DebugType) == 0x000014, "Member 'BP_HumanBase_C_MantleCheck::DebugType' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, Vault) == 0x000015, "Member 'BP_HumanBase_C_MantleCheck::Vault' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, MantleType) == 0x000016, "Member 'BP_HumanBase_C_MantleCheck::MantleType' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, MantleHeight) == 0x000018, "Member 'BP_HumanBase_C_MantleCheck::MantleHeight' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, TargetTransform) == 0x000020, "Member 'BP_HumanBase_C_MantleCheck::TargetTransform' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, HitComponent) == 0x000050, "Member 'BP_HumanBase_C_MantleCheck::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, DownTraceLocation) == 0x000058, "Member 'BP_HumanBase_C_MantleCheck::DownTraceLocation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, InitialTrace_Normal) == 0x000064, "Member 'BP_HumanBase_C_MantleCheck::InitialTrace_Normal' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, InitialTrace_ImpactPoint) == 0x000070, "Member 'BP_HumanBase_C_MantleCheck::InitialTrace_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, Temp_object_Variable) == 0x000080, "Member 'BP_HumanBase_C_MantleCheck::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, Temp_object_Variable_1) == 0x000090, "Member 'BP_HumanBase_C_MantleCheck::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, K2Node_SwitchEnum_CmpSuccess) == 0x0000A0, "Member 'BP_HumanBase_C_MantleCheck::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000A4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_GetTraceDebugType_ReturnValue) == 0x0000B0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_GetTraceDebugType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_GetTraceDebugType_ReturnValue_1) == 0x0000B1, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_GetTraceDebugType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_GetTraceDebugType_ReturnValue_2) == 0x0000B2, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_GetTraceDebugType_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000B3, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_GetCalpsuleBaseLocation_ReturnValue) == 0x0000B4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_GetCalpsuleBaseLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_GetCalpsuleBaseLocation_ReturnValue_1) == 0x0000C0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_GetCalpsuleBaseLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_X) == 0x0000CC, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Y) == 0x0000D0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Z) == 0x0000D4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000D8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_X_1) == 0x0000E4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Y_1) == 0x0000E8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Z_1) == 0x0000EC, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_MakeVector_ReturnValue) == 0x0000F0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue) == 0x0000FC, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Add_FloatFloat_ReturnValue) == 0x000108, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00010C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_MakeVector_ReturnValue_1) == 0x000110, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00011C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000120, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00012C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_SphereTraceSingle_OutHit) == 0x000130, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_SphereTraceSingle_ReturnValue) == 0x0001B8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0001BC, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_bBlockingHit) == 0x0001C0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001C1, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_Time) == 0x0001C4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_Distance) == 0x0001C8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_Location) == 0x0001CC, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_ImpactPoint) == 0x0001D8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_Normal) == 0x0001E4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_ImpactNormal) == 0x0001F0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_PhysMat) == 0x000200, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_HitActor) == 0x000208, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_HitComponent) == 0x000210, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_HitBoneName) == 0x000218, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_HitItem) == 0x000220, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_ElementIndex) == 0x000224, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_FaceIndex) == 0x000228, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_TraceStart) == 0x00022C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_TraceEnd) == 0x000238, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000244, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000248, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_X_2) == 0x00024C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Y_2) == 0x000250, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Z_2) == 0x000254, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_MakeVector_ReturnValue_2) == 0x000258, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_X_3) == 0x000264, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Y_3) == 0x000268, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Z_3) == 0x00026C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_MakeVector_ReturnValue_3) == 0x000270, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_GetPlayerMovementInput_ReturnValue) == 0x00027C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_GetPlayerMovementInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000288, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000294, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0002A0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0002AC, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, K2Node_MakeStruct_ALS_ComponentAndTransform) == 0x0002C0, "Member 'BP_HumanBase_C_MantleCheck::K2Node_MakeStruct_ALS_ComponentAndTransform' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue_4) == 0x000300, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_CapsuleTraceSingle_OutHit) == 0x00030C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_CapsuleTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_CapsuleTraceSingle_ReturnValue) == 0x000394, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_CapsuleTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_IsWalkable_ReturnValue) == 0x000395, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_IsWalkable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000398, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Not_PreBool_ReturnValue) == 0x0003A4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0003A8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0003B4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0003B5, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_Time_1) == 0x0003B8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_Distance_1) == 0x0003BC, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_Location_1) == 0x0003C0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0003CC, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_Normal_1) == 0x0003D8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0003E4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_PhysMat_1) == 0x0003F0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_HitActor_1) == 0x0003F8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_HitComponent_1) == 0x000400, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_HitBoneName_1) == 0x000408, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_HitItem_1) == 0x000410, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_ElementIndex_1) == 0x000414, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_FaceIndex_1) == 0x000418, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_TraceStart_1) == 0x00041C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakHitResult_TraceEnd_1) == 0x000428, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_GetCapsuleLocationFromBase_ReturnValue) == 0x000434, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_GetCapsuleLocationFromBase_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_MakeTransform_ReturnValue) == 0x000440, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Not_PreBool_ReturnValue_1) == 0x000470, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BooleanAND_ReturnValue) == 0x000471, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BooleanAND_ReturnValue_1) == 0x000472, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_CapsuleHasRoomCheck_HasRoom) == 0x000473, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_CapsuleHasRoomCheck_HasRoom' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakTransform_Location) == 0x000474, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakTransform_Rotation) == 0x000480, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakTransform_Scale) == 0x00048C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_IsWalkable_ReturnValue_1) == 0x000498, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_IsWalkable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00049C, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BooleanAND_ReturnValue_2) == 0x0004A8, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_X_4) == 0x0004AC, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Y_4) == 0x0004B0, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleCheck, CallFunc_BreakVector_Z_4) == 0x0004B4, "Member 'BP_HumanBase_C_MantleCheck::CallFunc_BreakVector_Z_4' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetPlayerMovementInput
// 0x0054 (0x0054 - 0x0000)
struct BP_HumanBase_C_GetPlayerMovementInput final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlForward_RightVector_ForwardVector; // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlForward_RightVector_RightVector; // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_GetPlayerMovementInput) == 0x000004, "Wrong alignment on BP_HumanBase_C_GetPlayerMovementInput");
static_assert(sizeof(BP_HumanBase_C_GetPlayerMovementInput) == 0x000054, "Wrong size on BP_HumanBase_C_GetPlayerMovementInput");
static_assert(offsetof(BP_HumanBase_C_GetPlayerMovementInput, ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_GetPlayerMovementInput::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetPlayerMovementInput, CallFunc_GetControlForward_RightVector_ForwardVector) == 0x00000C, "Member 'BP_HumanBase_C_GetPlayerMovementInput::CallFunc_GetControlForward_RightVector_ForwardVector' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetPlayerMovementInput, CallFunc_GetControlForward_RightVector_RightVector) == 0x000018, "Member 'BP_HumanBase_C_GetPlayerMovementInput::CallFunc_GetControlForward_RightVector_RightVector' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetPlayerMovementInput, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'BP_HumanBase_C_GetPlayerMovementInput::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetPlayerMovementInput, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000030, "Member 'BP_HumanBase_C_GetPlayerMovementInput::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetPlayerMovementInput, CallFunc_Add_VectorVector_ReturnValue) == 0x00003C, "Member 'BP_HumanBase_C_GetPlayerMovementInput::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetPlayerMovementInput, CallFunc_Normal_ReturnValue) == 0x000048, "Member 'BP_HumanBase_C_GetPlayerMovementInput::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.FixDiagonalGamepadValues
// 0x0030 (0x0030 - 0x0000)
struct BP_HumanBase_C_FixDiagonalGamepadValues final
{
public:
	float                                         Y_in;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X_in;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Y_Out;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X_Out;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_FixDiagonalGamepadValues) == 0x000004, "Wrong alignment on BP_HumanBase_C_FixDiagonalGamepadValues");
static_assert(sizeof(BP_HumanBase_C_FixDiagonalGamepadValues) == 0x000030, "Wrong size on BP_HumanBase_C_FixDiagonalGamepadValues");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, Y_in) == 0x000000, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::Y_in' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, X_in) == 0x000004, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::X_in' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, Y_Out) == 0x000008, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::Y_Out' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, X_Out) == 0x00000C, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::X_Out' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, CallFunc_Abs_ReturnValue_1) == 0x000014, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, CallFunc_MapRangeClamped_ReturnValue_1) == 0x00001C, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, CallFunc_FClamp_ReturnValue) == 0x000028, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_FixDiagonalGamepadValues, CallFunc_FClamp_ReturnValue_1) == 0x00002C, "Member 'BP_HumanBase_C_FixDiagonalGamepadValues::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.DrawDebugShapes
// 0x0200 (0x0200 - 0x0000)
struct BP_HumanBase_C_DrawDebugShapes final
{
public:
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_NormalUnsafe_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue_1;       // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_2; // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_NormalUnsafe_ReturnValue_1;        // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue_2;       // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxAcceleration_ReturnValue;           // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue_3;       // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_NormalUnsafe_ReturnValue_2;        // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_1;    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x0164(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_3; // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_NormalUnsafe_ReturnValue_3;        // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IALS_Controller_BPI_C> K2Node_DynamicCast_AsALS_Controller_BPI;           // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_BPI_Get_DebugInfo_DebugFocusCharacter;    // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_Get_DebugInfo_DebugView;              // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowHUD;                // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowTraces;             // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowDebugShapes;        // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowLayerColors;        // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_Slomo;                  // 0x01FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowCharacterInfo;      // 0x01FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_DrawDebugShapes) == 0x000008, "Wrong alignment on BP_HumanBase_C_DrawDebugShapes");
static_assert(sizeof(BP_HumanBase_C_DrawDebugShapes) == 0x000200, "Wrong size on BP_HumanBase_C_DrawDebugShapes");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Vector_NormalUnsafe_ReturnValue) == 0x000014, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Vector_NormalUnsafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00002C, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetVelocity_ReturnValue) == 0x000038, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000044, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_VSize_ReturnValue) == 0x000050, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000054, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000060, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Add_VectorVector_ReturnValue) == 0x000064, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_SelectColor_ReturnValue) == 0x000070, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000080, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x00008C, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_MakeVector_ReturnValue_1) == 0x000090, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_MapRangeClamped_ReturnValue) == 0x00009C, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000A0, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0000AC, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Conv_RotatorToVector_ReturnValue_1) == 0x0000B8, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Conv_RotatorToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_SelectVector_ReturnValue) == 0x0000C4, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_2) == 0x0000D0, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Vector_NormalUnsafe_ReturnValue_1) == 0x0000D4, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Vector_NormalUnsafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000E0, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000E4, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_MakeVector_ReturnValue_2) == 0x0000F0, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000FC, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000108, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Conv_RotatorToVector_ReturnValue_2) == 0x000114, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Conv_RotatorToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetMaxAcceleration_ReturnValue) == 0x000120, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetMaxAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000124, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetControlRotation_ReturnValue) == 0x000130, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_VSize_ReturnValue_1) == 0x00013C, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Conv_RotatorToVector_ReturnValue_3) == 0x000140, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Conv_RotatorToVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00014C, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Vector_NormalUnsafe_ReturnValue_2) == 0x000150, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Vector_NormalUnsafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_MapRangeClamped_ReturnValue_1) == 0x00015C, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_EqualEqual_VectorVector_ReturnValue_1) == 0x000160, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_EqualEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_SelectColor_ReturnValue_1) == 0x000164, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000174, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_3) == 0x000178, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_SelectVector_ReturnValue_1) == 0x00017C, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000188, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Vector_NormalUnsafe_ReturnValue_3) == 0x000194, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Vector_NormalUnsafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0001A0, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0001AC, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0001B8, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetSocketLocation_ReturnValue) == 0x0001C4, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_GetPlayerController_ReturnValue) == 0x0001D0, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, K2Node_DynamicCast_AsALS_Controller_BPI) == 0x0001D8, "Member 'BP_HumanBase_C_DrawDebugShapes::K2Node_DynamicCast_AsALS_Controller_BPI' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, K2Node_DynamicCast_bSuccess) == 0x0001E8, "Member 'BP_HumanBase_C_DrawDebugShapes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_BPI_Get_DebugInfo_DebugFocusCharacter) == 0x0001F0, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_BPI_Get_DebugInfo_DebugFocusCharacter' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_BPI_Get_DebugInfo_DebugView) == 0x0001F8, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_BPI_Get_DebugInfo_DebugView' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_BPI_Get_DebugInfo_ShowHUD) == 0x0001F9, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_BPI_Get_DebugInfo_ShowHUD' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_BPI_Get_DebugInfo_ShowTraces) == 0x0001FA, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_BPI_Get_DebugInfo_ShowTraces' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_BPI_Get_DebugInfo_ShowDebugShapes) == 0x0001FB, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_BPI_Get_DebugInfo_ShowDebugShapes' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_BPI_Get_DebugInfo_ShowLayerColors) == 0x0001FC, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_BPI_Get_DebugInfo_ShowLayerColors' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_BPI_Get_DebugInfo_Slomo) == 0x0001FD, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_BPI_Get_DebugInfo_Slomo' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_DrawDebugShapes, CallFunc_BPI_Get_DebugInfo_ShowCharacterInfo) == 0x0001FE, "Member 'BP_HumanBase_C_DrawDebugShapes::CallFunc_BPI_Get_DebugInfo_ShowCharacterInfo' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.MantleStart
// 0x0470 (0x0470 - 0x0000)
struct BP_HumanBase_C_MantleStart final
{
public:
	float                                         MantleHeight;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALS_ComponentAndTransform             MantleLedgeWS;                                     // 0x0010(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EMantleType                                   MantleType;                                        // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMantle_Asset                          MantleAsset;                                       // 0x0058(0x0038)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMantle_Asset                          CallFunc_GetMantleAsset_ReturnValue;               // 0x0098(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Params                         K2Node_MakeStruct_Mantle_Params;                   // 0x00D8(0x0028)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_InvertTransform_ReturnValue;              // 0x0140(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0xC];                                      // 0x0194(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x01A0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALS_ComponentAndTransform             K2Node_MakeStruct_ALS_ComponentAndTransform;       // 0x01E0(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0220(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0310(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x034C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x0358(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0388(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0394(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x03A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x03DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x03E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x03F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_6;        // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_4;      // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0430(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0440(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_MantleStart) == 0x000010, "Wrong alignment on BP_HumanBase_C_MantleStart");
static_assert(sizeof(BP_HumanBase_C_MantleStart) == 0x000470, "Wrong size on BP_HumanBase_C_MantleStart");
static_assert(offsetof(BP_HumanBase_C_MantleStart, MantleHeight) == 0x000000, "Member 'BP_HumanBase_C_MantleStart::MantleHeight' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, MantleLedgeWS) == 0x000010, "Member 'BP_HumanBase_C_MantleStart::MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, MantleType) == 0x000050, "Member 'BP_HumanBase_C_MantleStart::MantleType' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, MantleAsset) == 0x000058, "Member 'BP_HumanBase_C_MantleStart::MantleAsset' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'BP_HumanBase_C_MantleStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_GetMantleAsset_ReturnValue) == 0x000098, "Member 'BP_HumanBase_C_MantleStart::CallFunc_GetMantleAsset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_MapRangeClamped_ReturnValue) == 0x0000D0, "Member 'BP_HumanBase_C_MantleStart::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000D4, "Member 'BP_HumanBase_C_MantleStart::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, K2Node_MakeStruct_Mantle_Params) == 0x0000D8, "Member 'BP_HumanBase_C_MantleStart::K2Node_MakeStruct_Mantle_Params' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_IsValid_ReturnValue_1) == 0x000100, "Member 'BP_HumanBase_C_MantleStart::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Montage_Play_ReturnValue) == 0x000104, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000110, "Member 'BP_HumanBase_C_MantleStart::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_InvertTransform_ReturnValue) == 0x000140, "Member 'BP_HumanBase_C_MantleStart::CallFunc_InvertTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Location) == 0x000170, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Rotation) == 0x00017C, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Scale) == 0x000188, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_ComposeTransforms_ReturnValue) == 0x0001A0, "Member 'BP_HumanBase_C_MantleStart::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Roll) == 0x0001D0, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Pitch) == 0x0001D4, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Yaw) == 0x0001D8, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, K2Node_MakeStruct_ALS_ComponentAndTransform) == 0x0001E0, "Member 'BP_HumanBase_C_MantleStart::K2Node_MakeStruct_ALS_ComponentAndTransform' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_GetTransform_ReturnValue) == 0x000220, "Member 'BP_HumanBase_C_MantleStart::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Location_1) == 0x000250, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Rotation_1) == 0x00025C, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Scale_1) == 0x000268, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Roll_1) == 0x000274, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Pitch_1) == 0x000278, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Yaw_1) == 0x00027C, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Location_2) == 0x000280, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Rotation_2) == 0x00028C, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Scale_2) == 0x000298, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0002A4, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Location_3) == 0x0002B0, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Rotation_3) == 0x0002BC, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Scale_3) == 0x0002C8, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Roll_2) == 0x0002D4, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Pitch_2) == 0x0002D8, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Yaw_2) == 0x0002DC, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x0002E0, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0002EC, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0002F0, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0002F4, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0002F8, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_MakeRotator_ReturnValue) == 0x000304, "Member 'BP_HumanBase_C_MantleStart::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_MakeTransform_ReturnValue) == 0x000310, "Member 'BP_HumanBase_C_MantleStart::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakVector_X) == 0x000340, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakVector_Y) == 0x000344, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakVector_Z) == 0x000348, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00034C, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Location_4) == 0x000358, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Rotation_4) == 0x000364, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Scale_4) == 0x000370, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakVector_X_1) == 0x00037C, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakVector_Y_1) == 0x000380, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakVector_Z_1) == 0x000384, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_MakeVector_ReturnValue) == 0x000388, "Member 'BP_HumanBase_C_MantleStart::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000394, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_MakeTransform_ReturnValue_1) == 0x0003A0, "Member 'BP_HumanBase_C_MantleStart::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Location_5) == 0x0003D0, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Rotation_5) == 0x0003DC, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakTransform_Scale_5) == 0x0003E8, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x0003F4, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_GetTimeRange_MinTime) == 0x000400, "Member 'BP_HumanBase_C_MantleStart::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_GetTimeRange_MaxTime) == 0x000404, "Member 'BP_HumanBase_C_MantleStart::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Roll_3) == 0x000408, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Pitch_3) == 0x00040C, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_BreakRotator_Yaw_3) == 0x000410, "Member 'BP_HumanBase_C_MantleStart::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000414, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x000418, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x00041C, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_FloatFloat_ReturnValue_6) == 0x000420, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue_4) == 0x000424, "Member 'BP_HumanBase_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_MakeRotator_ReturnValue_1) == 0x000430, "Member 'BP_HumanBase_C_MantleStart::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleStart, CallFunc_MakeTransform_ReturnValue_2) == 0x000440, "Member 'BP_HumanBase_C_MantleStart::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.MantleUpdate
// 0x05F0 (0x05F0 - 0x0000)
struct BP_HumanBase_C_MantleUpdate final
{
public:
	float                                         BlendIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LerpedTarget;                                      // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         ZCorrectionAlpha;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XYCorrectionAlpha;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PositionAlpha;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult; // 0x0070(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue; // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0130(0x0030)(IsPlainOldData, NoDestructor)
	struct FALS_ComponentAndTransform             K2Node_MakeStruct_ALS_ComponentAndTransform;       // 0x0160(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         CallFunc_GetPlaybackPosition_ReturnValue;          // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0250(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x02F0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x032C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x0338(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0xC];                                      // 0x0344(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_TLerp_ReturnValue;                        // 0x0350(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_6;                // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_6;                // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_6;                   // 0x03A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_7;                // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_7;                // 0x03C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_7;                   // 0x03D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x03EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_8;                // 0x03F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_8;                // 0x0404(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_8;                   // 0x0410(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0420(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_TLerp_ReturnValue_1;                      // 0x0460(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_9;                // 0x0490(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_9;                // 0x049C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_9;                   // 0x04A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_6;                          // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x04C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x04D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_10;               // 0x0500(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_10;               // 0x050C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_10;                  // 0x0518(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0524(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0530(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x053C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0544(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0548(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x054C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x0550(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0554(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_4;              // 0x0560(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_TLerp_ReturnValue_2;                      // 0x0590(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_TLerp_ReturnValue_3;                      // 0x05C0(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_MantleUpdate) == 0x000010, "Wrong alignment on BP_HumanBase_C_MantleUpdate");
static_assert(sizeof(BP_HumanBase_C_MantleUpdate) == 0x0005F0, "Wrong size on BP_HumanBase_C_MantleUpdate");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, BlendIn) == 0x000000, "Member 'BP_HumanBase_C_MantleUpdate::BlendIn' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, LerpedTarget) == 0x000010, "Member 'BP_HumanBase_C_MantleUpdate::LerpedTarget' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, ZCorrectionAlpha) == 0x000040, "Member 'BP_HumanBase_C_MantleUpdate::ZCorrectionAlpha' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, XYCorrectionAlpha) == 0x000044, "Member 'BP_HumanBase_C_MantleUpdate::XYCorrectionAlpha' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, PositionAlpha) == 0x000048, "Member 'BP_HumanBase_C_MantleUpdate::PositionAlpha' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location) == 0x00004C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation) == 0x000058, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale) == 0x000064, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult) == 0x000070, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue) == 0x0000F8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000100, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_ComposeTransforms_ReturnValue) == 0x000130, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, K2Node_MakeStruct_ALS_ComponentAndTransform) == 0x000160, "Member 'BP_HumanBase_C_MantleUpdate::K2Node_MakeStruct_ALS_ComponentAndTransform' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_GetPlaybackPosition_ReturnValue) == 0x0001A0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_GetPlaybackPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_1) == 0x0001A4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_1) == 0x0001B0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_1) == 0x0001BC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001C8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Roll) == 0x0001CC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Pitch) == 0x0001D0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Yaw) == 0x0001D4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_GetVectorValue_ReturnValue) == 0x0001D8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_X) == 0x0001E4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Y) == 0x0001E8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Z) == 0x0001EC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_2) == 0x0001F0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_2) == 0x0001FC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_2) == 0x000208, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_VectorVector_ReturnValue) == 0x000214, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Roll_1) == 0x000220, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Pitch_1) == 0x000224, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Yaw_1) == 0x000228, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00022C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000238, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00023C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000240, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeRotator_ReturnValue) == 0x000244, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue) == 0x000250, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_3) == 0x000280, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_3) == 0x00028C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_3) == 0x000298, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_4) == 0x0002A4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_4) == 0x0002B0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_4) == 0x0002BC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_X_1) == 0x0002C8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Y_1) == 0x0002CC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Z_1) == 0x0002D0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_X_2) == 0x0002D4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Y_2) == 0x0002D8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Z_2) == 0x0002DC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeVector_ReturnValue) == 0x0002E0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue_1) == 0x0002F0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_5) == 0x000320, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_5) == 0x00032C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_5) == 0x000338, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_TLerp_ReturnValue) == 0x000350, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_TLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_X_3) == 0x000380, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Y_3) == 0x000384, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Z_3) == 0x000388, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_6) == 0x00038C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_6' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_6) == 0x000398, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_6' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_6) == 0x0003A4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_6' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_X_4) == 0x0003B0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Y_4) == 0x0003B4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Z_4) == 0x0003B8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_7) == 0x0003BC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_7' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_7) == 0x0003C8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_7' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_7) == 0x0003D4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_7' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_X_5) == 0x0003E0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Y_5) == 0x0003E4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Z_5) == 0x0003E8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeVector_ReturnValue_1) == 0x0003EC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_8) == 0x0003F8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_8' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_8) == 0x000404, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_8' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_8) == 0x000410, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_8' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue_2) == 0x000420, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Roll_2) == 0x000450, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Pitch_2) == 0x000454, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Yaw_2) == 0x000458, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_TLerp_ReturnValue_1) == 0x000460, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_TLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_9) == 0x000490, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_9' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_9) == 0x00049C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_9' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_9) == 0x0004A8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_9' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_X_6) == 0x0004B4, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Y_6) == 0x0004B8, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakVector_Z_6) == 0x0004BC, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeVector_ReturnValue_2) == 0x0004C0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue_3) == 0x0004D0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Location_10) == 0x000500, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Location_10' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Rotation_10) == 0x00050C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Rotation_10' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakTransform_Scale_10) == 0x000518, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakTransform_Scale_10' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000524, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000530, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Roll_3) == 0x00053C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Pitch_3) == 0x000540, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_BreakRotator_Yaw_3) == 0x000544, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000548, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x00054C, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x000550, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeRotator_ReturnValue_1) == 0x000554, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue_4) == 0x000560, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_TLerp_ReturnValue_2) == 0x000590, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_TLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_MantleUpdate, CallFunc_TLerp_ReturnValue_3) == 0x0005C0, "Member 'BP_HumanBase_C_MantleUpdate::CallFunc_TLerp_ReturnValue_3' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.CapsuleHasRoomCheck
// 0x0188 (0x0188 - 0x0000)
struct BP_HumanBase_C_CapsuleHasRoomCheck final
{
public:
	class UCapsuleComponent*                      Capsule;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightOffset;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadiusOffset;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugType;                                         // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasRoom;                                           // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm)
	EDrawDebugTrace                               CallFunc_GetTraceDebugType_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleByProfile_OutHit;        // 0x0078(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleByProfile_ReturnValue;   // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_103[0x1];                                      // 0x0103(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanNOR_ReturnValue;                   // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_CapsuleHasRoomCheck) == 0x000008, "Wrong alignment on BP_HumanBase_C_CapsuleHasRoomCheck");
static_assert(sizeof(BP_HumanBase_C_CapsuleHasRoomCheck) == 0x000188, "Wrong size on BP_HumanBase_C_CapsuleHasRoomCheck");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, Capsule) == 0x000000, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::Capsule' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, TargetLocation) == 0x000008, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, HeightOffset) == 0x000014, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::HeightOffset' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, RadiusOffset) == 0x000018, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::RadiusOffset' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, DebugType) == 0x00001C, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::DebugType' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, HasRoom) == 0x00001D, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::HasRoom' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, Temp_object_Variable) == 0x000020, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_GetTraceDebugType_ReturnValue) == 0x000030, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_GetTraceDebugType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue) == 0x000038, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000050, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00005C, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_MakeVector_ReturnValue_1) == 0x000060, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_Add_VectorVector_ReturnValue) == 0x00006C, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_SphereTraceSingleByProfile_OutHit) == 0x000078, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_SphereTraceSingleByProfile_OutHit' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_SphereTraceSingleByProfile_ReturnValue) == 0x000100, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_SphereTraceSingleByProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_bBlockingHit) == 0x000101, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_bInitialOverlap) == 0x000102, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_Time) == 0x000104, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_Distance) == 0x000108, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_Location) == 0x00010C, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_ImpactPoint) == 0x000118, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_Normal) == 0x000124, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_ImpactNormal) == 0x000130, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_PhysMat) == 0x000140, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_HitActor) == 0x000148, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_HitComponent) == 0x000150, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_HitBoneName) == 0x000158, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_HitItem) == 0x000160, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_ElementIndex) == 0x000164, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_FaceIndex) == 0x000168, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_TraceStart) == 0x00016C, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_TraceEnd) == 0x000178, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CapsuleHasRoomCheck, CallFunc_BooleanNOR_ReturnValue) == 0x000184, "Member 'BP_HumanBase_C_CapsuleHasRoomCheck::CallFunc_BooleanNOR_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetMantleAsset
// 0x00F0 (0x00F0 - 0x0000)
struct BP_HumanBase_C_GetMantleAsset final
{
public:
	EMantleType                                   MantleType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMantle_Asset                          ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          K2Node_MakeStruct_Mantle_Asset;                    // 0x0040(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMantle_Asset                          K2Node_MakeStruct_Mantle_Asset_1;                  // 0x0080(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          K2Node_MakeStruct_Mantle_Asset_2;                  // 0x00B8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_GetMantleAsset) == 0x000008, "Wrong alignment on BP_HumanBase_C_GetMantleAsset");
static_assert(sizeof(BP_HumanBase_C_GetMantleAsset) == 0x0000F0, "Wrong size on BP_HumanBase_C_GetMantleAsset");
static_assert(offsetof(BP_HumanBase_C_GetMantleAsset, MantleType) == 0x000000, "Member 'BP_HumanBase_C_GetMantleAsset::MantleType' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMantleAsset, ReturnValue) == 0x000008, "Member 'BP_HumanBase_C_GetMantleAsset::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMantleAsset, K2Node_MakeStruct_Mantle_Asset) == 0x000040, "Member 'BP_HumanBase_C_GetMantleAsset::K2Node_MakeStruct_Mantle_Asset' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMantleAsset, K2Node_SwitchEnum_CmpSuccess) == 0x000078, "Member 'BP_HumanBase_C_GetMantleAsset::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMantleAsset, K2Node_MakeStruct_Mantle_Asset_1) == 0x000080, "Member 'BP_HumanBase_C_GetMantleAsset::K2Node_MakeStruct_Mantle_Asset_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMantleAsset, K2Node_MakeStruct_Mantle_Asset_2) == 0x0000B8, "Member 'BP_HumanBase_C_GetMantleAsset::K2Node_MakeStruct_Mantle_Asset_2' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.RightVector
// 0x0060 (0x0060 - 0x0000)
struct BP_HumanBase_C_RightVector final
{
public:
	struct FVector                                ForwardVector;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightVector_0;                                     // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_RightVector) == 0x000004, "Wrong alignment on BP_HumanBase_C_RightVector");
static_assert(sizeof(BP_HumanBase_C_RightVector) == 0x000060, "Wrong size on BP_HumanBase_C_RightVector");
static_assert(offsetof(BP_HumanBase_C_RightVector, ForwardVector) == 0x000000, "Member 'BP_HumanBase_C_RightVector::ForwardVector' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RightVector, RightVector_0) == 0x00000C, "Member 'BP_HumanBase_C_RightVector::RightVector_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RightVector, CallFunc_GetControlRotation_ReturnValue) == 0x000018, "Member 'BP_HumanBase_C_RightVector::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RightVector, CallFunc_BreakRotator_Roll) == 0x000024, "Member 'BP_HumanBase_C_RightVector::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RightVector, CallFunc_BreakRotator_Pitch) == 0x000028, "Member 'BP_HumanBase_C_RightVector::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RightVector, CallFunc_BreakRotator_Yaw) == 0x00002C, "Member 'BP_HumanBase_C_RightVector::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RightVector, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'BP_HumanBase_C_RightVector::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RightVector, CallFunc_MakeRotator_ReturnValue_1) == 0x00003C, "Member 'BP_HumanBase_C_RightVector::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RightVector, CallFunc_GetForwardVector_ReturnValue) == 0x000048, "Member 'BP_HumanBase_C_RightVector::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RightVector, CallFunc_GetRightVector_ReturnValue) == 0x000054, "Member 'BP_HumanBase_C_RightVector::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetCalpsuleBaseLocation
// 0x0048 (0x0048 - 0x0000)
struct BP_HumanBase_C_GetCalpsuleBaseLocation final
{
public:
	float                                         ZOffset;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_GetCalpsuleBaseLocation) == 0x000004, "Wrong alignment on BP_HumanBase_C_GetCalpsuleBaseLocation");
static_assert(sizeof(BP_HumanBase_C_GetCalpsuleBaseLocation) == 0x000048, "Wrong size on BP_HumanBase_C_GetCalpsuleBaseLocation");
static_assert(offsetof(BP_HumanBase_C_GetCalpsuleBaseLocation, ZOffset) == 0x000000, "Member 'BP_HumanBase_C_GetCalpsuleBaseLocation::ZOffset' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCalpsuleBaseLocation, ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_GetCalpsuleBaseLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCalpsuleBaseLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000010, "Member 'BP_HumanBase_C_GetCalpsuleBaseLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCalpsuleBaseLocation, CallFunc_GetUpVector_ReturnValue) == 0x000014, "Member 'BP_HumanBase_C_GetCalpsuleBaseLocation::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCalpsuleBaseLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_HumanBase_C_GetCalpsuleBaseLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCalpsuleBaseLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000024, "Member 'BP_HumanBase_C_GetCalpsuleBaseLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCalpsuleBaseLocation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000030, "Member 'BP_HumanBase_C_GetCalpsuleBaseLocation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCalpsuleBaseLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00003C, "Member 'BP_HumanBase_C_GetCalpsuleBaseLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetCapsuleLocationFromBase
// 0x003C (0x003C - 0x0000)
struct BP_HumanBase_C_GetCapsuleLocationFromBase final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZOffset;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_GetCapsuleLocationFromBase) == 0x000004, "Wrong alignment on BP_HumanBase_C_GetCapsuleLocationFromBase");
static_assert(sizeof(BP_HumanBase_C_GetCapsuleLocationFromBase) == 0x00003C, "Wrong size on BP_HumanBase_C_GetCapsuleLocationFromBase");
static_assert(offsetof(BP_HumanBase_C_GetCapsuleLocationFromBase, BaseLocation) == 0x000000, "Member 'BP_HumanBase_C_GetCapsuleLocationFromBase::BaseLocation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCapsuleLocationFromBase, ZOffset) == 0x00000C, "Member 'BP_HumanBase_C_GetCapsuleLocationFromBase::ZOffset' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCapsuleLocationFromBase, ReturnValue) == 0x000010, "Member 'BP_HumanBase_C_GetCapsuleLocationFromBase::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCapsuleLocationFromBase, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00001C, "Member 'BP_HumanBase_C_GetCapsuleLocationFromBase::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCapsuleLocationFromBase, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_HumanBase_C_GetCapsuleLocationFromBase::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCapsuleLocationFromBase, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'BP_HumanBase_C_GetCapsuleLocationFromBase::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetCapsuleLocationFromBase, CallFunc_Add_VectorVector_ReturnValue) == 0x000030, "Member 'BP_HumanBase_C_GetCapsuleLocationFromBase::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.CalculateAcceleration
// 0x0034 (0x0034 - 0x0000)
struct BP_HumanBase_C_CalculateAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_CalculateAcceleration) == 0x000004, "Wrong alignment on BP_HumanBase_C_CalculateAcceleration");
static_assert(sizeof(BP_HumanBase_C_CalculateAcceleration) == 0x000034, "Wrong size on BP_HumanBase_C_CalculateAcceleration");
static_assert(offsetof(BP_HumanBase_C_CalculateAcceleration, ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_CalculateAcceleration::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CalculateAcceleration, CallFunc_GetVelocity_ReturnValue) == 0x00000C, "Member 'BP_HumanBase_C_CalculateAcceleration::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CalculateAcceleration, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'BP_HumanBase_C_CalculateAcceleration::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CalculateAcceleration, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00001C, "Member 'BP_HumanBase_C_CalculateAcceleration::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CalculateAcceleration, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000028, "Member 'BP_HumanBase_C_CalculateAcceleration::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.RagdollStart
// 0x0008 (0x0008 - 0x0000)
struct BP_HumanBase_C_RagdollStart final
{
public:
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_RagdollStart) == 0x000004, "Wrong alignment on BP_HumanBase_C_RagdollStart");
static_assert(sizeof(BP_HumanBase_C_RagdollStart) == 0x000008, "Wrong size on BP_HumanBase_C_RagdollStart");
static_assert(offsetof(BP_HumanBase_C_RagdollStart, CallFunc_MakeLiteralName_ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_RagdollStart::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.RagdollEnd
// 0x0010 (0x0010 - 0x0000)
struct BP_HumanBase_C_RagdollEnd final
{
public:
	class UAnimMontage*                           CallFunc_GetGetUpAnimation_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_RagdollEnd) == 0x000008, "Wrong alignment on BP_HumanBase_C_RagdollEnd");
static_assert(sizeof(BP_HumanBase_C_RagdollEnd) == 0x000010, "Wrong size on BP_HumanBase_C_RagdollEnd");
static_assert(offsetof(BP_HumanBase_C_RagdollEnd, CallFunc_GetGetUpAnimation_ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_RagdollEnd::CallFunc_GetGetUpAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RagdollEnd, CallFunc_Montage_Play_ReturnValue) == 0x000008, "Member 'BP_HumanBase_C_RagdollEnd::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RagdollEnd, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_HumanBase_C_RagdollEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.RagdollUpdate
// 0x0060 (0x0060 - 0x0000)
struct BP_HumanBase_C_RagdollUpdate final
{
public:
	struct FTransform                             ActorTransformDuringRagdoll;                       // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_RagdollUpdate) == 0x000010, "Wrong alignment on BP_HumanBase_C_RagdollUpdate");
static_assert(sizeof(BP_HumanBase_C_RagdollUpdate) == 0x000060, "Wrong size on BP_HumanBase_C_RagdollUpdate");
static_assert(offsetof(BP_HumanBase_C_RagdollUpdate, ActorTransformDuringRagdoll) == 0x000000, "Member 'BP_HumanBase_C_RagdollUpdate::ActorTransformDuringRagdoll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RagdollUpdate, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000030, "Member 'BP_HumanBase_C_RagdollUpdate::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RagdollUpdate, CallFunc_BreakVector_X) == 0x00003C, "Member 'BP_HumanBase_C_RagdollUpdate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RagdollUpdate, CallFunc_BreakVector_Y) == 0x000040, "Member 'BP_HumanBase_C_RagdollUpdate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RagdollUpdate, CallFunc_BreakVector_Z) == 0x000044, "Member 'BP_HumanBase_C_RagdollUpdate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RagdollUpdate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_HumanBase_C_RagdollUpdate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RagdollUpdate, CallFunc_VSize_ReturnValue) == 0x00004C, "Member 'BP_HumanBase_C_RagdollUpdate::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_RagdollUpdate, CallFunc_MapRangeClamped_ReturnValue) == 0x000050, "Member 'BP_HumanBase_C_RagdollUpdate::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.SetActorLocationDuringRagdoll
// 0x02F8 (0x02F8 - 0x0000)
struct BP_HumanBase_C_SetActorLocationDuringRagdoll final
{
public:
	struct FRotator                               TargetRagdollRotation;                             // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TargetRagdollLocation;                             // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_BreakVector_X;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult; // 0x0034(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue; // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue;            // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0110(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AA[0x2];                                      // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult_1; // 0x026C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue_1; // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_SetActorLocationDuringRagdoll) == 0x000008, "Wrong alignment on BP_HumanBase_C_SetActorLocationDuringRagdoll");
static_assert(sizeof(BP_HumanBase_C_SetActorLocationDuringRagdoll) == 0x0002F8, "Wrong size on BP_HumanBase_C_SetActorLocationDuringRagdoll");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, TargetRagdollRotation) == 0x000000, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::TargetRagdollRotation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, TargetRagdollLocation) == 0x00000C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::TargetRagdollLocation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, Temp_object_Variable) == 0x000018, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_X) == 0x000028, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_Y) == 0x00002C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_Z) == 0x000030, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult) == 0x000034, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue) == 0x0000BC, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_X_1) == 0x0000C0, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_Y_1) == 0x0000C4, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_Z_1) == 0x0000C8, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, Temp_bool_Variable) == 0x0000CC, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_GetSocketLocation_ReturnValue) == 0x0000D0, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_GetSocketRotation_ReturnValue) == 0x0000DC, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_GetSocketRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000E8, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakRotator_Roll) == 0x0000EC, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakRotator_Pitch) == 0x0000F0, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakRotator_Yaw) == 0x0000F4, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000F8, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000FC, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_MakeVector_ReturnValue) == 0x000100, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, K2Node_Select_Default) == 0x00010C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_LineTraceSingle_OutHit) == 0x000110, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_LineTraceSingle_ReturnValue) == 0x000198, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_MakeRotator_ReturnValue) == 0x00019C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_bBlockingHit) == 0x0001A8, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001A9, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_Time) == 0x0001AC, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_Distance) == 0x0001B0, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_Location) == 0x0001B4, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_ImpactPoint) == 0x0001C0, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_Normal) == 0x0001CC, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_ImpactNormal) == 0x0001D8, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_PhysMat) == 0x0001E8, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_HitActor) == 0x0001F0, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_HitComponent) == 0x0001F8, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_HitBoneName) == 0x000200, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_HitItem) == 0x000208, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_ElementIndex) == 0x00020C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_FaceIndex) == 0x000210, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_TraceStart) == 0x000214, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakHitResult_TraceEnd) == 0x000220, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_X_2) == 0x00022C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_Y_2) == 0x000230, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_Z_2) == 0x000234, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_X_3) == 0x000238, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_Y_3) == 0x00023C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_BreakVector_Z_3) == 0x000240, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000244, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_Less_FloatFloat_ReturnValue) == 0x000248, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_Abs_ReturnValue) == 0x00024C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x000250, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000254, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_Add_FloatFloat_ReturnValue) == 0x000258, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00025C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_MakeVector_ReturnValue_1) == 0x000260, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult_1) == 0x00026C, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_SetActorLocationDuringRagdoll, CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue_1) == 0x0002F4, "Member 'BP_HumanBase_C_SetActorLocationDuringRagdoll::CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue_1' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetTraceDebugType
// 0x0038 (0x0038 - 0x0000)
struct BP_HumanBase_C_GetTraceDebugType final
{
public:
	EDrawDebugTrace                               ShowTraceType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IALS_Controller_BPI_C> K2Node_DynamicCast_AsALS_Controller_BPI;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_BPI_Get_DebugInfo_DebugFocusCharacter;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_Get_DebugInfo_DebugView;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowHUD;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowTraces;             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowDebugShapes;        // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowLayerColors;        // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_Slomo;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_Get_DebugInfo_ShowCharacterInfo;      // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_GetTraceDebugType) == 0x000008, "Wrong alignment on BP_HumanBase_C_GetTraceDebugType");
static_assert(sizeof(BP_HumanBase_C_GetTraceDebugType) == 0x000038, "Wrong size on BP_HumanBase_C_GetTraceDebugType");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, ShowTraceType) == 0x000000, "Member 'BP_HumanBase_C_GetTraceDebugType::ShowTraceType' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, ReturnValue) == 0x000001, "Member 'BP_HumanBase_C_GetTraceDebugType::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_HumanBase_C_GetTraceDebugType::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, K2Node_DynamicCast_AsALS_Controller_BPI) == 0x000010, "Member 'BP_HumanBase_C_GetTraceDebugType::K2Node_DynamicCast_AsALS_Controller_BPI' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_HumanBase_C_GetTraceDebugType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, CallFunc_BPI_Get_DebugInfo_DebugFocusCharacter) == 0x000028, "Member 'BP_HumanBase_C_GetTraceDebugType::CallFunc_BPI_Get_DebugInfo_DebugFocusCharacter' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, CallFunc_BPI_Get_DebugInfo_DebugView) == 0x000030, "Member 'BP_HumanBase_C_GetTraceDebugType::CallFunc_BPI_Get_DebugInfo_DebugView' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, CallFunc_BPI_Get_DebugInfo_ShowHUD) == 0x000031, "Member 'BP_HumanBase_C_GetTraceDebugType::CallFunc_BPI_Get_DebugInfo_ShowHUD' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, CallFunc_BPI_Get_DebugInfo_ShowTraces) == 0x000032, "Member 'BP_HumanBase_C_GetTraceDebugType::CallFunc_BPI_Get_DebugInfo_ShowTraces' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, CallFunc_BPI_Get_DebugInfo_ShowDebugShapes) == 0x000033, "Member 'BP_HumanBase_C_GetTraceDebugType::CallFunc_BPI_Get_DebugInfo_ShowDebugShapes' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, CallFunc_BPI_Get_DebugInfo_ShowLayerColors) == 0x000034, "Member 'BP_HumanBase_C_GetTraceDebugType::CallFunc_BPI_Get_DebugInfo_ShowLayerColors' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, CallFunc_BPI_Get_DebugInfo_Slomo) == 0x000035, "Member 'BP_HumanBase_C_GetTraceDebugType::CallFunc_BPI_Get_DebugInfo_Slomo' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetTraceDebugType, CallFunc_BPI_Get_DebugInfo_ShowCharacterInfo) == 0x000036, "Member 'BP_HumanBase_C_GetTraceDebugType::CallFunc_BPI_Get_DebugInfo_ShowCharacterInfo' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetAnimCurveValue
// 0x0014 (0x0014 - 0x0000)
struct BP_HumanBase_C_GetAnimCurveValue final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_GetAnimCurveValue) == 0x000004, "Wrong alignment on BP_HumanBase_C_GetAnimCurveValue");
static_assert(sizeof(BP_HumanBase_C_GetAnimCurveValue) == 0x000014, "Wrong size on BP_HumanBase_C_GetAnimCurveValue");
static_assert(offsetof(BP_HumanBase_C_GetAnimCurveValue, CurveName) == 0x000000, "Member 'BP_HumanBase_C_GetAnimCurveValue::CurveName' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetAnimCurveValue, ReturnValue) == 0x000008, "Member 'BP_HumanBase_C_GetAnimCurveValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetAnimCurveValue, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_HumanBase_C_GetAnimCurveValue::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetAnimCurveValue, CallFunc_GetCurveValue_ReturnValue) == 0x000010, "Member 'BP_HumanBase_C_GetAnimCurveValue::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.On Begin Play
// 0x0020 (0x0020 - 0x0000)
struct BP_HumanBase_C_On_Begin_Play final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_On_Begin_Play) == 0x000008, "Wrong alignment on BP_HumanBase_C_On_Begin_Play");
static_assert(sizeof(BP_HumanBase_C_On_Begin_Play) == 0x000020, "Wrong size on BP_HumanBase_C_On_Begin_Play");
static_assert(offsetof(BP_HumanBase_C_On_Begin_Play, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_HumanBase_C_On_Begin_Play::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_On_Begin_Play, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_On_Begin_Play::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_On_Begin_Play, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'BP_HumanBase_C_On_Begin_Play::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_On_Begin_Play, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_HumanBase_C_On_Begin_Play::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.OnCharacterMovementModeChanged
// 0x0005 (0x0005 - 0x0000)
struct BP_HumanBase_C_OnCharacterMovementModeChanged final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_OnCharacterMovementModeChanged) == 0x000001, "Wrong alignment on BP_HumanBase_C_OnCharacterMovementModeChanged");
static_assert(sizeof(BP_HumanBase_C_OnCharacterMovementModeChanged) == 0x000005, "Wrong size on BP_HumanBase_C_OnCharacterMovementModeChanged");
static_assert(offsetof(BP_HumanBase_C_OnCharacterMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'BP_HumanBase_C_OnCharacterMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnCharacterMovementModeChanged, NewMovementMode) == 0x000001, "Member 'BP_HumanBase_C_OnCharacterMovementModeChanged::NewMovementMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnCharacterMovementModeChanged, PrevCustomMode) == 0x000002, "Member 'BP_HumanBase_C_OnCharacterMovementModeChanged::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnCharacterMovementModeChanged, NewCustomMode) == 0x000003, "Member 'BP_HumanBase_C_OnCharacterMovementModeChanged::NewCustomMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnCharacterMovementModeChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_HumanBase_C_OnCharacterMovementModeChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.OnMovementStateChanged
// 0x0014 (0x0014 - 0x0000)
struct BP_HumanBase_C_OnMovementStateChanged final
{
public:
	EALS_MovementState                            NewMovementState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PreviousMovementState;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_OnMovementStateChanged) == 0x000004, "Wrong alignment on BP_HumanBase_C_OnMovementStateChanged");
static_assert(sizeof(BP_HumanBase_C_OnMovementStateChanged) == 0x000014, "Wrong size on BP_HumanBase_C_OnMovementStateChanged");
static_assert(offsetof(BP_HumanBase_C_OnMovementStateChanged, NewMovementState) == 0x000000, "Member 'BP_HumanBase_C_OnMovementStateChanged::NewMovementState' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementStateChanged, PreviousMovementState) == 0x000001, "Member 'BP_HumanBase_C_OnMovementStateChanged::PreviousMovementState' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementStateChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_HumanBase_C_OnMovementStateChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementStateChanged, K2Node_SwitchEnum_CmpSuccess_1) == 0x000003, "Member 'BP_HumanBase_C_OnMovementStateChanged::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementStateChanged, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_OnMovementStateChanged::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementStateChanged, K2Node_SwitchEnum_CmpSuccess_2) == 0x000010, "Member 'BP_HumanBase_C_OnMovementStateChanged::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementStateChanged, K2Node_SwitchEnum_CmpSuccess_3) == 0x000011, "Member 'BP_HumanBase_C_OnMovementStateChanged::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.OnMovementActionChanged
// 0x0005 (0x0005 - 0x0000)
struct BP_HumanBase_C_OnMovementActionChanged final
{
public:
	EALS_MovementAction                           NewMovementAction;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           PreviousMovementAction;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_OnMovementActionChanged) == 0x000001, "Wrong alignment on BP_HumanBase_C_OnMovementActionChanged");
static_assert(sizeof(BP_HumanBase_C_OnMovementActionChanged) == 0x000005, "Wrong size on BP_HumanBase_C_OnMovementActionChanged");
static_assert(offsetof(BP_HumanBase_C_OnMovementActionChanged, NewMovementAction) == 0x000000, "Member 'BP_HumanBase_C_OnMovementActionChanged::NewMovementAction' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementActionChanged, PreviousMovementAction) == 0x000001, "Member 'BP_HumanBase_C_OnMovementActionChanged::PreviousMovementAction' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementActionChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_HumanBase_C_OnMovementActionChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementActionChanged, K2Node_SwitchEnum_CmpSuccess_1) == 0x000003, "Member 'BP_HumanBase_C_OnMovementActionChanged::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnMovementActionChanged, K2Node_SwitchEnum_CmpSuccess_2) == 0x000004, "Member 'BP_HumanBase_C_OnMovementActionChanged::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.OnStanceChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_HumanBase_C_OnStanceChanged final
{
public:
	EALS_Stance                                   NewStance;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   PreviousStance;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_OnStanceChanged) == 0x000001, "Wrong alignment on BP_HumanBase_C_OnStanceChanged");
static_assert(sizeof(BP_HumanBase_C_OnStanceChanged) == 0x000002, "Wrong size on BP_HumanBase_C_OnStanceChanged");
static_assert(offsetof(BP_HumanBase_C_OnStanceChanged, NewStance) == 0x000000, "Member 'BP_HumanBase_C_OnStanceChanged::NewStance' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnStanceChanged, PreviousStance) == 0x000001, "Member 'BP_HumanBase_C_OnStanceChanged::PreviousStance' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.OnRotationModeChanged
// 0x0004 (0x0004 - 0x0000)
struct BP_HumanBase_C_OnRotationModeChanged final
{
public:
	EALS_RotationMode                             NewRotationMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             PreviousRotationMode;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_OnRotationModeChanged) == 0x000001, "Wrong alignment on BP_HumanBase_C_OnRotationModeChanged");
static_assert(sizeof(BP_HumanBase_C_OnRotationModeChanged) == 0x000004, "Wrong size on BP_HumanBase_C_OnRotationModeChanged");
static_assert(offsetof(BP_HumanBase_C_OnRotationModeChanged, NewRotationMode) == 0x000000, "Member 'BP_HumanBase_C_OnRotationModeChanged::NewRotationMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnRotationModeChanged, PreviousRotationMode) == 0x000001, "Member 'BP_HumanBase_C_OnRotationModeChanged::PreviousRotationMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnRotationModeChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_HumanBase_C_OnRotationModeChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnRotationModeChanged, K2Node_SwitchEnum_CmpSuccess_1) == 0x000003, "Member 'BP_HumanBase_C_OnRotationModeChanged::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.OnGaitChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_HumanBase_C_OnGaitChanged final
{
public:
	EALS_Gait                                     NewActualGait;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     PreviousActualGait;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_OnGaitChanged) == 0x000001, "Wrong alignment on BP_HumanBase_C_OnGaitChanged");
static_assert(sizeof(BP_HumanBase_C_OnGaitChanged) == 0x000002, "Wrong size on BP_HumanBase_C_OnGaitChanged");
static_assert(offsetof(BP_HumanBase_C_OnGaitChanged, NewActualGait) == 0x000000, "Member 'BP_HumanBase_C_OnGaitChanged::NewActualGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnGaitChanged, PreviousActualGait) == 0x000001, "Member 'BP_HumanBase_C_OnGaitChanged::PreviousActualGait' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.OnViewModeChanged
// 0x0005 (0x0005 - 0x0000)
struct BP_HumanBase_C_OnViewModeChanged final
{
public:
	EALS_ViewMode                                 NewViewMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 PreviousViewMode;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_OnViewModeChanged) == 0x000001, "Wrong alignment on BP_HumanBase_C_OnViewModeChanged");
static_assert(sizeof(BP_HumanBase_C_OnViewModeChanged) == 0x000005, "Wrong size on BP_HumanBase_C_OnViewModeChanged");
static_assert(offsetof(BP_HumanBase_C_OnViewModeChanged, NewViewMode) == 0x000000, "Member 'BP_HumanBase_C_OnViewModeChanged::NewViewMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnViewModeChanged, PreviousViewMode) == 0x000001, "Member 'BP_HumanBase_C_OnViewModeChanged::PreviousViewMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnViewModeChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_HumanBase_C_OnViewModeChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnViewModeChanged, K2Node_SwitchEnum_CmpSuccess_1) == 0x000003, "Member 'BP_HumanBase_C_OnViewModeChanged::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnViewModeChanged, K2Node_SwitchEnum_CmpSuccess_2) == 0x000004, "Member 'BP_HumanBase_C_OnViewModeChanged::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.OnOverlayStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_HumanBase_C_OnOverlayStateChanged final
{
public:
	EALS_OverlayState                             NewOverlayState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             PreviousOverlayState;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_OnOverlayStateChanged) == 0x000001, "Wrong alignment on BP_HumanBase_C_OnOverlayStateChanged");
static_assert(sizeof(BP_HumanBase_C_OnOverlayStateChanged) == 0x000002, "Wrong size on BP_HumanBase_C_OnOverlayStateChanged");
static_assert(offsetof(BP_HumanBase_C_OnOverlayStateChanged, NewOverlayState) == 0x000000, "Member 'BP_HumanBase_C_OnOverlayStateChanged::NewOverlayState' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_OnOverlayStateChanged, PreviousOverlayState) == 0x000001, "Member 'BP_HumanBase_C_OnOverlayStateChanged::PreviousOverlayState' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.CanUpdateMovingRotation
// 0x0007 (0x0007 - 0x0000)
struct BP_HumanBase_C_CanUpdateMovingRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyRootMotion_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_CanUpdateMovingRotation) == 0x000001, "Wrong alignment on BP_HumanBase_C_CanUpdateMovingRotation");
static_assert(sizeof(BP_HumanBase_C_CanUpdateMovingRotation) == 0x000007, "Wrong size on BP_HumanBase_C_CanUpdateMovingRotation");
static_assert(offsetof(BP_HumanBase_C_CanUpdateMovingRotation, ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_CanUpdateMovingRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanUpdateMovingRotation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_HumanBase_C_CanUpdateMovingRotation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanUpdateMovingRotation, CallFunc_HasAnyRootMotion_ReturnValue) == 0x000002, "Member 'BP_HumanBase_C_CanUpdateMovingRotation::CallFunc_HasAnyRootMotion_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanUpdateMovingRotation, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_HumanBase_C_CanUpdateMovingRotation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanUpdateMovingRotation, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_HumanBase_C_CanUpdateMovingRotation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanUpdateMovingRotation, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'BP_HumanBase_C_CanUpdateMovingRotation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_CanUpdateMovingRotation, CallFunc_BooleanAND_ReturnValue_1) == 0x000006, "Member 'BP_HumanBase_C_CanUpdateMovingRotation::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetMappedSpeed
// 0x0028 (0x0028 - 0x0000)
struct BP_HumanBase_C_GetMappedSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocSprintSpeed;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocRunSpeed;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocWalkSpeed;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_2;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_GetMappedSpeed) == 0x000004, "Wrong alignment on BP_HumanBase_C_GetMappedSpeed");
static_assert(sizeof(BP_HumanBase_C_GetMappedSpeed) == 0x000028, "Wrong size on BP_HumanBase_C_GetMappedSpeed");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_GetMappedSpeed::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, LocSprintSpeed) == 0x000004, "Member 'BP_HumanBase_C_GetMappedSpeed::LocSprintSpeed' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, LocRunSpeed) == 0x000008, "Member 'BP_HumanBase_C_GetMappedSpeed::LocRunSpeed' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, LocWalkSpeed) == 0x00000C, "Member 'BP_HumanBase_C_GetMappedSpeed::LocWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, Temp_bool_Variable) == 0x000010, "Member 'BP_HumanBase_C_GetMappedSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, Temp_bool_Variable_1) == 0x000011, "Member 'BP_HumanBase_C_GetMappedSpeed::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000012, "Member 'BP_HumanBase_C_GetMappedSpeed::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000013, "Member 'BP_HumanBase_C_GetMappedSpeed::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, CallFunc_MapRangeClamped_ReturnValue) == 0x000014, "Member 'BP_HumanBase_C_GetMappedSpeed::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000018, "Member 'BP_HumanBase_C_GetMappedSpeed::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, CallFunc_MapRangeClamped_ReturnValue_2) == 0x00001C, "Member 'BP_HumanBase_C_GetMappedSpeed::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, K2Node_Select_Default) == 0x000020, "Member 'BP_HumanBase_C_GetMappedSpeed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetMappedSpeed, K2Node_Select_Default_1) == 0x000024, "Member 'BP_HumanBase_C_GetMappedSpeed::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetRollAnimation
// 0x0008 (0x0008 - 0x0000)
struct BP_HumanBase_C_GetRollAnimation final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_GetRollAnimation) == 0x000008, "Wrong alignment on BP_HumanBase_C_GetRollAnimation");
static_assert(sizeof(BP_HumanBase_C_GetRollAnimation) == 0x000008, "Wrong size on BP_HumanBase_C_GetRollAnimation");
static_assert(offsetof(BP_HumanBase_C_GetRollAnimation, ReturnValue) == 0x000000, "Member 'BP_HumanBase_C_GetRollAnimation::ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.GetGetUpAnimation
// 0x0010 (0x0010 - 0x0000)
struct BP_HumanBase_C_GetGetUpAnimation final
{
public:
	bool                                          RagdollFaceUp_0;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_GetGetUpAnimation) == 0x000008, "Wrong alignment on BP_HumanBase_C_GetGetUpAnimation");
static_assert(sizeof(BP_HumanBase_C_GetGetUpAnimation) == 0x000010, "Wrong size on BP_HumanBase_C_GetGetUpAnimation");
static_assert(offsetof(BP_HumanBase_C_GetGetUpAnimation, RagdollFaceUp_0) == 0x000000, "Member 'BP_HumanBase_C_GetGetUpAnimation::RagdollFaceUp_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_GetGetUpAnimation, ReturnValue) == 0x000008, "Member 'BP_HumanBase_C_GetGetUpAnimation::ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.BPI_Get_EssentialValues
// 0x0064 (0x0064 - 0x0000)
struct BP_HumanBase_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Acceleration_0;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovementInput;                                     // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving_0;                                        // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasMovementInput_0;                                // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed_0;                                           // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementInputAmount_0;                             // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AimingRotation;                                    // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         AimYawRate_0;                                      // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_BPI_Get_EssentialValues) == 0x000004, "Wrong alignment on BP_HumanBase_C_BPI_Get_EssentialValues");
static_assert(sizeof(BP_HumanBase_C_BPI_Get_EssentialValues) == 0x000064, "Wrong size on BP_HumanBase_C_BPI_Get_EssentialValues");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, Velocity) == 0x000000, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::Velocity' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, Acceleration_0) == 0x00000C, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::Acceleration_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, MovementInput) == 0x000018, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::MovementInput' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, IsMoving_0) == 0x000024, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::IsMoving_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, HasMovementInput_0) == 0x000025, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::HasMovementInput_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, Speed_0) == 0x000028, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, MovementInputAmount_0) == 0x00002C, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::MovementInputAmount_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, AimingRotation) == 0x000030, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::AimingRotation' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, AimYawRate_0) == 0x00003C, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::AimYawRate_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, CallFunc_GetVelocity_ReturnValue) == 0x000040, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x00004C, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_EssentialValues, CallFunc_GetControlRotation_ReturnValue) == 0x000058, "Member 'BP_HumanBase_C_BPI_Get_EssentialValues::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.BPI_Get_CurrentStates
// 0x0009 (0x0009 - 0x0000)
struct BP_HumanBase_C_BPI_Get_CurrentStates final
{
public:
	EMovementMode                                 PawnMovementMode;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            MovementState_0;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PrevMovementState_0;                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           MovementAction_0;                                  // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             RotationMode_0;                                    // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     ActualGait;                                        // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   ActualStance;                                      // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 ViewMode_0;                                        // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             OverlayState_0;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_BPI_Get_CurrentStates) == 0x000001, "Wrong alignment on BP_HumanBase_C_BPI_Get_CurrentStates");
static_assert(sizeof(BP_HumanBase_C_BPI_Get_CurrentStates) == 0x000009, "Wrong size on BP_HumanBase_C_BPI_Get_CurrentStates");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_CurrentStates, PawnMovementMode) == 0x000000, "Member 'BP_HumanBase_C_BPI_Get_CurrentStates::PawnMovementMode' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_CurrentStates, MovementState_0) == 0x000001, "Member 'BP_HumanBase_C_BPI_Get_CurrentStates::MovementState_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_CurrentStates, PrevMovementState_0) == 0x000002, "Member 'BP_HumanBase_C_BPI_Get_CurrentStates::PrevMovementState_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_CurrentStates, MovementAction_0) == 0x000003, "Member 'BP_HumanBase_C_BPI_Get_CurrentStates::MovementAction_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_CurrentStates, RotationMode_0) == 0x000004, "Member 'BP_HumanBase_C_BPI_Get_CurrentStates::RotationMode_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_CurrentStates, ActualGait) == 0x000005, "Member 'BP_HumanBase_C_BPI_Get_CurrentStates::ActualGait' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_CurrentStates, ActualStance) == 0x000006, "Member 'BP_HumanBase_C_BPI_Get_CurrentStates::ActualStance' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_CurrentStates, ViewMode_0) == 0x000007, "Member 'BP_HumanBase_C_BPI_Get_CurrentStates::ViewMode_0' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_BPI_Get_CurrentStates, OverlayState_0) == 0x000008, "Member 'BP_HumanBase_C_BPI_Get_CurrentStates::OverlayState_0' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.Get_AnimBP
// 0x0010 (0x0010 - 0x0000)
struct BP_HumanBase_C_Get_AnimBP final
{
public:
	class UAnimInstance*                          Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_Get_AnimBP) == 0x000008, "Wrong alignment on BP_HumanBase_C_Get_AnimBP");
static_assert(sizeof(BP_HumanBase_C_Get_AnimBP) == 0x000010, "Wrong size on BP_HumanBase_C_Get_AnimBP");
static_assert(offsetof(BP_HumanBase_C_Get_AnimBP, Return) == 0x000000, "Member 'BP_HumanBase_C_Get_AnimBP::Return' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_AnimBP, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'BP_HumanBase_C_Get_AnimBP::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.Get_ABP_CH_MeshBaseVariable
// 0x0028 (0x0028 - 0x0000)
struct BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable final
{
public:
	float                                         LookAtHorizontal;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtVertical;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out_Interp_LookatHair_H;                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out_Interp_LookatHair_V;                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Out;                                  // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Upperbody_Out;                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Lowerbody_Out;                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Hair_Out;                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Jacket_Out;                           // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsAlpha_Skirt_Out;                            // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable) == 0x000004, "Wrong alignment on BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable");
static_assert(sizeof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable) == 0x000028, "Wrong size on BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, LookAtHorizontal) == 0x000000, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::LookAtHorizontal' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, LookAtVertical) == 0x000004, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::LookAtVertical' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, Out_Interp_LookatHair_H) == 0x000008, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::Out_Interp_LookatHair_H' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, Out_Interp_LookatHair_V) == 0x00000C, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::Out_Interp_LookatHair_V' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Out) == 0x000010, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Out' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Upperbody_Out) == 0x000014, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Upperbody_Out' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Lowerbody_Out) == 0x000018, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Lowerbody_Out' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Hair_Out) == 0x00001C, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Hair_Out' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Jacket_Out) == 0x000020, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Jacket_Out' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable, PhysicsAlpha_Skirt_Out) == 0x000024, "Member 'BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable::PhysicsAlpha_Skirt_Out' has a wrong offset!");

// Function BP_HumanBase.BP_HumanBase_C.Get_Enable_FootIK
// 0x0002 (0x0002 - 0x0000)
struct BP_HumanBase_C_Get_Enable_FootIK final
{
public:
	bool                                          Out_foot_r;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Out_foot_l;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HumanBase_C_Get_Enable_FootIK) == 0x000001, "Wrong alignment on BP_HumanBase_C_Get_Enable_FootIK");
static_assert(sizeof(BP_HumanBase_C_Get_Enable_FootIK) == 0x000002, "Wrong size on BP_HumanBase_C_Get_Enable_FootIK");
static_assert(offsetof(BP_HumanBase_C_Get_Enable_FootIK, Out_foot_r) == 0x000000, "Member 'BP_HumanBase_C_Get_Enable_FootIK::Out_foot_r' has a wrong offset!");
static_assert(offsetof(BP_HumanBase_C_Get_Enable_FootIK, Out_foot_l) == 0x000001, "Member 'BP_HumanBase_C_Get_Enable_FootIK::Out_foot_l' has a wrong offset!");

}

