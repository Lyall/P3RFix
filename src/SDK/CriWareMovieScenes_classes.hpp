#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareMovieScenes

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieSceneTracks_structs.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "CriWareRuntime_structs.hpp"


namespace SDK
{

// Class CriWareMovieScenes.MovieSceneAtomSection
// 0x0258 (0x0340 - 0x00E8)
class UMovieSceneAtomSection final : public UMovieSceneSection
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           StartFrameOffset;                                  // 0x00F0(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                SoundVolume;                                       // 0x00F8(0x00A0)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                PitchMultiplier;                                   // 0x0198(0x00A0)(NativeAccessSpecifierPrivate)
	struct FMovieSceneActorReferenceData          AttachActorData;                                   // 0x0238(0x00B0)(NativeAccessSpecifierPrivate)
	TArray<struct FScalarParameterNameAndCurve>   ScalarParameterNamesAndCurves;                     // 0x02E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bSuppressSubtitles;                                // 0x02F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOverrideAttenuation;                              // 0x02F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FA[0x6];                                      // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0300(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bContinueSoundWhenSequenceIsEnd;                   // 0x0308(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AsrRackIDs;                                        // 0x0310(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FAtomSelectorParam>             SelectorLabels;                                    // 0x0320(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bLooping;                                          // 0x0330(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_331[0xF];                                      // 0x0331(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetStartOffset(const struct FFrameNumber& InStartOffset);

	struct FFrameNumber GetStartOffset() const;
	bool IsLooping() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAtomSection">();
	}
	static class UMovieSceneAtomSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAtomSection>();
	}
};
static_assert(alignof(UMovieSceneAtomSection) == 0x000008, "Wrong alignment on UMovieSceneAtomSection");
static_assert(sizeof(UMovieSceneAtomSection) == 0x000340, "Wrong size on UMovieSceneAtomSection");
static_assert(offsetof(UMovieSceneAtomSection, Sound) == 0x0000E8, "Member 'UMovieSceneAtomSection::Sound' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, StartFrameOffset) == 0x0000F0, "Member 'UMovieSceneAtomSection::StartFrameOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, SoundVolume) == 0x0000F8, "Member 'UMovieSceneAtomSection::SoundVolume' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, PitchMultiplier) == 0x000198, "Member 'UMovieSceneAtomSection::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, AttachActorData) == 0x000238, "Member 'UMovieSceneAtomSection::AttachActorData' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, ScalarParameterNamesAndCurves) == 0x0002E8, "Member 'UMovieSceneAtomSection::ScalarParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, bSuppressSubtitles) == 0x0002F8, "Member 'UMovieSceneAtomSection::bSuppressSubtitles' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, bOverrideAttenuation) == 0x0002F9, "Member 'UMovieSceneAtomSection::bOverrideAttenuation' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, AttenuationSettings) == 0x000300, "Member 'UMovieSceneAtomSection::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, bContinueSoundWhenSequenceIsEnd) == 0x000308, "Member 'UMovieSceneAtomSection::bContinueSoundWhenSequenceIsEnd' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, AsrRackIDs) == 0x000310, "Member 'UMovieSceneAtomSection::AsrRackIDs' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, SelectorLabels) == 0x000320, "Member 'UMovieSceneAtomSection::SelectorLabels' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, bLooping) == 0x000330, "Member 'UMovieSceneAtomSection::bLooping' has a wrong offset!");

// Class CriWareMovieScenes.MovieSceneAtomTrack
// 0x0018 (0x00A8 - 0x0090)
class UMovieSceneAtomTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             AtomSections;                                      // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAtomTrack">();
	}
	static class UMovieSceneAtomTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAtomTrack>();
	}
};
static_assert(alignof(UMovieSceneAtomTrack) == 0x000008, "Wrong alignment on UMovieSceneAtomTrack");
static_assert(sizeof(UMovieSceneAtomTrack) == 0x0000A8, "Wrong size on UMovieSceneAtomTrack");
static_assert(offsetof(UMovieSceneAtomTrack, AtomSections) == 0x000098, "Member 'UMovieSceneAtomTrack::AtomSections' has a wrong offset!");

// Class CriWareMovieScenes.MovieSceneManaSection
// 0x0030 (0x0118 - 0x00E8)
class UMovieSceneManaSection final : public UMovieSceneSection
{
public:
	class UManaSource*                            ManaSource;                                        // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameNumber                           StartFrameOffset;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UManaTexture*                           ManaTexture;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         AtomComponent;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExternalManaPlayer;                            // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaPlayer*                            ExternalManaPlayer;                                // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneManaSection">();
	}
	static class UMovieSceneManaSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneManaSection>();
	}
};
static_assert(alignof(UMovieSceneManaSection) == 0x000008, "Wrong alignment on UMovieSceneManaSection");
static_assert(sizeof(UMovieSceneManaSection) == 0x000118, "Wrong size on UMovieSceneManaSection");
static_assert(offsetof(UMovieSceneManaSection, ManaSource) == 0x0000E8, "Member 'UMovieSceneManaSection::ManaSource' has a wrong offset!");
static_assert(offsetof(UMovieSceneManaSection, bLooping) == 0x0000F0, "Member 'UMovieSceneManaSection::bLooping' has a wrong offset!");
static_assert(offsetof(UMovieSceneManaSection, StartFrameOffset) == 0x0000F4, "Member 'UMovieSceneManaSection::StartFrameOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneManaSection, ManaTexture) == 0x0000F8, "Member 'UMovieSceneManaSection::ManaTexture' has a wrong offset!");
static_assert(offsetof(UMovieSceneManaSection, AtomComponent) == 0x000100, "Member 'UMovieSceneManaSection::AtomComponent' has a wrong offset!");
static_assert(offsetof(UMovieSceneManaSection, bUseExternalManaPlayer) == 0x000108, "Member 'UMovieSceneManaSection::bUseExternalManaPlayer' has a wrong offset!");
static_assert(offsetof(UMovieSceneManaSection, ExternalManaPlayer) == 0x000110, "Member 'UMovieSceneManaSection::ExternalManaPlayer' has a wrong offset!");

// Class CriWareMovieScenes.MovieSceneManaTrack
// 0x0040 (0x00D0 - 0x0090)
class UMovieSceneManaTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             ManaSections;                                      // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMovieSceneAtomTrack>    SyncedAtomTrack;                                   // 0x00A8(0x0028)(ExportObject, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneManaTrack">();
	}
	static class UMovieSceneManaTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneManaTrack>();
	}
};
static_assert(alignof(UMovieSceneManaTrack) == 0x000008, "Wrong alignment on UMovieSceneManaTrack");
static_assert(sizeof(UMovieSceneManaTrack) == 0x0000D0, "Wrong size on UMovieSceneManaTrack");
static_assert(offsetof(UMovieSceneManaTrack, ManaSections) == 0x000098, "Member 'UMovieSceneManaTrack::ManaSections' has a wrong offset!");
static_assert(offsetof(UMovieSceneManaTrack, SyncedAtomTrack) == 0x0000A8, "Member 'UMovieSceneManaTrack::SyncedAtomTrack' has a wrong offset!");

}

