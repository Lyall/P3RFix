#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Monitorsnap

#include "Basic.hpp"

#include "Monitorsnap_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function monitorsnap.MonitorBlueprintLibrary.ApplyMonitorSettings
// 0x0028 (0x0028 - 0x0000)
struct MonitorBlueprintLibrary_ApplyMonitorSettings final
{
public:
	struct FMonitorResolution                     Resolution;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EWindowMode                                   ScreenMode;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMonitorHandle                         Monitor;                                           // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCheckForCommandLineOverrides;                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonitorBlueprintLibrary_ApplyMonitorSettings) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_ApplyMonitorSettings");
static_assert(sizeof(MonitorBlueprintLibrary_ApplyMonitorSettings) == 0x000028, "Wrong size on MonitorBlueprintLibrary_ApplyMonitorSettings");
static_assert(offsetof(MonitorBlueprintLibrary_ApplyMonitorSettings, Resolution) == 0x000000, "Member 'MonitorBlueprintLibrary_ApplyMonitorSettings::Resolution' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_ApplyMonitorSettings, ScreenMode) == 0x000010, "Member 'MonitorBlueprintLibrary_ApplyMonitorSettings::ScreenMode' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_ApplyMonitorSettings, Monitor) == 0x000018, "Member 'MonitorBlueprintLibrary_ApplyMonitorSettings::Monitor' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_ApplyMonitorSettings, bCheckForCommandLineOverrides) == 0x000020, "Member 'MonitorBlueprintLibrary_ApplyMonitorSettings::bCheckForCommandLineOverrides' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_ApplyMonitorSettings, Duration) == 0x000024, "Member 'MonitorBlueprintLibrary_ApplyMonitorSettings::Duration' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.EqualEqual_MonitorHandleMonitorHandle
// 0x0018 (0x0018 - 0x0000)
struct MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle final
{
public:
	struct FMonitorHandle                         A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMonitorHandle                         B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle");
static_assert(sizeof(MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle) == 0x000018, "Wrong size on MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle");
static_assert(offsetof(MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle, A) == 0x000000, "Member 'MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle::A' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle, B) == 0x000008, "Member 'MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle::B' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle, ReturnValue) == 0x000010, "Member 'MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.EqualEqual_MonitorResolutionMonitorResolution
// 0x0024 (0x0024 - 0x0000)
struct MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution final
{
public:
	struct FMonitorResolution                     Left;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMonitorResolution                     Right;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution) == 0x000004, "Wrong alignment on MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution");
static_assert(sizeof(MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution) == 0x000024, "Wrong size on MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution");
static_assert(offsetof(MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution, Left) == 0x000000, "Member 'MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution::Left' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution, Right) == 0x000010, "Member 'MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution::Right' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution, ReturnValue) == 0x000020, "Member 'MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetAvailableMonitors
// 0x0010 (0x0010 - 0x0000)
struct MonitorBlueprintLibrary_GetAvailableMonitors final
{
public:
	TArray<struct FMonitorHandle>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonitorBlueprintLibrary_GetAvailableMonitors) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_GetAvailableMonitors");
static_assert(sizeof(MonitorBlueprintLibrary_GetAvailableMonitors) == 0x000010, "Wrong size on MonitorBlueprintLibrary_GetAvailableMonitors");
static_assert(offsetof(MonitorBlueprintLibrary_GetAvailableMonitors, ReturnValue) == 0x000000, "Member 'MonitorBlueprintLibrary_GetAvailableMonitors::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetClosestEnclosingResolution
// 0x0020 (0x0020 - 0x0000)
struct MonitorBlueprintLibrary_GetClosestEnclosingResolution final
{
public:
	struct FMonitorHandle                         MonitorHandle;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntPoint                              DesiredSize;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMonitorResolution                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonitorBlueprintLibrary_GetClosestEnclosingResolution) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_GetClosestEnclosingResolution");
static_assert(sizeof(MonitorBlueprintLibrary_GetClosestEnclosingResolution) == 0x000020, "Wrong size on MonitorBlueprintLibrary_GetClosestEnclosingResolution");
static_assert(offsetof(MonitorBlueprintLibrary_GetClosestEnclosingResolution, MonitorHandle) == 0x000000, "Member 'MonitorBlueprintLibrary_GetClosestEnclosingResolution::MonitorHandle' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetClosestEnclosingResolution, DesiredSize) == 0x000008, "Member 'MonitorBlueprintLibrary_GetClosestEnclosingResolution::DesiredSize' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetClosestEnclosingResolution, ReturnValue) == 0x000010, "Member 'MonitorBlueprintLibrary_GetClosestEnclosingResolution::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetCurrentMonitor
// 0x0008 (0x0008 - 0x0000)
struct MonitorBlueprintLibrary_GetCurrentMonitor final
{
public:
	struct FMonitorHandle                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonitorBlueprintLibrary_GetCurrentMonitor) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_GetCurrentMonitor");
static_assert(sizeof(MonitorBlueprintLibrary_GetCurrentMonitor) == 0x000008, "Wrong size on MonitorBlueprintLibrary_GetCurrentMonitor");
static_assert(offsetof(MonitorBlueprintLibrary_GetCurrentMonitor, ReturnValue) == 0x000000, "Member 'MonitorBlueprintLibrary_GetCurrentMonitor::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetMonitorName
// 0x0018 (0x0018 - 0x0000)
struct MonitorBlueprintLibrary_GetMonitorName final
{
public:
	struct FMonitorHandle                         MonitorHandle;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonitorBlueprintLibrary_GetMonitorName) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_GetMonitorName");
static_assert(sizeof(MonitorBlueprintLibrary_GetMonitorName) == 0x000018, "Wrong size on MonitorBlueprintLibrary_GetMonitorName");
static_assert(offsetof(MonitorBlueprintLibrary_GetMonitorName, MonitorHandle) == 0x000000, "Member 'MonitorBlueprintLibrary_GetMonitorName::MonitorHandle' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetMonitorName, ReturnValue) == 0x000008, "Member 'MonitorBlueprintLibrary_GetMonitorName::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetMonitorPosition
// 0x0010 (0x0010 - 0x0000)
struct MonitorBlueprintLibrary_GetMonitorPosition final
{
public:
	struct FMonitorHandle                         MonitorHandle;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonitorBlueprintLibrary_GetMonitorPosition) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_GetMonitorPosition");
static_assert(sizeof(MonitorBlueprintLibrary_GetMonitorPosition) == 0x000010, "Wrong size on MonitorBlueprintLibrary_GetMonitorPosition");
static_assert(offsetof(MonitorBlueprintLibrary_GetMonitorPosition, MonitorHandle) == 0x000000, "Member 'MonitorBlueprintLibrary_GetMonitorPosition::MonitorHandle' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetMonitorPosition, ReturnValue) == 0x000008, "Member 'MonitorBlueprintLibrary_GetMonitorPosition::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetMonitorSize
// 0x0010 (0x0010 - 0x0000)
struct MonitorBlueprintLibrary_GetMonitorSize final
{
public:
	struct FMonitorHandle                         MonitorHandle;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonitorBlueprintLibrary_GetMonitorSize) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_GetMonitorSize");
static_assert(sizeof(MonitorBlueprintLibrary_GetMonitorSize) == 0x000010, "Wrong size on MonitorBlueprintLibrary_GetMonitorSize");
static_assert(offsetof(MonitorBlueprintLibrary_GetMonitorSize, MonitorHandle) == 0x000000, "Member 'MonitorBlueprintLibrary_GetMonitorSize::MonitorHandle' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetMonitorSize, Width) == 0x000008, "Member 'MonitorBlueprintLibrary_GetMonitorSize::Width' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetMonitorSize, Height) == 0x00000C, "Member 'MonitorBlueprintLibrary_GetMonitorSize::Height' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetPrimaryMonitor
// 0x0008 (0x0008 - 0x0000)
struct MonitorBlueprintLibrary_GetPrimaryMonitor final
{
public:
	struct FMonitorHandle                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonitorBlueprintLibrary_GetPrimaryMonitor) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_GetPrimaryMonitor");
static_assert(sizeof(MonitorBlueprintLibrary_GetPrimaryMonitor) == 0x000008, "Wrong size on MonitorBlueprintLibrary_GetPrimaryMonitor");
static_assert(offsetof(MonitorBlueprintLibrary_GetPrimaryMonitor, ReturnValue) == 0x000000, "Member 'MonitorBlueprintLibrary_GetPrimaryMonitor::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetRefreshRate
// 0x0014 (0x0014 - 0x0000)
struct MonitorBlueprintLibrary_GetRefreshRate final
{
public:
	struct FMonitorResolution                     Resolution;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonitorBlueprintLibrary_GetRefreshRate) == 0x000004, "Wrong alignment on MonitorBlueprintLibrary_GetRefreshRate");
static_assert(sizeof(MonitorBlueprintLibrary_GetRefreshRate) == 0x000014, "Wrong size on MonitorBlueprintLibrary_GetRefreshRate");
static_assert(offsetof(MonitorBlueprintLibrary_GetRefreshRate, Resolution) == 0x000000, "Member 'MonitorBlueprintLibrary_GetRefreshRate::Resolution' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetRefreshRate, ReturnValue) == 0x000010, "Member 'MonitorBlueprintLibrary_GetRefreshRate::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetSupportedFullscreenResolutions
// 0x0020 (0x0020 - 0x0000)
struct MonitorBlueprintLibrary_GetSupportedFullscreenResolutions final
{
public:
	struct FMonitorHandle                         MonitorHandle;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FMonitorResolution>             OutResolutions;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutions) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_GetSupportedFullscreenResolutions");
static_assert(sizeof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutions) == 0x000020, "Wrong size on MonitorBlueprintLibrary_GetSupportedFullscreenResolutions");
static_assert(offsetof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutions, MonitorHandle) == 0x000000, "Member 'MonitorBlueprintLibrary_GetSupportedFullscreenResolutions::MonitorHandle' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutions, OutResolutions) == 0x000008, "Member 'MonitorBlueprintLibrary_GetSupportedFullscreenResolutions::OutResolutions' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutions, ReturnValue) == 0x000018, "Member 'MonitorBlueprintLibrary_GetSupportedFullscreenResolutions::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.GetSupportedFullscreenResolutionsUniqueOnly
// 0x0020 (0x0020 - 0x0000)
struct MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly final
{
public:
	struct FMonitorHandle                         MonitorHandle;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FMonitorResolution>             OutResolutions;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly");
static_assert(sizeof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly) == 0x000020, "Wrong size on MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly");
static_assert(offsetof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly, MonitorHandle) == 0x000000, "Member 'MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly::MonitorHandle' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly, OutResolutions) == 0x000008, "Member 'MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly::OutResolutions' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly, ReturnValue) == 0x000018, "Member 'MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.IsSupportedFullscreen
// 0x0010 (0x0010 - 0x0000)
struct MonitorBlueprintLibrary_IsSupportedFullscreen final
{
public:
	struct FMonitorHandle                         MonitorHandle;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonitorBlueprintLibrary_IsSupportedFullscreen) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_IsSupportedFullscreen");
static_assert(sizeof(MonitorBlueprintLibrary_IsSupportedFullscreen) == 0x000010, "Wrong size on MonitorBlueprintLibrary_IsSupportedFullscreen");
static_assert(offsetof(MonitorBlueprintLibrary_IsSupportedFullscreen, MonitorHandle) == 0x000000, "Member 'MonitorBlueprintLibrary_IsSupportedFullscreen::MonitorHandle' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_IsSupportedFullscreen, ReturnValue) == 0x000008, "Member 'MonitorBlueprintLibrary_IsSupportedFullscreen::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.IsValid
// 0x0010 (0x0010 - 0x0000)
struct MonitorBlueprintLibrary_IsValid final
{
public:
	struct FMonitorHandle                         MonitorHandle;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonitorBlueprintLibrary_IsValid) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_IsValid");
static_assert(sizeof(MonitorBlueprintLibrary_IsValid) == 0x000010, "Wrong size on MonitorBlueprintLibrary_IsValid");
static_assert(offsetof(MonitorBlueprintLibrary_IsValid, MonitorHandle) == 0x000000, "Member 'MonitorBlueprintLibrary_IsValid::MonitorHandle' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_IsValid, ReturnValue) == 0x000008, "Member 'MonitorBlueprintLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function monitorsnap.MonitorBlueprintLibrary.NotEqual_MonitorHandleMonitorHandle
// 0x0018 (0x0018 - 0x0000)
struct MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle final
{
public:
	struct FMonitorHandle                         A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMonitorHandle                         B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle) == 0x000008, "Wrong alignment on MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle");
static_assert(sizeof(MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle) == 0x000018, "Wrong size on MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle");
static_assert(offsetof(MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle, A) == 0x000000, "Member 'MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle::A' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle, B) == 0x000008, "Member 'MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle::B' has a wrong offset!");
static_assert(offsetof(MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle, ReturnValue) == 0x000010, "Member 'MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle::ReturnValue' has a wrong offset!");

}

