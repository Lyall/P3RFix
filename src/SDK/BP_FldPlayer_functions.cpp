#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FldPlayer

#include "Basic.hpp"

#include "BP_FldPlayer_classes.hpp"
#include "BP_FldPlayer_parameters.hpp"


namespace SDK
{

// Function BP_FldPlayer.BP_FldPlayer_C.SetForceNeautralPose
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_FldPlayer_C::SetForceNeautralPose(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FldPlayer_C", "SetForceNeautralPose");

	Params::BP_FldPlayer_C_SetForceNeautralPose Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FldPlayer.BP_FldPlayer_C.SetForceMainWaitPose
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_FldPlayer_C::SetForceMainWaitPose(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FldPlayer_C", "SetForceMainWaitPose");

	Params::BP_FldPlayer_C_SetForceMainWaitPose Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FldPlayer.BP_FldPlayer_C.SetIsTurned
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_FldPlayer_C::SetIsTurned(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FldPlayer_C", "SetIsTurned");

	Params::BP_FldPlayer_C_SetIsTurned Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}

}

