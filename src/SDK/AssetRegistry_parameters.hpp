#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AssetRegistry

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AssetRegistry_structs.hpp"


namespace SDK::Params
{

// Function AssetRegistry.AssetRegistryHelpers.CreateAssetData
// 0x0070 (0x0070 - 0x0000)
struct AssetRegistryHelpers_CreateAssetData final
{
public:
	const class UObject*                          InAsset;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowBlueprintClass;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAssetData                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistryHelpers_CreateAssetData) == 0x000008, "Wrong alignment on AssetRegistryHelpers_CreateAssetData");
static_assert(sizeof(AssetRegistryHelpers_CreateAssetData) == 0x000070, "Wrong size on AssetRegistryHelpers_CreateAssetData");
static_assert(offsetof(AssetRegistryHelpers_CreateAssetData, InAsset) == 0x000000, "Member 'AssetRegistryHelpers_CreateAssetData::InAsset' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_CreateAssetData, bAllowBlueprintClass) == 0x000008, "Member 'AssetRegistryHelpers_CreateAssetData::bAllowBlueprintClass' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_CreateAssetData, ReturnValue) == 0x000010, "Member 'AssetRegistryHelpers_CreateAssetData::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.GetAsset
// 0x0068 (0x0068 - 0x0000)
struct AssetRegistryHelpers_GetAsset final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistryHelpers_GetAsset) == 0x000008, "Wrong alignment on AssetRegistryHelpers_GetAsset");
static_assert(sizeof(AssetRegistryHelpers_GetAsset) == 0x000068, "Wrong size on AssetRegistryHelpers_GetAsset");
static_assert(offsetof(AssetRegistryHelpers_GetAsset, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_GetAsset::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_GetAsset, ReturnValue) == 0x000060, "Member 'AssetRegistryHelpers_GetAsset::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.GetAssetRegistry
// 0x0010 (0x0010 - 0x0000)
struct AssetRegistryHelpers_GetAssetRegistry final
{
public:
	TScriptInterface<class IAssetRegistry>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistryHelpers_GetAssetRegistry) == 0x000008, "Wrong alignment on AssetRegistryHelpers_GetAssetRegistry");
static_assert(sizeof(AssetRegistryHelpers_GetAssetRegistry) == 0x000010, "Wrong size on AssetRegistryHelpers_GetAssetRegistry");
static_assert(offsetof(AssetRegistryHelpers_GetAssetRegistry, ReturnValue) == 0x000000, "Member 'AssetRegistryHelpers_GetAssetRegistry::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.GetClass
// 0x0068 (0x0068 - 0x0000)
struct AssetRegistryHelpers_GetClass final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistryHelpers_GetClass) == 0x000008, "Wrong alignment on AssetRegistryHelpers_GetClass");
static_assert(sizeof(AssetRegistryHelpers_GetClass) == 0x000068, "Wrong size on AssetRegistryHelpers_GetClass");
static_assert(offsetof(AssetRegistryHelpers_GetClass, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_GetClass::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_GetClass, ReturnValue) == 0x000060, "Member 'AssetRegistryHelpers_GetClass::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.GetExportTextName
// 0x0070 (0x0070 - 0x0000)
struct AssetRegistryHelpers_GetExportTextName final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistryHelpers_GetExportTextName) == 0x000008, "Wrong alignment on AssetRegistryHelpers_GetExportTextName");
static_assert(sizeof(AssetRegistryHelpers_GetExportTextName) == 0x000070, "Wrong size on AssetRegistryHelpers_GetExportTextName");
static_assert(offsetof(AssetRegistryHelpers_GetExportTextName, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_GetExportTextName::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_GetExportTextName, ReturnValue) == 0x000060, "Member 'AssetRegistryHelpers_GetExportTextName::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.GetFullName
// 0x0070 (0x0070 - 0x0000)
struct AssetRegistryHelpers_GetFullName final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistryHelpers_GetFullName) == 0x000008, "Wrong alignment on AssetRegistryHelpers_GetFullName");
static_assert(sizeof(AssetRegistryHelpers_GetFullName) == 0x000070, "Wrong size on AssetRegistryHelpers_GetFullName");
static_assert(offsetof(AssetRegistryHelpers_GetFullName, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_GetFullName::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_GetFullName, ReturnValue) == 0x000060, "Member 'AssetRegistryHelpers_GetFullName::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.GetTagValue
// 0x0080 (0x0080 - 0x0000)
struct AssetRegistryHelpers_GetTagValue final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTagName;                                         // 0x0060(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutTagValue;                                       // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistryHelpers_GetTagValue) == 0x000008, "Wrong alignment on AssetRegistryHelpers_GetTagValue");
static_assert(sizeof(AssetRegistryHelpers_GetTagValue) == 0x000080, "Wrong size on AssetRegistryHelpers_GetTagValue");
static_assert(offsetof(AssetRegistryHelpers_GetTagValue, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_GetTagValue::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_GetTagValue, InTagName) == 0x000060, "Member 'AssetRegistryHelpers_GetTagValue::InTagName' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_GetTagValue, OutTagValue) == 0x000068, "Member 'AssetRegistryHelpers_GetTagValue::OutTagValue' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_GetTagValue, ReturnValue) == 0x000078, "Member 'AssetRegistryHelpers_GetTagValue::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.IsAssetLoaded
// 0x0068 (0x0068 - 0x0000)
struct AssetRegistryHelpers_IsAssetLoaded final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistryHelpers_IsAssetLoaded) == 0x000008, "Wrong alignment on AssetRegistryHelpers_IsAssetLoaded");
static_assert(sizeof(AssetRegistryHelpers_IsAssetLoaded) == 0x000068, "Wrong size on AssetRegistryHelpers_IsAssetLoaded");
static_assert(offsetof(AssetRegistryHelpers_IsAssetLoaded, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_IsAssetLoaded::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_IsAssetLoaded, ReturnValue) == 0x000060, "Member 'AssetRegistryHelpers_IsAssetLoaded::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.IsRedirector
// 0x0068 (0x0068 - 0x0000)
struct AssetRegistryHelpers_IsRedirector final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistryHelpers_IsRedirector) == 0x000008, "Wrong alignment on AssetRegistryHelpers_IsRedirector");
static_assert(sizeof(AssetRegistryHelpers_IsRedirector) == 0x000068, "Wrong size on AssetRegistryHelpers_IsRedirector");
static_assert(offsetof(AssetRegistryHelpers_IsRedirector, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_IsRedirector::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_IsRedirector, ReturnValue) == 0x000060, "Member 'AssetRegistryHelpers_IsRedirector::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.IsUAsset
// 0x0068 (0x0068 - 0x0000)
struct AssetRegistryHelpers_IsUAsset final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistryHelpers_IsUAsset) == 0x000008, "Wrong alignment on AssetRegistryHelpers_IsUAsset");
static_assert(sizeof(AssetRegistryHelpers_IsUAsset) == 0x000068, "Wrong size on AssetRegistryHelpers_IsUAsset");
static_assert(offsetof(AssetRegistryHelpers_IsUAsset, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_IsUAsset::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_IsUAsset, ReturnValue) == 0x000060, "Member 'AssetRegistryHelpers_IsUAsset::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.IsValid
// 0x0068 (0x0068 - 0x0000)
struct AssetRegistryHelpers_IsValid final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistryHelpers_IsValid) == 0x000008, "Wrong alignment on AssetRegistryHelpers_IsValid");
static_assert(sizeof(AssetRegistryHelpers_IsValid) == 0x000068, "Wrong size on AssetRegistryHelpers_IsValid");
static_assert(offsetof(AssetRegistryHelpers_IsValid, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_IsValid::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_IsValid, ReturnValue) == 0x000060, "Member 'AssetRegistryHelpers_IsValid::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.SetFilterTagsAndValues
// 0x01F0 (0x01F0 - 0x0000)
struct AssetRegistryHelpers_SetFilterTagsAndValues final
{
public:
	struct FARFilter                              InFilter;                                          // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTagAndValue>                   InTagsAndValues;                                   // 0x00F0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FARFilter                              ReturnValue;                                       // 0x0100(0x00F0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistryHelpers_SetFilterTagsAndValues) == 0x000008, "Wrong alignment on AssetRegistryHelpers_SetFilterTagsAndValues");
static_assert(sizeof(AssetRegistryHelpers_SetFilterTagsAndValues) == 0x0001F0, "Wrong size on AssetRegistryHelpers_SetFilterTagsAndValues");
static_assert(offsetof(AssetRegistryHelpers_SetFilterTagsAndValues, InFilter) == 0x000000, "Member 'AssetRegistryHelpers_SetFilterTagsAndValues::InFilter' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_SetFilterTagsAndValues, InTagsAndValues) == 0x0000F0, "Member 'AssetRegistryHelpers_SetFilterTagsAndValues::InTagsAndValues' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_SetFilterTagsAndValues, ReturnValue) == 0x000100, "Member 'AssetRegistryHelpers_SetFilterTagsAndValues::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistryHelpers.ToSoftObjectPath
// 0x0078 (0x0078 - 0x0000)
struct AssetRegistryHelpers_ToSoftObjectPath final
{
public:
	struct FAssetData                             InAssetData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistryHelpers_ToSoftObjectPath) == 0x000008, "Wrong alignment on AssetRegistryHelpers_ToSoftObjectPath");
static_assert(sizeof(AssetRegistryHelpers_ToSoftObjectPath) == 0x000078, "Wrong size on AssetRegistryHelpers_ToSoftObjectPath");
static_assert(offsetof(AssetRegistryHelpers_ToSoftObjectPath, InAssetData) == 0x000000, "Member 'AssetRegistryHelpers_ToSoftObjectPath::InAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistryHelpers_ToSoftObjectPath, ReturnValue) == 0x000060, "Member 'AssetRegistryHelpers_ToSoftObjectPath::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.PrioritizeSearchPath
// 0x0010 (0x0010 - 0x0000)
struct AssetRegistry_PrioritizeSearchPath final
{
public:
	class FString                                 PathToPrioritize;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistry_PrioritizeSearchPath) == 0x000008, "Wrong alignment on AssetRegistry_PrioritizeSearchPath");
static_assert(sizeof(AssetRegistry_PrioritizeSearchPath) == 0x000010, "Wrong size on AssetRegistry_PrioritizeSearchPath");
static_assert(offsetof(AssetRegistry_PrioritizeSearchPath, PathToPrioritize) == 0x000000, "Member 'AssetRegistry_PrioritizeSearchPath::PathToPrioritize' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.ScanFilesSynchronous
// 0x0018 (0x0018 - 0x0000)
struct AssetRegistry_ScanFilesSynchronous final
{
public:
	TArray<class FString>                         InFilePaths;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bForceRescan;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_ScanFilesSynchronous) == 0x000008, "Wrong alignment on AssetRegistry_ScanFilesSynchronous");
static_assert(sizeof(AssetRegistry_ScanFilesSynchronous) == 0x000018, "Wrong size on AssetRegistry_ScanFilesSynchronous");
static_assert(offsetof(AssetRegistry_ScanFilesSynchronous, InFilePaths) == 0x000000, "Member 'AssetRegistry_ScanFilesSynchronous::InFilePaths' has a wrong offset!");
static_assert(offsetof(AssetRegistry_ScanFilesSynchronous, bForceRescan) == 0x000010, "Member 'AssetRegistry_ScanFilesSynchronous::bForceRescan' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.ScanModifiedAssetFiles
// 0x0010 (0x0010 - 0x0000)
struct AssetRegistry_ScanModifiedAssetFiles final
{
public:
	TArray<class FString>                         InFilePaths;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistry_ScanModifiedAssetFiles) == 0x000008, "Wrong alignment on AssetRegistry_ScanModifiedAssetFiles");
static_assert(sizeof(AssetRegistry_ScanModifiedAssetFiles) == 0x000010, "Wrong size on AssetRegistry_ScanModifiedAssetFiles");
static_assert(offsetof(AssetRegistry_ScanModifiedAssetFiles, InFilePaths) == 0x000000, "Member 'AssetRegistry_ScanModifiedAssetFiles::InFilePaths' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.ScanPathsSynchronous
// 0x0018 (0x0018 - 0x0000)
struct AssetRegistry_ScanPathsSynchronous final
{
public:
	TArray<class FString>                         InPaths;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bForceRescan;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_ScanPathsSynchronous) == 0x000008, "Wrong alignment on AssetRegistry_ScanPathsSynchronous");
static_assert(sizeof(AssetRegistry_ScanPathsSynchronous) == 0x000018, "Wrong size on AssetRegistry_ScanPathsSynchronous");
static_assert(offsetof(AssetRegistry_ScanPathsSynchronous, InPaths) == 0x000000, "Member 'AssetRegistry_ScanPathsSynchronous::InPaths' has a wrong offset!");
static_assert(offsetof(AssetRegistry_ScanPathsSynchronous, bForceRescan) == 0x000010, "Member 'AssetRegistry_ScanPathsSynchronous::bForceRescan' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.SearchAllAssets
// 0x0001 (0x0001 - 0x0000)
struct AssetRegistry_SearchAllAssets final
{
public:
	bool                                          bSynchronousSearch;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistry_SearchAllAssets) == 0x000001, "Wrong alignment on AssetRegistry_SearchAllAssets");
static_assert(sizeof(AssetRegistry_SearchAllAssets) == 0x000001, "Wrong size on AssetRegistry_SearchAllAssets");
static_assert(offsetof(AssetRegistry_SearchAllAssets, bSynchronousSearch) == 0x000000, "Member 'AssetRegistry_SearchAllAssets::bSynchronousSearch' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.GetAllAssets
// 0x0018 (0x0018 - 0x0000)
struct AssetRegistry_GetAllAssets final
{
public:
	TArray<struct FAssetData>                     OutAssetData;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeOnlyOnDiskAssets;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_GetAllAssets) == 0x000008, "Wrong alignment on AssetRegistry_GetAllAssets");
static_assert(sizeof(AssetRegistry_GetAllAssets) == 0x000018, "Wrong size on AssetRegistry_GetAllAssets");
static_assert(offsetof(AssetRegistry_GetAllAssets, OutAssetData) == 0x000000, "Member 'AssetRegistry_GetAllAssets::OutAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAllAssets, bIncludeOnlyOnDiskAssets) == 0x000010, "Member 'AssetRegistry_GetAllAssets::bIncludeOnlyOnDiskAssets' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAllAssets, ReturnValue) == 0x000011, "Member 'AssetRegistry_GetAllAssets::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.GetAllCachedPaths
// 0x0010 (0x0010 - 0x0000)
struct AssetRegistry_GetAllCachedPaths final
{
public:
	TArray<class FString>                         OutPathList;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistry_GetAllCachedPaths) == 0x000008, "Wrong alignment on AssetRegistry_GetAllCachedPaths");
static_assert(sizeof(AssetRegistry_GetAllCachedPaths) == 0x000010, "Wrong size on AssetRegistry_GetAllCachedPaths");
static_assert(offsetof(AssetRegistry_GetAllCachedPaths, OutPathList) == 0x000000, "Member 'AssetRegistry_GetAllCachedPaths::OutPathList' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.GetAssetByObjectPath
// 0x0070 (0x0070 - 0x0000)
struct AssetRegistry_GetAssetByObjectPath final
{
public:
	class FName                                   ObjectPath;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeOnlyOnDiskAssets;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAssetData                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistry_GetAssetByObjectPath) == 0x000008, "Wrong alignment on AssetRegistry_GetAssetByObjectPath");
static_assert(sizeof(AssetRegistry_GetAssetByObjectPath) == 0x000070, "Wrong size on AssetRegistry_GetAssetByObjectPath");
static_assert(offsetof(AssetRegistry_GetAssetByObjectPath, ObjectPath) == 0x000000, "Member 'AssetRegistry_GetAssetByObjectPath::ObjectPath' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetByObjectPath, bIncludeOnlyOnDiskAssets) == 0x000008, "Member 'AssetRegistry_GetAssetByObjectPath::bIncludeOnlyOnDiskAssets' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetByObjectPath, ReturnValue) == 0x000010, "Member 'AssetRegistry_GetAssetByObjectPath::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.GetAssets
// 0x0108 (0x0108 - 0x0000)
struct AssetRegistry_GetAssets final
{
public:
	struct FARFilter                              Filter;                                            // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     OutAssetData;                                      // 0x00F0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_GetAssets) == 0x000008, "Wrong alignment on AssetRegistry_GetAssets");
static_assert(sizeof(AssetRegistry_GetAssets) == 0x000108, "Wrong size on AssetRegistry_GetAssets");
static_assert(offsetof(AssetRegistry_GetAssets, Filter) == 0x000000, "Member 'AssetRegistry_GetAssets::Filter' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssets, OutAssetData) == 0x0000F0, "Member 'AssetRegistry_GetAssets::OutAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssets, ReturnValue) == 0x000100, "Member 'AssetRegistry_GetAssets::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.GetAssetsByClass
// 0x0020 (0x0020 - 0x0000)
struct AssetRegistry_GetAssetsByClass final
{
public:
	class FName                                   ClassName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     OutAssetData;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSearchSubClasses;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_GetAssetsByClass) == 0x000008, "Wrong alignment on AssetRegistry_GetAssetsByClass");
static_assert(sizeof(AssetRegistry_GetAssetsByClass) == 0x000020, "Wrong size on AssetRegistry_GetAssetsByClass");
static_assert(offsetof(AssetRegistry_GetAssetsByClass, ClassName) == 0x000000, "Member 'AssetRegistry_GetAssetsByClass::ClassName' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByClass, OutAssetData) == 0x000008, "Member 'AssetRegistry_GetAssetsByClass::OutAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByClass, bSearchSubClasses) == 0x000018, "Member 'AssetRegistry_GetAssetsByClass::bSearchSubClasses' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByClass, ReturnValue) == 0x000019, "Member 'AssetRegistry_GetAssetsByClass::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.GetAssetsByPackageName
// 0x0020 (0x0020 - 0x0000)
struct AssetRegistry_GetAssetsByPackageName final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     OutAssetData;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeOnlyOnDiskAssets;                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_GetAssetsByPackageName) == 0x000008, "Wrong alignment on AssetRegistry_GetAssetsByPackageName");
static_assert(sizeof(AssetRegistry_GetAssetsByPackageName) == 0x000020, "Wrong size on AssetRegistry_GetAssetsByPackageName");
static_assert(offsetof(AssetRegistry_GetAssetsByPackageName, PackageName) == 0x000000, "Member 'AssetRegistry_GetAssetsByPackageName::PackageName' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByPackageName, OutAssetData) == 0x000008, "Member 'AssetRegistry_GetAssetsByPackageName::OutAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByPackageName, bIncludeOnlyOnDiskAssets) == 0x000018, "Member 'AssetRegistry_GetAssetsByPackageName::bIncludeOnlyOnDiskAssets' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByPackageName, ReturnValue) == 0x000019, "Member 'AssetRegistry_GetAssetsByPackageName::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.GetAssetsByPath
// 0x0020 (0x0020 - 0x0000)
struct AssetRegistry_GetAssetsByPath final
{
public:
	class FName                                   PackagePath;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     OutAssetData;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeOnlyOnDiskAssets;                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_GetAssetsByPath) == 0x000008, "Wrong alignment on AssetRegistry_GetAssetsByPath");
static_assert(sizeof(AssetRegistry_GetAssetsByPath) == 0x000020, "Wrong size on AssetRegistry_GetAssetsByPath");
static_assert(offsetof(AssetRegistry_GetAssetsByPath, PackagePath) == 0x000000, "Member 'AssetRegistry_GetAssetsByPath::PackagePath' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByPath, OutAssetData) == 0x000008, "Member 'AssetRegistry_GetAssetsByPath::OutAssetData' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByPath, bRecursive) == 0x000018, "Member 'AssetRegistry_GetAssetsByPath::bRecursive' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByPath, bIncludeOnlyOnDiskAssets) == 0x000019, "Member 'AssetRegistry_GetAssetsByPath::bIncludeOnlyOnDiskAssets' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetAssetsByPath, ReturnValue) == 0x00001A, "Member 'AssetRegistry_GetAssetsByPath::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.GetSubPaths
// 0x0028 (0x0028 - 0x0000)
struct AssetRegistry_GetSubPaths final
{
public:
	class FString                                 InBasePath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutPathList;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInRecurse;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_GetSubPaths) == 0x000008, "Wrong alignment on AssetRegistry_GetSubPaths");
static_assert(sizeof(AssetRegistry_GetSubPaths) == 0x000028, "Wrong size on AssetRegistry_GetSubPaths");
static_assert(offsetof(AssetRegistry_GetSubPaths, InBasePath) == 0x000000, "Member 'AssetRegistry_GetSubPaths::InBasePath' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetSubPaths, OutPathList) == 0x000010, "Member 'AssetRegistry_GetSubPaths::OutPathList' has a wrong offset!");
static_assert(offsetof(AssetRegistry_GetSubPaths, bInRecurse) == 0x000020, "Member 'AssetRegistry_GetSubPaths::bInRecurse' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.HasAssets
// 0x000C (0x000C - 0x0000)
struct AssetRegistry_HasAssets final
{
public:
	class FName                                   PackagePath;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_HasAssets) == 0x000004, "Wrong alignment on AssetRegistry_HasAssets");
static_assert(sizeof(AssetRegistry_HasAssets) == 0x00000C, "Wrong size on AssetRegistry_HasAssets");
static_assert(offsetof(AssetRegistry_HasAssets, PackagePath) == 0x000000, "Member 'AssetRegistry_HasAssets::PackagePath' has a wrong offset!");
static_assert(offsetof(AssetRegistry_HasAssets, bRecursive) == 0x000008, "Member 'AssetRegistry_HasAssets::bRecursive' has a wrong offset!");
static_assert(offsetof(AssetRegistry_HasAssets, ReturnValue) == 0x000009, "Member 'AssetRegistry_HasAssets::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.IsLoadingAssets
// 0x0001 (0x0001 - 0x0000)
struct AssetRegistry_IsLoadingAssets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistry_IsLoadingAssets) == 0x000001, "Wrong alignment on AssetRegistry_IsLoadingAssets");
static_assert(sizeof(AssetRegistry_IsLoadingAssets) == 0x000001, "Wrong size on AssetRegistry_IsLoadingAssets");
static_assert(offsetof(AssetRegistry_IsLoadingAssets, ReturnValue) == 0x000000, "Member 'AssetRegistry_IsLoadingAssets::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.K2_GetDependencies
// 0x0028 (0x0028 - 0x0000)
struct AssetRegistry_K2_GetDependencies final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAssetRegistryDependencyOptions        DependencyOptions;                                 // 0x0008(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OutDependencies;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_K2_GetDependencies) == 0x000008, "Wrong alignment on AssetRegistry_K2_GetDependencies");
static_assert(sizeof(AssetRegistry_K2_GetDependencies) == 0x000028, "Wrong size on AssetRegistry_K2_GetDependencies");
static_assert(offsetof(AssetRegistry_K2_GetDependencies, PackageName) == 0x000000, "Member 'AssetRegistry_K2_GetDependencies::PackageName' has a wrong offset!");
static_assert(offsetof(AssetRegistry_K2_GetDependencies, DependencyOptions) == 0x000008, "Member 'AssetRegistry_K2_GetDependencies::DependencyOptions' has a wrong offset!");
static_assert(offsetof(AssetRegistry_K2_GetDependencies, OutDependencies) == 0x000010, "Member 'AssetRegistry_K2_GetDependencies::OutDependencies' has a wrong offset!");
static_assert(offsetof(AssetRegistry_K2_GetDependencies, ReturnValue) == 0x000020, "Member 'AssetRegistry_K2_GetDependencies::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.K2_GetReferencers
// 0x0028 (0x0028 - 0x0000)
struct AssetRegistry_K2_GetReferencers final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAssetRegistryDependencyOptions        ReferenceOptions;                                  // 0x0008(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OutReferencers;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetRegistry_K2_GetReferencers) == 0x000008, "Wrong alignment on AssetRegistry_K2_GetReferencers");
static_assert(sizeof(AssetRegistry_K2_GetReferencers) == 0x000028, "Wrong size on AssetRegistry_K2_GetReferencers");
static_assert(offsetof(AssetRegistry_K2_GetReferencers, PackageName) == 0x000000, "Member 'AssetRegistry_K2_GetReferencers::PackageName' has a wrong offset!");
static_assert(offsetof(AssetRegistry_K2_GetReferencers, ReferenceOptions) == 0x000008, "Member 'AssetRegistry_K2_GetReferencers::ReferenceOptions' has a wrong offset!");
static_assert(offsetof(AssetRegistry_K2_GetReferencers, OutReferencers) == 0x000010, "Member 'AssetRegistry_K2_GetReferencers::OutReferencers' has a wrong offset!");
static_assert(offsetof(AssetRegistry_K2_GetReferencers, ReturnValue) == 0x000020, "Member 'AssetRegistry_K2_GetReferencers::ReturnValue' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.RunAssetsThroughFilter
// 0x0100 (0x0100 - 0x0000)
struct AssetRegistry_RunAssetsThroughFilter final
{
public:
	TArray<struct FAssetData>                     AssetDataList;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FARFilter                              Filter;                                            // 0x0010(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistry_RunAssetsThroughFilter) == 0x000008, "Wrong alignment on AssetRegistry_RunAssetsThroughFilter");
static_assert(sizeof(AssetRegistry_RunAssetsThroughFilter) == 0x000100, "Wrong size on AssetRegistry_RunAssetsThroughFilter");
static_assert(offsetof(AssetRegistry_RunAssetsThroughFilter, AssetDataList) == 0x000000, "Member 'AssetRegistry_RunAssetsThroughFilter::AssetDataList' has a wrong offset!");
static_assert(offsetof(AssetRegistry_RunAssetsThroughFilter, Filter) == 0x000010, "Member 'AssetRegistry_RunAssetsThroughFilter::Filter' has a wrong offset!");

// Function AssetRegistry.AssetRegistry.UseFilterToExcludeAssets
// 0x0100 (0x0100 - 0x0000)
struct AssetRegistry_UseFilterToExcludeAssets final
{
public:
	TArray<struct FAssetData>                     AssetDataList;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FARFilter                              Filter;                                            // 0x0010(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetRegistry_UseFilterToExcludeAssets) == 0x000008, "Wrong alignment on AssetRegistry_UseFilterToExcludeAssets");
static_assert(sizeof(AssetRegistry_UseFilterToExcludeAssets) == 0x000100, "Wrong size on AssetRegistry_UseFilterToExcludeAssets");
static_assert(offsetof(AssetRegistry_UseFilterToExcludeAssets, AssetDataList) == 0x000000, "Member 'AssetRegistry_UseFilterToExcludeAssets::AssetDataList' has a wrong offset!");
static_assert(offsetof(AssetRegistry_UseFilterToExcludeAssets, Filter) == 0x000010, "Member 'AssetRegistry_UseFilterToExcludeAssets::Filter' has a wrong offset!");

}

