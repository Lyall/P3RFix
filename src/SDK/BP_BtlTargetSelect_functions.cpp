#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlTargetSelect

#include "Basic.hpp"

#include "BP_BtlTargetSelect_classes.hpp"
#include "BP_BtlTargetSelect_parameters.hpp"


namespace SDK
{

// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.ExecuteUbergraph_BP_BtlTargetSelect
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlTargetSelect_C::ExecuteUbergraph_BP_BtlTargetSelect(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "ExecuteUbergraph_BP_BtlTargetSelect");

	Params::BP_BtlTargetSelect_C_ExecuteUbergraph_BP_BtlTargetSelect Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.StartLerpTimeline
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::StartLerpTimeline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "StartLerpTimeline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.GuiActorUpdate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlTargetSelect_C::GuiActorUpdate(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "GuiActorUpdate");

	Params::BP_BtlTargetSelect_C_GuiActorUpdate Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.GuiActorStateExit
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::GuiActorStateExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "GuiActorStateExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.SceneInit
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::SceneInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "SceneInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.On Select Behind Target
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::On_Select_Behind_Target()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "On Select Behind Target");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.On Select Next Target
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::On_Select_Next_Target()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "On Select Next Target");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.ChangeStateTargetSelect
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::ChangeStateTargetSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "ChangeStateTargetSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.GuiActorStateInit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flag                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlTargetSelect_C::GuiActorStateInit(bool Flag, int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "GuiActorStateInit");

	Params::BP_BtlTargetSelect_C_GuiActorStateInit Parms{};

	Parms.Flag = Flag;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.GuiActorBeginPlay
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::GuiActorBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "GuiActorBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.RepInput
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlInputKey                     InputKey                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_BtlTargetSelect_C::RepInput(const struct FBtlInputKey& InputKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "RepInput");

	Params::BP_BtlTargetSelect_C_RepInput Parms{};

	Parms.InputKey = std::move(InputKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.PushTouch
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::PushTouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "PushTouch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.OnAnalyze
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::OnAnalyze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "OnAnalyze");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.GuiActorUnbindAction
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::GuiActorUnbindAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "GuiActorUnbindAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.GuiActorBindAction
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::GuiActorBindAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "GuiActorBindAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.PushCancel
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::PushCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "PushCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.PushOk
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTargetSelect_C::PushOk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "PushOk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.LerpTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_BtlTargetSelect_C::LerpTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "LerpTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.LerpTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_BtlTargetSelect_C::LerpTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "LerpTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.CheckItemID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillId                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlTargetSelect_C::CheckItemID(int32 ID, int32* SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "CheckItemID");

	Params::BP_BtlTargetSelect_C_CheckItemID Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);

	if (SkillId != nullptr)
		*SkillId = Parms.SkillId;
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.CheckEffecary
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Effecary                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlTargetSelect_C::CheckEffecary(bool* Effecary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "CheckEffecary");

	Params::BP_BtlTargetSelect_C_CheckEffecary Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Effecary != nullptr)
		*Effecary = Parms.Effecary;
}


// Function BP_BtlTargetSelect.BP_BtlTargetSelect_C.SortTargetEnemyList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABtlActor*>                InList                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABtlActor*>                OutList                                                (Parm, OutParm)

void ABP_BtlTargetSelect_C::SortTargetEnemyList(TArray<class ABtlActor*>& InList, TArray<class ABtlActor*>* OutList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetSelect_C", "SortTargetEnemyList");

	Params::BP_BtlTargetSelect_C_SortTargetEnemyList Parms{};

	Parms.InList = std::move(InList);

	UObject::ProcessEvent(Func, &Parms);

	InList = std::move(Parms.InList);

	if (OutList != nullptr)
		*OutList = std::move(Parms.OutList);
}

}

