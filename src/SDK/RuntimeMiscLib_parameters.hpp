#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeMiscLib

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function RuntimeMiscLib.ML_MontageUtility.GetAnimationSequence
// 0x0028 (0x0028 - 0x0000)
struct ML_MontageUtility_GetAnimationSequence final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ML_MontageUtility_GetAnimationSequence) == 0x000008, "Wrong alignment on ML_MontageUtility_GetAnimationSequence");
static_assert(sizeof(ML_MontageUtility_GetAnimationSequence) == 0x000028, "Wrong size on ML_MontageUtility_GetAnimationSequence");
static_assert(offsetof(ML_MontageUtility_GetAnimationSequence, AnimMontage) == 0x000000, "Member 'ML_MontageUtility_GetAnimationSequence::AnimMontage' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_GetAnimationSequence, SlotName) == 0x000008, "Member 'ML_MontageUtility_GetAnimationSequence::SlotName' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_GetAnimationSequence, SectionName) == 0x000010, "Member 'ML_MontageUtility_GetAnimationSequence::SectionName' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_GetAnimationSequence, AnimSequence) == 0x000018, "Member 'ML_MontageUtility_GetAnimationSequence::AnimSequence' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_GetAnimationSequence, ReturnValue) == 0x000020, "Member 'ML_MontageUtility_GetAnimationSequence::ReturnValue' has a wrong offset!");

// Function RuntimeMiscLib.ML_MontageUtility.GetBlendIn
// 0x0010 (0x0010 - 0x0000)
struct ML_MontageUtility_GetBlendIn final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ML_MontageUtility_GetBlendIn) == 0x000008, "Wrong alignment on ML_MontageUtility_GetBlendIn");
static_assert(sizeof(ML_MontageUtility_GetBlendIn) == 0x000010, "Wrong size on ML_MontageUtility_GetBlendIn");
static_assert(offsetof(ML_MontageUtility_GetBlendIn, AnimMontage) == 0x000000, "Member 'ML_MontageUtility_GetBlendIn::AnimMontage' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_GetBlendIn, ReturnValue) == 0x000008, "Member 'ML_MontageUtility_GetBlendIn::ReturnValue' has a wrong offset!");

// Function RuntimeMiscLib.ML_MontageUtility.GetBlendOut
// 0x0010 (0x0010 - 0x0000)
struct ML_MontageUtility_GetBlendOut final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ML_MontageUtility_GetBlendOut) == 0x000008, "Wrong alignment on ML_MontageUtility_GetBlendOut");
static_assert(sizeof(ML_MontageUtility_GetBlendOut) == 0x000010, "Wrong size on ML_MontageUtility_GetBlendOut");
static_assert(offsetof(ML_MontageUtility_GetBlendOut, AnimMontage) == 0x000000, "Member 'ML_MontageUtility_GetBlendOut::AnimMontage' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_GetBlendOut, ReturnValue) == 0x000008, "Member 'ML_MontageUtility_GetBlendOut::ReturnValue' has a wrong offset!");

// Function RuntimeMiscLib.ML_MontageUtility.GetNextSectionName
// 0x0020 (0x0020 - 0x0000)
struct ML_MontageUtility_GetNextSectionName final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ML_MontageUtility_GetNextSectionName) == 0x000008, "Wrong alignment on ML_MontageUtility_GetNextSectionName");
static_assert(sizeof(ML_MontageUtility_GetNextSectionName) == 0x000020, "Wrong size on ML_MontageUtility_GetNextSectionName");
static_assert(offsetof(ML_MontageUtility_GetNextSectionName, AnimMontage) == 0x000000, "Member 'ML_MontageUtility_GetNextSectionName::AnimMontage' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_GetNextSectionName, SectionName) == 0x000008, "Member 'ML_MontageUtility_GetNextSectionName::SectionName' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_GetNextSectionName, Success) == 0x000010, "Member 'ML_MontageUtility_GetNextSectionName::Success' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_GetNextSectionName, ReturnValue) == 0x000014, "Member 'ML_MontageUtility_GetNextSectionName::ReturnValue' has a wrong offset!");

// Function RuntimeMiscLib.ML_MontageUtility.SetBlendIn
// 0x0010 (0x0010 - 0x0000)
struct ML_MontageUtility_SetBlendIn final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ML_MontageUtility_SetBlendIn) == 0x000008, "Wrong alignment on ML_MontageUtility_SetBlendIn");
static_assert(sizeof(ML_MontageUtility_SetBlendIn) == 0x000010, "Wrong size on ML_MontageUtility_SetBlendIn");
static_assert(offsetof(ML_MontageUtility_SetBlendIn, AnimMontage) == 0x000000, "Member 'ML_MontageUtility_SetBlendIn::AnimMontage' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_SetBlendIn, Time) == 0x000008, "Member 'ML_MontageUtility_SetBlendIn::Time' has a wrong offset!");

// Function RuntimeMiscLib.ML_MontageUtility.SetBlendInAuto
// 0x0020 (0x0020 - 0x0000)
struct ML_MontageUtility_SetBlendInAuto final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ML_MontageUtility_SetBlendInAuto) == 0x000008, "Wrong alignment on ML_MontageUtility_SetBlendInAuto");
static_assert(sizeof(ML_MontageUtility_SetBlendInAuto) == 0x000020, "Wrong size on ML_MontageUtility_SetBlendInAuto");
static_assert(offsetof(ML_MontageUtility_SetBlendInAuto, SkeletalMeshComp) == 0x000000, "Member 'ML_MontageUtility_SetBlendInAuto::SkeletalMeshComp' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_SetBlendInAuto, AnimMontage) == 0x000008, "Member 'ML_MontageUtility_SetBlendInAuto::AnimMontage' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_SetBlendInAuto, SectionName) == 0x000010, "Member 'ML_MontageUtility_SetBlendInAuto::SectionName' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_SetBlendInAuto, ReturnValue) == 0x000018, "Member 'ML_MontageUtility_SetBlendInAuto::ReturnValue' has a wrong offset!");

// Function RuntimeMiscLib.ML_MontageUtility.SetBlendInOutAutoWithParam
// 0x0020 (0x0020 - 0x0000)
struct ML_MontageUtility_SetBlendInOutAutoWithParam final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseBlendTime;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ML_MontageUtility_SetBlendInOutAutoWithParam) == 0x000008, "Wrong alignment on ML_MontageUtility_SetBlendInOutAutoWithParam");
static_assert(sizeof(ML_MontageUtility_SetBlendInOutAutoWithParam) == 0x000020, "Wrong size on ML_MontageUtility_SetBlendInOutAutoWithParam");
static_assert(offsetof(ML_MontageUtility_SetBlendInOutAutoWithParam, SkeletalMeshComp) == 0x000000, "Member 'ML_MontageUtility_SetBlendInOutAutoWithParam::SkeletalMeshComp' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_SetBlendInOutAutoWithParam, AnimMontage) == 0x000008, "Member 'ML_MontageUtility_SetBlendInOutAutoWithParam::AnimMontage' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_SetBlendInOutAutoWithParam, SectionName) == 0x000010, "Member 'ML_MontageUtility_SetBlendInOutAutoWithParam::SectionName' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_SetBlendInOutAutoWithParam, DecreaseBlendTime) == 0x000018, "Member 'ML_MontageUtility_SetBlendInOutAutoWithParam::DecreaseBlendTime' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_SetBlendInOutAutoWithParam, ReturnValue) == 0x00001C, "Member 'ML_MontageUtility_SetBlendInOutAutoWithParam::ReturnValue' has a wrong offset!");

// Function RuntimeMiscLib.ML_MontageUtility.SetBlendOut
// 0x0010 (0x0010 - 0x0000)
struct ML_MontageUtility_SetBlendOut final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ML_MontageUtility_SetBlendOut) == 0x000008, "Wrong alignment on ML_MontageUtility_SetBlendOut");
static_assert(sizeof(ML_MontageUtility_SetBlendOut) == 0x000010, "Wrong size on ML_MontageUtility_SetBlendOut");
static_assert(offsetof(ML_MontageUtility_SetBlendOut, AnimMontage) == 0x000000, "Member 'ML_MontageUtility_SetBlendOut::AnimMontage' has a wrong offset!");
static_assert(offsetof(ML_MontageUtility_SetBlendOut, Time) == 0x000008, "Member 'ML_MontageUtility_SetBlendOut::Time' has a wrong offset!");

// Function RuntimeMiscLib.ML_SplineActor.SetMarkerPosition
// 0x0010 (0x0010 - 0x0000)
struct ML_SplineActor_SetMarkerPosition final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ML_SplineActor_SetMarkerPosition) == 0x000004, "Wrong alignment on ML_SplineActor_SetMarkerPosition");
static_assert(sizeof(ML_SplineActor_SetMarkerPosition) == 0x000010, "Wrong size on ML_SplineActor_SetMarkerPosition");
static_assert(offsetof(ML_SplineActor_SetMarkerPosition, Index_0) == 0x000000, "Member 'ML_SplineActor_SetMarkerPosition::Index_0' has a wrong offset!");
static_assert(offsetof(ML_SplineActor_SetMarkerPosition, Position) == 0x000004, "Member 'ML_SplineActor_SetMarkerPosition::Position' has a wrong offset!");

// Function RuntimeMiscLib.ML_SplineActor.SetMarkerVisibility
// 0x0001 (0x0001 - 0x0000)
struct ML_SplineActor_SetMarkerVisibility final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ML_SplineActor_SetMarkerVisibility) == 0x000001, "Wrong alignment on ML_SplineActor_SetMarkerVisibility");
static_assert(sizeof(ML_SplineActor_SetMarkerVisibility) == 0x000001, "Wrong size on ML_SplineActor_SetMarkerVisibility");
static_assert(offsetof(ML_SplineActor_SetMarkerVisibility, Visibility) == 0x000000, "Member 'ML_SplineActor_SetMarkerVisibility::Visibility' has a wrong offset!");

}

